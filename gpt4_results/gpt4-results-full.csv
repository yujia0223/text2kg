,instruction,input,ground_truth,response
0,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Turn Me On is a 35.1 minute long album produced by Wharton Tiers that was followed by the album entitled Take it Off.,"(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | producer | Wharton_Tiers)
(Turn_Me_On_(album) | followedBy | Take_It_Off!)","(""Turn Me On"" | rdf:type | dbo:Album)
(""Turn Me On"" | dbo:duration | ""35.1 minutes"")
(""Turn Me On"" | dbo:producer | ""Wharton Tiers"")
(""Turn Me On"" | dbo:followedBy | ""Take It Off"")
(""Take It Off"" | rdf:type | dbo:Album)
(""Wharton Tiers"" | rdf:type | dbo:Person)
(""Wharton Tiers"" | dbo:produced | ""Turn Me On"")"
1,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The location of Trane is Swords, Dublin.","(Trane | location | Swords,_Dublin)","(""Trane"" | ""location"" | ""Swords, Dublin"")"
2,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Ciudad Ayala city, a part of Morelos with population density and population of 1604.0 and 1,777,539 respectively, has a UTC offset of -6. The government type of Ciudad Ayala is council-manager government and City Manager is one of the leaders.","(Ciudad_Ayala | populationMetro | 1777539)
(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | type | City)
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | governmentType | Council-manager_government)
(Ciudad_Ayala | utcOffset | −6)
(Ciudad_Ayala | isPartOf | Morelos)","(""Ciudad Ayala"" | ""type"" | ""city""),
(""Ciudad Ayala"" | ""part of"" | ""Morelos""),
(""Ciudad Ayala"" | ""population density"" | ""1604.0""),
(""Ciudad Ayala"" | ""population"" | ""1777539""),
(""Ciudad Ayala"" | ""UTC offset"" | ""-6""),
(""Ciudad Ayala"" | ""government type"" | ""council-manager government""),
(""City Manager"" | ""leader of"" | ""Ciudad Ayala"")"
3,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The 17068.8 millimeter long ALCO RS-3 has a diesel-electric transmission.,"(ALCO_RS-3 | powerType | Diesel-electric_transmission)
(ALCO_RS-3 | length | 17068.8 (millimetres))","(ALCO RS-3 | length | 17068.8 millimeters)
(ALCO RS-3 | hasTransmission | diesel-electric transmission)"
4,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan B. Miller Hall, in Virginia, USA, was designed by Robert A.M. Stern. The address of the hall is ""101 Ukrop Way"" and the current tenants are the Mason School of Business.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | location | Virginia)
(Mason_School_of_Business | country | United_States)","(""Alan B. Miller Hall"" | location | ""Virginia, USA"")
(""Alan B. Miller Hall"" | architect | ""Robert A.M. Stern"") 
(""Alan B. Miller Hall"" | address | ""101 Ukrop Way"")
(""Alan B. Miller Hall"" | tenant | ""Mason School of Business"")
(""Robert A.M. Stern"" | drafted | ""Alan B. Miller Hall"")
(""Mason School of Business"" | location | ""Alan B. Miller Hall"")"
5,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina was born in Karlsruhe and died in Israel. Ethnic groups in Israel include Arabs.,"(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | deathPlace | Israel)
(Israel | ethnicGroup | Arab_citizens_of_Israel)","(Liselotte Grschebina | birthPlace | Karlsruhe)
(Liselotte Grschebina | deathPlace | Israel)
(Israel | includesEthnicGroups | Arabs)"
6,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",It’s Great to Be Young is a film edited by Max Benedict.,"(""It's_Great_to_Be_Young_(1956_film) | editing | Max_Benedict"")","(""It's Great to Be Young"" | type | ""Film""),
(""It's Great to Be Young"" | ""editor"" | ""Max Benedict"")"
7,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nurhan Atasoy was born in Turkey led by the President.,"(Turkey | leaderTitle | President)
(Nurhan_Atasoy | birthPlace | Turkey)","(""Nurhan Atasoy"" | ""birthPlace"" | ""Turkey"")
(""Nurhan Atasoy"" | ""country"" | ""Turkey"")
(""Turkey"" | ""hasLeader"" | ""the President"")"
8,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Agremiação Sportiva Arapiraquense managed by Vica has 17000 members and play in the Campeonato Brasileiro Série C league which is from Brazil.,"(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | country | Brazil)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | manager | Vica)","(""Agremiação Sportiva Arapiraquense"" | ""manager"" | ""Vica"")
(""Agremiação Sportiva Arapiraquense"" | ""hasMembers"" | ""17000"")
(""Agremiação Sportiva Arapiraquense"" | ""playIn"" | ""Campeonato Brasileiro Série C"")
(""Campeonato Brasileiro Série C"" | ""locatedIn"" | ""Brazil"")"
9,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bananaman first aired on the 10th of March, 1983 and was created by Steve Bright. It was broadcast by the BBC.","(Bananaman | creator | Steve_Bright)
(Bananaman | broadcastedBy | BBC)
(Bananaman | firstAired | ""1983-10-03"")","(""Bananaman"" | ""first aired on"" | ""10th of March, 1983"")
(""Bananaman"" | ""was created by"" | ""Steve Bright"")
(""Bananaman"" | ""was broadcast by"" | ""BBC"")"
10,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The movie English Without Tears is written by Terence Rattigan and directed by Harold French. Anatole de Grunwald is the producer and Bernard Knowles is the cinematographer. Nicholas Brodszky was a composer of the songs.,"(English_Without_Tears | cinematography | Bernard_Knowles)
(English_Without_Tears | writer | Terence_Rattigan)
(English_Without_Tears | musicComposer | Nicholas_Brodszky)
(English_Without_Tears | producer | Anatole_de_Grunwald)
(English_Without_Tears | director | Harold_French)","(""English Without Tears"" | ""writer"" | ""Terence Rattigan""),
(""English Without Tears"" | ""director"" | ""Harold French""),
(""English Without Tears"" | ""producer"" | ""Anatole de Grunwald""),
(""English Without Tears"" | ""cinematographer"" | ""Bernard Knowles""),
(""English Without Tears"" | ""composer"" | ""Nicholas Brodszky"")"
11,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument, built in 2000, is placed in the municipality of Gettysburg in Pennsylvania which is in Adams County, USA. The 11th Mississippi Infantry Monument is classified as a Contributing Property. Cumberland county, Pennsylvania is to the north of Adams County.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | municipality | Gettysburg,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)
(Adams_County,_Pennsylvania | hasToItsNorth | Cumberland_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | country | ""United States"")","(""11th Mississippi Infantry Monument"" | ""dateBuilt"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Gettysburg"")
(""Gettysburg"" | ""isPartOf"" | ""Adams County"")
(""Adams County"" | ""isPartOf"" | ""USA"")
(""11th Mississippi Infantry Monument"" | ""classification"" | ""Contributing Property"")
(""Gettysburg"" | ""locatedIn"" | ""Pennsylvania"")
(""Cumberland County"" | ""location"" | ""Pennsylvania"")
(""Cumberland County"" | ""northOf"" | ""Adams County"")"
12,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Within the United States Joe Biden is one of it's top officials whilst John Roberts is one of it's leaders. Darinka Dentcheva currently resides in New Jersey of the United States.,"(United_States | leader | John_Roberts)
(Darinka_Dentcheva | residence | United_States)
(United_States | leader | Joe_Biden)
(Darinka_Dentcheva | residence | New_Jersey)","(Joe Biden | position | ""top official"")
(Joe Biden | location | ""United States"")
(John Roberts | position | ""leader"")
(John Roberts | location | ""United States"")
(Darinka Dentcheva | residence | ""New Jersey"")
(Darinka Dentcheva | country | ""United States"")"
13,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Jamie Lawrence wrote music for the 83 minute film 'Death on a Factory Farm' which was produced by Sarah Teale.,"(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)
(Death_on_a_Factory_Farm | runtime | 83.0)
(Death_on_a_Factory_Farm | producer | Sarah_Teale)","(""Jamie Lawrence"" | ""wrote music for"" | ""Death on a Factory Farm"")
(""Death on a Factory Farm"" | ""duration"" | 83)
(""Death on a Factory Farm"" | ""produced by"" | ""Sarah Teale"")"
14,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The government type in France is unitary state.,(France | governmentType | Unitary_state),(France | government type | unitary state)
15,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The College of William and Mary is the owner of the Alan B. Miller Hall, located in Virginia at 101 Ukrop Way and currently occupied by the Mason School of Business.","(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | location | Virginia)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""The College of William and Mary"" | location | ""Virginia"")
(""The College of William and Mary"" | owner | ""Alan B. Miller Hall"")
(""Alan B. Miller Hall"" | location | ""101 Ukrop Way"")
(""Alan B. Miller Hall"" | occupant | ""Mason School of Business"")"
16,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Expect a Miracle is an instrumental album that runs 54.56 minutes. It is followed by the album Afterplay, also by Brian Kelly.","(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | genre | Instrumental_music)
(Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album))","(""Expect a Miracle"" | type | ""instrumental album"")
(""Expect a Miracle"" | ""duration"" | ""54.56 minutes"")
(""Expect a Miracle"" | ""followed by"" | ""Afterplay"")
(""Afterplay"" | ""artist"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""artist"" | ""Brian Kelly"")"
17,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Al Asad Airbase is operated by the United States Air Force and has a runway length of 3,990.","(Al_Asad_Airbase | operatingOrganisation | United_States_Air_Force)
(Al_Asad_Airbase | runwayLength | 3990.0)","(""Al Asad Airbase"" | ""operator"" | ""United States Air Force"")
(""Al Asad Airbase"" | ""runwayLength"" | ""3,990"")"
18,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson, an English national and botanist, was born in 1726 on January, 1. She was married to George Monson and lived in India.","(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | nationality | Kingdom_of_England)
(Lady_Anne_Monson | residence | India)
(Lady_Anne_Monson | spouse | George_Monson)
(Lady_Anne_Monson | professionalField | Botany)","(""Lady Anne Monson"" | ""type"" | ""Person""),
(""Lady Anne Monson"" | ""birthDate"" | ""1726-01-01""),
(""Lady Anne Monson"" | ""nationality"" | ""English""),
(""Lady Anne Monson"" | ""occupation"" | ""botanist""),
(""Lady Anne Monson"" | ""spouse"" | ""George Monson""),
(""Lady Anne Monson"" | ""residence"" | ""India""),
(""George Monson"" | ""type"" | ""Person""),
(""George Monson"" | ""spouse"" | ""Lady Anne Monson"")."
19,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Nord by Year of No Light released on September 6, 2006 with runtime of 58 minutes and 41 seconds is in post-metal and sludge metal genre. Its record label is Crucial Blast.","(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | genre | Post-metal)
(Nord_(Year_of_No_Light_album) | recordLabel | Crucial_Blast)
(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | runtime | 58.41)","(""Nord"" | ""creator"" | ""Year of No Light"")
(""Nord"" | ""release date"" | ""September 6, 2006"")
(""Nord"" | ""runtime"" | ""58 minutes and 41 seconds"")
(""Nord"" | ""genre"" | ""post-metal"")
(""Nord"" | ""genre"" | ""sludge metal"")
(""Nord"" | ""record label"" | ""Crucial Blast"")
(""Year of No Light"" | ""record"" | ""Nord"")"
20,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Born in New Hampshire on November 18th 1923 and dying in California, Alan Shepard was a US national who was selected by NASA in 1959.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | selectedByNasa | 1959)
(Alan_Shepard | birthPlace | New_Hampshire)","(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | birthDate | ""November 18th 1923"")
(Alan Shepard | deathPlace | California)
(Alan Shepard | nationality | ""US"")
(Alan Shepard | wasSelectedBy | NASA)
(NASA | selectedPerson | Alan Shepard)
(NASA | selectionYear | 1959)"
21,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, born Olga Nikolaevna Bondareva, is an alumnus of Leningrad State University.","(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")
(Olga_Bondareva | almaMater | Leningrad_State_University)","(Olga Bondareva | type | Person)
(Olga Bondareva | birthName | ""Olga Nikolaevna Bondareva"")
(Olga Bondareva | almaMater | Leningrad State University)"
22,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy was born in Turkey and is of Turkish nationality. Turkey's largest city is Istanbul, and uses the Turkish Lira as its currency.","(Nurhan_Atasoy | nationality | Turkish_people)
(Turkey | largestCity | Istanbul)
(Nurhan_Atasoy | birthPlace | Turkey)
(Turkey | currency | Turkish_lira)","(""Nurhan Atasoy"" | ""birthPlace"" | ""Turkey"")
(""Nurhan Atasoy"" | ""nationality"" | ""Turkish"")
(""Turkey"" | ""largestCity"" | ""Istanbul"")
(""Turkey"" | ""currency"" | ""Turkish Lira"")"
23,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy (born January 1, 1934) was a Turkish citizen and national who had a residence in Istanbul.","(Nurhan_Atasoy | birthDate | 1934-01-01)
(Nurhan_Atasoy | residence | Istanbul)
(Nurhan_Atasoy | citizenship | Turkey)
(Nurhan_Atasoy | nationality | Turkish_people)","(""Nurhan Atasoy"" | ""birthDate"" | ""January 1, 1934"") 
(""Nurhan Atasoy"" | ""nationality"" | ""Turkey"")
(""Nurhan Atasoy"" | ""place of residence"" | ""Istanbul"")"
24,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","""Death on a Factory Farm"" was produced by Sarah Teale.",(Death_on_a_Factory_Farm | producer | Sarah_Teale),"(""Death on a Factory Farm"" | producer | ""Sarah Teale"")"
25,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nord is a sludge metal album by Year of No Light.,"(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light)","(""Nord"" | ""type"" | ""Sludge Metal Album"")
(""Nord"" | ""creator"" | ""Year of No Light"")"
26,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Morelos is a state in the country or Mexico.,(Morelos | country | Mexico),"(""Morelos"" | ""type"" | ""state"")
(""Morelos"" | ""isInCountry"" | ""Mexico"")"
27,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nie Haisheng was a fighter pilot from the People's Republic of China who was born in Hubei, Zaoyang on October 13, 1964.","(Nie_Haisheng | birthPlace | Zaoyang)
(Nie_Haisheng | birthPlace | Hubei)
(""Nie_Haisheng | nationality | People's_Republic_of_China)
(Nie_Haisheng | birthDate | 1964-10-13)
(Nie_Haisheng | occupation | Fighter_pilot)","(""Nie Haisheng"" | ""type"" | ""Fighter Pilot"")
(""Nie Haisheng"" | ""birthPlace"" | ""Zaoyang"")
(""Nie Haisheng"" | ""birthDate"" | ""1964-10-13""^^xsd:date)
(""Nie Haisheng"" | ""birthPlace"" | ""Hubei"")
(""Nie Haisheng"" | ""nationality"" | ""People's Republic of China"")
(""Zaoyang"" | ""isPartOf"" | ""Hubei"")
(""Zaoyang"" | ""locatedInCountry"" | ""People's Republic of China"")
(""Hubei"" | ""locatedInCountry"" | ""People's Republic of China"")"
28,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alliance Films Corporation is the distributor for the film McVeagh of the South Seas which was directed by actor Harry Carey, born in 1878.","(McVeagh_of_the_South_Seas | director | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | distributor | Alliance_Films_Corporation)","(""Alliance Films Corporation"" | ""type"" | ""Corporation"")
(""Alliance Films Corporation"" | ""distributes"" | ""McVeagh of the South Seas"")
(""McVeagh of the South Seas"" | ""type"" | ""film"")
(""McVeagh of the South Seas"" | ""directedBy"" | ""Harry Carey"")
(""Harry Carey"" | ""type"" | ""actor"")
(""Harry Carey"" | ""bornIn"" | ""1878"")"
29,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson was born in Darlington, England which is in the North East England region. The Kingdom of England was founded in the year 927.","(Lady_Anne_Monson | birthPlace | Darlington)
(Kingdom_of_England | foundingYear | 0927)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Darlington | region | North_East_England)","(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington, England"")
(""Darlington, England"" | ""isInRegion"" | ""North East England"")
(""North East England"" | ""partOf"" | ""Kingdom of England"")
(""Kingdom of England"" | ""foundingYear"" | ""927"")"
30,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Velvet Underground album Squeeze was preceded by the compilation album Andy Warhol's Velvet Underground Featuring Nico.,"(""Squeeze_(The_Velvet_Underground_album) | precededBy | Andy_Warhol's_Velvet_Underground_Featuring_Nico"")","(""Squeeze"" | ""isAlbumOf"" | ""The Velvet Underground"")
(""Squeeze"" | ""precededBy"" | ""Andy Warhol's Velvet Underground Featuring Nico"")
(""Andy Warhol's Velvet Underground Featuring Nico"" | ""isCompilationAlbumOf"" | ""The Velvet Underground"")"
31,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bedford Aerodrome operated by MotorSport Vision has EGBF as its ICAO location identifier.,"(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | icaoLocationIdentifier | EGBF)","(""Bedford Aerodrome"" | ""operator"" | ""MotorSport Vision"")
(""Bedford Aerodrome"" | ""ICAO location identifier"" | ""EGBF"")"
32,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adolfo Suarez Madrid-Barajas airport is located at Paracuellos de Jarama, is operated by ENAIRE and is 610 metres above sea level. It also has a 3500 long runway.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Paracuellos_de_Jarama)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)","(""Adolfo Suarez Madrid-Barajas airport"" | ""location"" | ""Paracuellos de Jarama""),
(""Adolfo Suarez Madrid-Barajas airport"" | ""operator"" | ""ENAIRE""),
(""Adolfo Suarez Madrid-Barajas airport"" | ""altitude"" | ""610 metres""),
(""Adolfo Suarez Madrid-Barajas airport"" | ""hasRunway"" | ""true""),
(""Adolfo Suarez Madrid-Barajas airport"" | ""runwayLength"" | ""3500 metres"")"
33,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Brandon Carter, born on the 1st of January 1942 is well known for the Anthropic principle theory.","(Brandon_Carter | knownFor | Anthropic_principle)
(Brandon_Carter | birthDate | 1942-01-01)","1. (Brandon Carter | birthDate | ""1st of January 1942"")
2. (Brandon Carter | knownFor | ""Anthropic principle theory"")"
34,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nurhan Atasoy is a Turkish national born in Turkey. Turkey has its largest city as Istanbul and its currency is Turkish lira.,"(Nurhan_Atasoy | nationality | Turkish_people)
(Turkey | largestCity | Istanbul)
(Nurhan_Atasoy | birthPlace | Turkey)
(Turkey | currency | Turkish_lira)","(Nurhan Atasoy | nationality | ""Turkish"")
(Nurhan Atasoy | birthPlace | ""Turkey"")
(Turkey | largestCity | ""Istanbul"")
(Turkey | currency | ""Turkish lira"")"
35,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Tom Sizemore stars in Super Capers.,(Super_Capers | starring | Tom_Sizemore),"(""Tom Sizemore"" | ""stars in"" | ""Super Capers"")"
36,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Estadio Municipal Coaracy da Mata Fonseca in Arapiraca is the ground of Agremiação Sportiva Arapiraquense (which has 17000 members) that play in the Campeonato Brasileiro Série C league. Champions, The Vila Nova Futebol Clube at Campeonato Brasileiro Série C from Brazil.","(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Campeonato_Brasileiro_Série_C | country | Brazil)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(""Estadio Municipal Coaracy da Mata Fonseca"" | ""locatedIn"" | ""Arapiraca"")
(""Agremiação Sportiva Arapiraquense"" | ""ground"" | ""Estadio Municipal Coaracy da Mata Fonseca"")
(""Agremiação Sportiva Arapiraquense"" | ""hasMembers"" | ""17000"")
(""Agremiação Sportiva Arapiraquense"" | ""playsIn"" | ""Campeonato Brasileiro Série C"")
(""Vila Nova Futebol Clube"" | ""isChampionOf"" | ""Campeonato Brasileiro Série C"")
(""Vila Nova Futebol Clube"" | ""locatedIn"" | ""Brazil"")"
37,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ray Griggs wrote and directed the 98 minutes movie Super Capers which is starring Michael Rooker had a budget of $2000000.,"(Super_Capers | starring | Michael_Rooker)
(Super_Capers | budget | 2000000.0)
(Super_Capers | writer | Ray_Griggs_(director))
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | runtime | 98.0)","(""Ray Griggs"" | ""wrote"" | ""Super Capers""),
(""Ray Griggs"" | ""directed"" | ""Super Capers""),
(""Super Capers"" | ""starring"" | ""Michael Rooker""),
(""Super Capers"" | ""hasRunningTime"" | ""98 minutes""),
(""Super Capers"" | ""hasBudget"" | ""$2000000"")"
38,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Train song Mermaid, produced by Espionage, is in the reggae genre.","(Mermaid_(Train_song) | genre | Reggae)
(Mermaid_(Train_song) | producer | Espionage_(production_team))","(""Mermaid"" | songProducedBy | ""Espionage"")
(""Mermaid"" | type | ""Song"")
(""Mermaid"" | songBy | ""Train"")
(""Mermaid"" | genre | ""reggae"")"
39,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology, affiliated with Visvesvaraya Technological University, is located in Belgaum, India.","(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Visvesvaraya_Technological_University | city | Belgaum)
(Acharya_Institute_of_Technology | country | ""India"")","(""Acharya Institute of Technology"" | ""affiliation"" | ""Visvesvaraya Technological University"")
(""Acharya Institute of Technology"" | ""location"" | ""Belgaum, India"")"
40,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Baku Turkish Martyrs' Memorial is located in Azerbaijan, where Artur Rasizade was a leader.","(Azerbaijan | leader | Artur_Rasizade)
(""Baku_Turkish_Martyrs'_Memorial | location | Azerbaijan"")","(""Baku Turkish Martyrs' Memorial"" | ""location"" | ""Azerbaijan"")
(""Artur Rasizade"" | ""leaderOf"" | ""Azerbaijan"")"
41,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bionico, a food found in Mexico, is a dish served for dessert.","(Bionico | course | Dessert)
(Bionico | country | Mexico)","(""Bionico"" | ""rdf:type"" | ""Food"")
(""Bionico"" | ""foundInLocation"" | ""Mexico"")
(""Bionico"" | ""servedAs"" | ""dessert"")"
42,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aaron Turner is a singer who started performing in 1995 and played with the band, Twilight.","(Aaron_Turner | instrument | Singing)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))
(Aaron_Turner | activeYearsStartYear | 1995)","(Aaron Turner | type | Singer)
(Aaron Turner | startedPerforming | 1995)
(Aaron Turner | memberOf | Twilight)"
43,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva, born on the date January 1st, 1958, was influenced by Andrzej Piotr Ruszczynski in the field of Mathematical optimization and became a citizen of the United States and claims residence in the state of New Jersey.","(Darinka_Dentcheva | influencedBy | Andrzej_Piotr_Ruszczyński)
(Darinka_Dentcheva | citizenship | United_States)
(Darinka_Dentcheva | birthDate | 1958-01-01)
(Darinka_Dentcheva | professionalField | Mathematical_optimization)
(Darinka_Dentcheva | residence | New_Jersey)","(""Darinka Dentcheva"" | ""birthDate"" | ""1958-01-01"")
(""Darinka Dentcheva"" | ""influencedBy"" | ""Andrzej Piotr Ruszczynski"")
(""Darinka Dentcheva"" | ""field"" | ""Mathematical optimization"")
(""Darinka Dentcheva"" | ""citizenship"" | ""United States"")
(""Darinka Dentcheva"" | ""residence"" | ""New Jersey"")"
44,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The train song Mermaid was written by the production team Stargate which had worked with musicians like Michael Jackson.,"(Mermaid_(Train_song) | writer | Stargate_(production_team))
(Stargate_(production_team) | associatedBand/associatedMusicalArtist | Michael_Jackson)","(""Mermaid"" | ""type"" | ""song"")
(""Mermaid"" | ""writtenBy"" | ""Stargate"")
(""Stargate"" | ""type"" | ""production team"")
(""Stargate"" | ""workedWith"" | ""Michael Jackson"")
(""Michael Jackson"" | ""type"" | ""musician"")"
45,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bananaman, which was broadcasted by STV, was first aired on 10/03/1983.","(Bananaman | broadcastedBy | ""STV"")
(Bananaman | firstAired | ""1983-10-03"")","(""Bananaman"" | ""broadcastedBy"" | ""STV"")
(""Bananaman"" | ""firstAiredOn"" | ""10/03/1983"")"
46,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Founded on January 1, 2001, Hypermarcas is a pharmaceutical company that makes healthcare products and sells cosmetics.","(Hypermarcas | foundingDate | 2001-01-01)
(Hypermarcas | product | Healthcare)
(Hypermarcas | product | Cosmetics)
(Hypermarcas | industry | Pharmaceuticals)","(""Hypermarcas"" | ""foundingDate"" | ""January 1, 2001"")
(""Hypermarcas"" | ""type"" | ""Pharmaceutical Company"")
(""Hypermarcas"" | ""activity"" | ""makes healthcare products"")
(""Hypermarcas"" | ""activity"" | ""sells cosmetics"")"
47,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Year of No Light album Nord was followed by Year of No Light's album Live at Roadburn 2008. Nord is considered sludge or post metal.,"(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | genre | Post-metal)","(Nord | type | album)
(Year of No Light | hasAlbum | Nord)
(Nord | followedBy | Live at Roadburn 2008)
(Live at Roadburn 2008 | type | album)
(Year of No Light | hasAlbum | Live at Roadburn 2008)
(Nord | musicalGenre | sludge)
(Nord | musicalGenre | post metal)"
48,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",English Without Tears was written by Anatole de Grunwald and Terence Rattigan. Rattigan died in London while Grunwald died in Hamilton.,"(English_Without_Tears | writer | Anatole_de_Grunwald)
(Terence_Rattigan | deathPlace | Hamilton,_Bermuda)
(Anatole_de_Grunwald | deathPlace | London)
(English_Without_Tears | writer | Terence_Rattigan)","(""English Without Tears"" | ""was written by"" | ""Anatole de Grunwald"")
(""English Without Tears"" | ""was written by"" | ""Terence Rattigan"")
(""Terence Rattigan"" | ""died in"" | ""London"")
(""Anatole de Grunwald"" | ""died in"" | ""Hamilton"")"
49,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","John Mills, who was born on January 1, 1908, had a main role in the movie It's Great to Be Young.","(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(John_Mills | birthDate | 1908-01-01)","(John Mills | birthDate | ""January 1, 1908"")
(John Mills | type | Person)
(John Mills | actedIn | ""It's Great to Be Young"")
(It's Great to Be Young | type | Film)
(It's Great to Be Young | hasActor | John Mills)"
50,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",McVeagh of the South Seas is a film directed by Harry Carey and Cyril Bruce. Carey was born in 1878 and he was the lead actor of the film. This movie can be found on the IMDb by inputting the Id of 0004319.,"(McVeagh_of_the_South_Seas | imdbId | 0004319)
(McVeagh_of_the_South_Seas | director | Cyril_Bruce)
(McVeagh_of_the_South_Seas | director | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878))","(""McVeagh of the South Seas"" | ""director"" | ""Harry Carey"")
(""McVeagh of the South Seas"" | ""director"" | ""Cyril Bruce"")
(""Harry Carey"" | ""birthYear"" | ""1878"")
(""McVeagh of the South Seas"" | ""actor"" | ""Harry Carey"")
(""McVeagh of the South Seas"" | ""IMDbId"" | ""0004319"")"
51,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Train song Mermaid, which is in the reggae genre, was released under the record labels of Columbia Records and Sony Music Entertainment. The song featured on Train’s ""California 37"" album and was written by Espen Lind and Amund Bjørklund. Its length is 3:16 minutes.","(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)
(Mermaid_(Train_song) | writer | Espen_Lind)
(Mermaid_(Train_song) | genre | Reggae)
(Mermaid_(Train_song) | writer | Amund_Bjørklund)
(Mermaid_(Train_song) | album | California_37_(Train_album))","(""Mermaid"" | type | ""Song"")
(""Mermaid"" | genre | ""Reggae"")
(""Mermaid"" | recordLabel | ""Columbia Records"")
(""Mermaid"" | recordLabel | ""Sony Music Entertainment"")
(""Mermaid"" | album | ""California 37"")
(""Mermaid"" | writer | ""Espen Lind"")
(""Mermaid"" | writer | ""Amund Bjørklund"")
(""Mermaid"" | length | ""3:16 minutes"")
(""Mermaid"" | performedBy | ""Train"")
(""California 37"" | type | ""Album"")
(""California 37"" | containSong | ""Mermaid"")
(""California 37"" | artist | ""Train"")
(""Espen Lind"" | type | ""Person"")
(""Espen Lind"" | wrote | ""Mermaid"")
(""Amund Bjørklund"" | type | ""Person"")
(""Amund Bjørklund"" | wrote | ""Mermaid"")
(""Train"" | type | ""Music Group"")
(""Train"" | performed | ""Mermaid"")
(""Train"" | hasAlbum | ""California 37"")
(""Columbia Records"" | type | ""Record Label"")
(""Columbia Records"" | released | ""Mermaid"")
(""Sony Music Entertainment"" | type | ""Record Label"")
(""Sony Music Entertainment"" | released | ""Mermaid"")"
52,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Year of No Light album Nord is in the post-metal genre and was released 2006-09-06 on the Crucial Blast label.,"(Nord_(Year_of_No_Light_album) | genre | Post-metal)
(Nord_(Year_of_No_Light_album) | recordLabel | Crucial_Blast)
(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)","(""Nord"" | ""type"" | ""album"")
(""Nord"" | ""artist"" | ""Year of No Light"")
(""Nord"" | ""genre"" | ""post-metal"")
(""Nord"" | ""releaseDate"" | ""2006-09-06"")
(""Nord"" | ""label"" | ""Crucial Blast"")"
53,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Mason School of Business is located in Virginia in the United States and is based at The Alan B Miller Hall on 101 Ukrop Way. The building was designed by architect Robert A.M. Stern.,"(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | location | Virginia)
(Mason_School_of_Business | country | United_States)","(""Mason School of Business"" | ""location"" | ""Virginia"")
(""Mason School of Business"" | ""country"" | ""United States"")
(""Mason School of Business"" | ""base"" | ""Alan B Miller Hall"")
(""Alan B Miller Hall"" | ""location"" | ""101 Ukrop Way"")
(""Alan B Miller Hall"" | ""designedby"" | ""Robert A.M. Stern"")"
54,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bionico is a dessert food made from chopped fruits, sour cream, condensed milk, granola, shredded coconut and raisins. This dish can be found in Mexico, a country that is inhabited by Mexicans and uses the peso as its currency.","(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Bionico | mainIngredient | ""Chopped Fruits, Sour Cream, Condensed Milk, Granola, Shredded Coconut, Raisins"")
(Bionico | country | Mexico)","(""Bionico"" | ""type"" | ""Dessert"")
(""Bionico"" | ""ingredient"" | ""Fruits"")
(""Bionico"" | ""ingredient"" | ""Sour cream"")
(""Bionico"" | ""ingredient"" | ""Condensed milk"")
(""Bionico"" | ""ingredient"" | ""Granola"")
(""Bionico"" | ""ingredient"" | ""Shredded coconut"")
(""Bionico"" | ""ingredient"" | ""Raisins"")
(""Bionico"" | ""location"" | ""Mexico"")
(""Mexico"" | ""inhabitant"" | ""Mexicans"")
(""Mexico"" | ""currency"" | ""Peso"")"
55,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nie Haisheng was born on October 13, 1964 and is from the People’s Republic of China. Haisheng worked as a fighter pilot and was apart of the Shenzhou 10 mission and also took part in the Shenzhou 6 mission.","(Nie_Haisheng | mission | Shenzhou_10)
(Nie_Haisheng | mission | Shenzhou_6)
(""Nie_Haisheng | nationality | People's_Republic_of_China)
(Nie_Haisheng | birthDate | 1964-10-13)
(Nie_Haisheng | occupation | Fighter_pilot)","(Nie Haisheng | birthDate | October 13, 1964)
(Nie Haisheng | birthPlace | People's Republic of China)
(Nie Haisheng | occupation | Fighter Pilot)
(Nie Haisheng | participatedIn | Shenzhou 10 Mission)
(Nie Haisheng | participatedIn | Shenzhou 6 Mission)"
56,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bionico is a food found in Mexico, in the region Jalisco. It is served as a dessert in the country, where the local currency is the peso.","(Mexico | currency | Mexican_peso)
(Bionico | course | Dessert)
(Bionico | region | Jalisco)
(Bionico | country | Mexico)","(Bionico | type | Food)
(Bionico | isFoundIn| Mexico)
(Mexico | hasRegion | Jalisco)
(Bionico | isServedAs | Dessert)
(Dessert | isServedIn | Mexico)
(Mexico | hasCurrency | Peso)"
57,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Music group the Velvet Underground released the rock album Bootleg Series Volume 1: The Quine Tapes that run for 230:05. It is produced by Velvet Underground, who also produced the previous one, Squeeze.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | genre | Rock_music)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | precededBy | Squeeze_(The_Velvet_Underground_album))","(""Velvet Underground"" | type | ""Music Group"")
(""Bootleg Series Volume 1: The Quine Tapes"" | type | ""Rock Album"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""released by"" | ""Velvet Underground"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""run time"" | ""230:05"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""produced by"" | ""Velvet Underground"")
(""Squeeze"" | ""previous"" | ""Bootleg Series Volume 1: The Quine Tapes"")
(""Squeeze"" | ""produced by"" | ""Velvet Underground"")"
58,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",GMA New Media is located in the GMA Network Center in the Philippines. Their main product is online games but they also produce web services.,"(GMA_New_Media | location | GMA_Network_Center)
(GMA_New_Media | product | Online_Game)
(GMA_New_Media | location | Philippines)
(GMA_New_Media | product | World_Wide_Web)","(""GMA New Media"" | ""location"" | ""GMA Network Center"")
(""GMA New Media"" | ""location"" | ""Philippines"")
(""GMA New Media"" | ""product"" | ""online games"")
(""GMA New Media"" | ""product"" | ""web services"")"
59,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Abraham A. Ribicoff was born in New Britain, Connecticut and was a US citizen. He was married to Ruth Ribicoff and was in office at the same time as the presidency of John F. Kennedy. He died in the United States.","(Abraham_A._Ribicoff | spouse | ""Ruth Ribicoff"")
(Abraham_A._Ribicoff | inOfficeWhilePresident | John_F._Kennedy)
(Abraham_A._Ribicoff | nationality | American)
(Abraham_A._Ribicoff | deathPlace | United_States)
(Abraham_A._Ribicoff | birthPlace | New_Britain,_Connecticut)","(Abraham A. Ribicoff | birthPlace | New Britain, Connecticut)
(Abraham A. Ribicoff | nationality | US)
(Abraham A. Ribicoff | spouse | Ruth Ribicoff)
(Abraham A. Ribicoff | period | John F. Kennedy Presidency)
(Abraham A. Ribicoff | deathPlace | United States)"
60,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Hypermarcas, founded on January 1, 2001, is located in Brazil. Hypermarcas is a type of S.A, and is managed by their CEO.","(Hypermarcas | location | Brazil)
(Hypermarcas | keyPerson | CEO)
(Hypermarcas | foundingDate | 2001-01-01)
(Hypermarcas | type | S.A._(corporation))","(""Hypermarcas"" | ""foundingDate"" | ""2001-01-01"")
(""Hypermarcas"" | ""location"" | ""Brazil"")
(""Hypermarcas"" | ""type"" | ""S.A"")
(""Hypermarcas"" | "" managedBy"" | ""CEO"")"
61,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aleksandr Prudnikov was born on the 24th February 1989.He is a member of the youth side of FC Spartak Moscow and is the FC Terek Grozny club.,"(Aleksandr_Prudnikov | birthDate | 1989-02-24)
(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(Aleksandr_Prudnikov | club | FC_Terek_Grozny)","(""Aleksandr Prudnikov"" | ""birthDate"" | ""24th February 1989"")
(""Aleksandr Prudnikov"" | ""memberOf"" | ""youth side of FC Spartak Moscow"")
(""Aleksandr Prudnikov"" | ""memberOf"" | ""FC Terek Grozny club"")"
62,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala is a city, in Mexico. Its population in the metropolitan area is 1777539 and the population density is 1604. The goverment type is council-manager and its leader title is city manager.","(Ciudad_Ayala | populationMetro | 1777539)
(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | type | City)
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | governmentType | Council-manager_government)
(Ciudad_Ayala | country | Mexico)","(""Ciudad Ayala"" | ""type"" | ""city""),
(""Ciudad Ayala"" | ""locatedIn"" | ""Mexico""),
(""Ciudad Ayala"" | ""populationTotal"" | ""1777539""),
(""Ciudad Ayala"" | ""populationDensity"" | ""1604""),
(""Ciudad Ayala"" | ""governmentType"" | ""council-manager""),
(""Ciudad Ayala"" | ""leaderTitle"" | ""city manager"")"
63,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Brandon Carter whose alma mater is the University of Cambridge, born in England on the date 01-01-1942, is a professional in the field of general relativity and had Dennis William Sciama as his doctoral advisor.","(Brandon_Carter | professionalField | General_relativity)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)
(Brandon_Carter | birthPlace | England)
(Brandon_Carter | birthDate | 1942-01-01)
(Brandon_Carter | almaMater | University_of_Cambridge)","(""Brandon Carter"" | ""birthDate"" | ""1942-01-01"")
(""Brandon Carter"" | ""birthPlace"" | ""England"")
(""Brandon Carter"" | ""almaMater"" | ""University of Cambridge"")
(""Brandon Carter"" | ""profession"" | ""general relativity"")
(""Brandon Carter"" | ""doctoralAdvisor"" | ""Dennis William Sciama"")"
64,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva was born Olga Nikolaevna Bondareva on April 27, 1937, in Leningrad, USSR. She was known for the Bondareva-Shapley theorem and died in Saint Petersburg.","(Olga_Bondareva | deathPlace | Saint_Petersburg)
(Olga_Bondareva | birthPlace | Leningrad,_USSR)
(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")","(Olga Bondareva | name | ""Olga Nikolaevna Bondareva"")
(Olga Bondareva | birthDate | ""1937-04-27"")
(Olga Bondareva | birthPlace | ""Leningrad, USSR"")
(Olga Bondareva | knownFor | ""Bondareva-Shapley theorem"")
(Olga Bondareva | deathPlace | ""Saint Petersburg"")"
65,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bananaman, first aired on 3rd October 1983, is broadcasted by STV.","(Bananaman | broadcastedBy | ""STV"")
(Bananaman | firstAired | ""1983-10-03"")","(""Bananaman"" | ""firstAiredOn"" | ""3rd October 1983"")
(""Bananaman"" | ""isBroadcastedBy"" | ""STV"")"
66,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Jamie Lawrence composed music for the movie ""Death on a Factory Farm"" which was directed by Tom Simon.","(Death_on_a_Factory_Farm | director | Tom_Simon)
(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)","(Jamie Lawrence | composed music for | ""Death on a Factory Farm"")
(""Death on a Factory Farm"" | was directed by | Tom Simon)
(""Death on a Factory Farm"" | has composer | Jamie Lawrence)
(Tom Simon | directed | ""Death on a Factory Farm"")"
67,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Expect a Miracle, an easy listening album in the instrumental music genre, is produced by Brian Kelly.","(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | genre | Instrumental_music)
(Expect_a_Miracle | genre | Easy_listening)","(""Expect a Miracle"" | type | ""easy listening album"")
(""Expect a Miracle"" | type | ""instrumental music genre"")
(""Expect a Miracle"" | ""is produced by"" | ""Brian Kelly"")"
68,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1147 Stavropolis asteroid was discovered by Grigory Neujmin on the 11 of June 1929. It has a rotation period of 20378.5, the orbital period is 1249.6 days, its apoapsis is 418476000000.0, has a rotation period of 20378.5 and the absolute magnitude is 11.5.","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | discoverer | Grigory_Neujmin)
(1147_Stavropolis | absoluteMagnitude | 11.5)
(1147_Stavropolis | discovered | 1929-06-11)
(1147_Stavropolis | rotationPeriod | 20378.5)","(""1147 Stavropolis asteroid"" | ""was discovered by"" | ""Grigory Neujmin"")
(""1147 Stavropolis asteroid"" | ""date of discovery"" | ""11 of June 1929"")
(""1147 Stavropolis asteroid"" | ""has rotation period of"" | 20378.5)
(""1147 Stavropolis asteroid"" | ""has orbital period of"" | 1249.6 days)
(""1147 Stavropolis asteroid"" | ""has apoapsis"" | 418476000000.0)
(""1147 Stavropolis asteroid"" | ""has absolute magnitude of"" | 11.5)"
69,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Alan Shepard was an American test pilot who was born in New Hampshire in November of 1923. He died in California.,"(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | occupation | Test_pilot)","(Alan Shepard | type | American test pilot)
(Alan Shepard | place of birth | New Hampshire)
(Alan Shepard | date of birth | November 1923)
(Alan Shepard | place of death | California)"
70,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",McVeagh of the South Seas is a film registered in IMDb with ID 0004319. It was directed by Cyril Bruce and Harry Carey. Harry Carey also served as the film writer and starred in the film. McVeagh of the South Seas was produced by Progressive Motion Picture Company.,"(McVeagh_of_the_South_Seas | imdbId | 0004319)
(McVeagh_of_the_South_Seas | director | Cyril_Bruce)
(McVeagh_of_the_South_Seas | director | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | writer | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | producer | The_Progressive_Motion_Picture_Company)","(""McVeagh of the South Seas"" | type | ""film"")
(""McVeagh of the South Seas"" | ""registeredIn"" | ""IMDb"")
(""McVeagh of the South Seas"" | ""IMDbID"" | ""0004319"")
(""McVeagh of the South Seas"" | ""director"" | ""Cyril Bruce"")
(""McVeagh of the South Seas"" | ""director"" | ""Harry Carey"")
(""Harry Carey"" | ""directed"" | ""McVeagh of the South Seas"")
(""Cyril Bruce"" | ""directed"" | ""McVeagh of the South Seas"")
(""Harry Carey"" | ""role"" | ""film writer"")
(""Harry Carey"" | ""wrote"" | ""McVeagh of the South Seas"")
(""McVeagh of the South Seas"" | ""writer"" | ""Harry Carey"")
(""Harry Carey"" | ""starredIn"" | ""McVeagh of the South Seas"")
(""McVeagh of the South Seas"" | ""starring"" | ""Harry Carey"")
(""McVeagh of the South Seas"" | ""producedBy"" | ""Progressive Motion Picture Company"")
(""Progressive Motion Picture Company"" | ""produced"" | ""McVeagh of the South Seas"")"
71,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Honeymoon Killers, whose album was titled ‘Turn Me On’ are also associated with the band Pussy Galore.","(Turn_Me_On_(album) | artist | The_Honeymoon_Killers_(American_band))
(The_Honeymoon_Killers_(American_band) | associatedBand/associatedMusicalArtist | Pussy_Galore_(band))","(""The Honeymoon Killers"" | ""hasAlbum"" | ""Turn Me On"")
(""The Honeymoon Killers"" | ""associatedWith"" | ""Pussy Galore"")"
72,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina's nationality is Israeli, and she died on June 14, 1994 in Israel.","(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | deathPlace | Israel)
(Liselotte_Grschebina | nationality | Israel)","(""Liselotte Grschebina"" | ""nationality"" | ""Israeli""),
(""Liselotte Grschebina"" | ""deathDate"" | ""June 14, 1994""),
(""Liselotte Grschebina"" | ""deathPlace"" | ""Israel"")"
73,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina, a professional photographer, did her studies at the School of Applied Arts in Stuttgart.","(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)
(Liselotte_Grschebina | professionalField | Photographer)","(""Liselotte Grschebina"" | ""type"" | ""Professional Photographer"")
(""Liselotte Grschebina"" | ""didStudiesAt"" | ""School of Applied Arts in Stuttgart"")"
74,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala, a city, is a part of Morelos and one of the leaders is the City Manager. The population of the metropolitan area of Ciudad Ayala is 1,777,539 with population density of 1604.0.","(Ciudad_Ayala | populationMetro | 1777539)
(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | type | City)
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | isPartOf | Morelos)","(""Ciudad Ayala"" | ""type"" | ""city"")
(""Ciudad Ayala"" | ""part of"" | ""Morelos"")
(""Ciudad Ayala"" | ""leader"" | ""City Manager"")
(""Ciudad Ayala"" | ""population"" | 1,777,539)
(""Ciudad Ayala"" | ""population density"" | 1604.0)"
75,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Mason School of Business are the current tenants of Alan B Miller Hall, located at 101 Ukrop Way in the United States and owned by the College of William and Mary.","(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Mason_School_of_Business | country | United_States)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""Mason School of Business"" | ""tenant of"" | ""Alan B Miller Hall"")
(""Alan B Miller Hall"" | ""located at"" | ""101 Ukrop Way"")
(""Alan B Miller Hall"" | ""located in"" | ""United States"")
(""Alan B Miller Hall"" | ""owned by"" | ""College of William and Mary"")
(""101 Ukrop Way"" | ""located in"" | ""United States"")"
76,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","In the city of Detroit in the state of Michigan, the first and last Pontiac Rageous's produced were made on the assembly line in 1997.","(Pontiac_Rageous | productionStartYear | 1997)
(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | assembly | Detroit)
(Pontiac_Rageous | productionEndYear | 1997)
(Detroit | type | City_(Michigan))","(""Detroit"" | location | ""Michigan"")
(""Pontiac Rageous"" | productionLocation | ""Detroit"")
(""Pontiac Rageous"" | productionYear | 1997)"
77,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Adolfo Suarez Madrid-Barajas airport is operated by ENAIRE and is located in Alcobendas. Its runway name is 14L/32R, and its length is 3,500. ENAIRE is in the city of Madrid.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayName | ""14L/32R"")","(""Adolfo Suarez Madrid-Barajas airport"" | ""operated by"" | ""ENAIRE"")
(""Adolfo Suarez Madrid-Barajas airport"" | ""located in"" | ""Alcobendas"")
(""Adolfo Suarez Madrid-Barajas airport"" | ""has runway"" | ""14L/32R"")
(""14L/32R"" | ""length"" | ""3,500"")
(""ENAIRE"" | ""located in"" | ""Madrid"")"
78,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adolfo Suarez Madrid-Barajas Airport in Alcobendas, Spain, is operated by ENAIRE. The airport's runway length is 3500 and it has an elevation of 610 metres above sea level.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Alcobendas | country | Spain)","(""Adolfo Suarez Madrid-Barajas Airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""country"" | ""Spain"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""operated by"" | ""ENAIRE"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""runway length"" | 3500)
(""Adolfo Suarez Madrid-Barajas Airport"" | ""elevation"" | 610)"
79,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson’s nationality is English but currently resides in India, whose total area is 3,287,590 km^2. One of the leaders of India is Chief Justice.","(Lady_Anne_Monson | nationality | Kingdom_of_England)
(India | areaTotal | 3287590000000.0)
(Lady_Anne_Monson | residence | India)
(India | leaderTitle | Chief Justice)","(""Lady Anne Monson"" | ""nationality"" | ""English"")
(""Lady Anne Monson"" | ""residency"" | ""India"")
(""India"" | ""totalArea"" | ""3,287,590 km^2"")
(""India"" | ""leader"" | ""Chief Justice"")"
80,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bootleg Series Volume I: The Quine Tapes is an album released and produced by the Velvet Underground. It was recorded in the United States and runs 230:05 minutes long.,"(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | United_States)","(""Bootleg Series Volume I: The Quine Tapes"" | ""type"" | ""album"")
(""Bootleg Series Volume I: The Quine Tapes"" | ""releasedBy"" | ""Velvet Underground"")
(""Velvet Underground"" | ""produced"" | ""Bootleg Series Volume I: The Quine Tapes"")
(""Bootleg Series Volume I: The Quine Tapes"" | ""recordedIn"" | ""United States"")
(""Bootleg Series Volume I: The Quine Tapes"" | ""duration"" | ""230:05"")"
81,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Turn Me On by the Honeymoon Killers is a punk blues album in the noise rock genre. The run time is 35.1 minutes and was preceded by the Let it Breed album.,"(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | artist | The_Honeymoon_Killers_(American_band))
(Turn_Me_On_(album) | genre | Punk_blues)
(Turn_Me_On_(album) | producer | The_Honeymoon_Killers_(American_band))
(Turn_Me_On_(album) | genre | Noise_rock)
(Turn_Me_On_(album) | precededBy | Let_It_Breed)","(""Turn Me On"" | type | ""punk blues album"")
(""Turn Me On"" | genre | ""noise rock"")
(""Turn Me On"" | creator | ""Honeymoon Killers"")
(""Turn Me On"" | runtime | ""35.1 minutes"")
(""Turn Me On"" | preceded_by | ""Let it Breed"")
(""Let it Breed"" | type | ""album"")
(""Let it Breed"" | followed_by | ""Turn Me On"")"
82,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Akeem Ayers made his debut for the Tennessee Titans and currently plays for the Los Angeles Rams.,"(Akeem_Ayers | currentteam | ""Los Angeles Rams"")
(Akeem_Ayers | debutTeam | Tennessee_Titans)","(""Akeem Ayers"" | ""debutFor"" | ""Tennessee Titans""),
(""Akeem Ayers"" | ""currentTeam"" | ""Los Angeles Rams"")"
83,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers, edited by Stacy Katzman, is a 98 minute film starring Michael Rooker and Tom Sizemore.","(Super_Capers | editing | Stacy_Katzman)
(Super_Capers | starring | Michael_Rooker)
(Super_Capers | starring | Tom_Sizemore)
(Super_Capers | runtime | 98.0)","(""Super Capers"" | ""editor"" | ""Stacy Katzman""),
(""Super Capers"" | ""duration"" | 98),
(""Super Capers"" | ""starring"" | ""Michael Rooker""),
(""Super Capers"" | ""starring"" | ""Tom Sizemore"")"
84,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Thurleigh is located within the country of the United Kingdom.,(Thurleigh | country | United_Kingdom),(Thurleigh | location | United Kingdom)
85,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy is located in France, whose leader's title is the ""President of the Senate"".","(University_of_Burgundy | country | France)
(France | leaderTitle | ""President of the Senate"")","(University of Burgundy | location | France)
(France | leaderTitle | ""President of the Senate"")"
86,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Associated with the band Pussy Galore, the album Turn On Me is by US band The Honeymoon Killers.","(Turn_Me_On_(album) | artist | The_Honeymoon_Killers_(American_band))
(The_Honeymoon_Killers_(American_band) | associatedBand/associatedMusicalArtist | Pussy_Galore_(band))","(""Pussy Galore"" | associatedWith | ""The Honeymoon Killers"")
(""Turn On Me"" | creator | ""The Honeymoon Killers"")
(""Turn On Me"" | relatedTo | ""Pussy Galore"")"
87,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adolfo Suárez Madrid–Barajas Airport is located in Alcobendas, 610 meters above sea level. This airport is operated by ENAIRE, which is located in Madrid, Spain. The runway is named 18L/36R and is 4349 meters long.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 4349.0)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayName | ""18L/36R"")","(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""altitude"" | ""610 meters"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""operator"" | ""ENAIRE"")
(""ENAIRE"" | ""location"" | ""Madrid, Spain"")
(""runway 18L/36R"" | ""part of"" | ""Adolfo Suárez Madrid–Barajas Airport"")
(""runway 18L/36R"" | ""length"" | ""4349 meters"")"
88,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The film McVeagh of the South Seas (IMDb ID# 0004319) was directed by Cyril Bruce. Actor Harry Carey, born in 1878, stars in the movie.","(McVeagh_of_the_South_Seas | imdbId | 0004319)
(McVeagh_of_the_South_Seas | director | Cyril_Bruce)
(McVeagh_of_the_South_Seas | director | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878))","(""McVeagh of the South Seas"" | type | ""film"")
(""McVeagh of the South Seas"" | imdbID | ""0004319"")
(""McVeagh of the South Seas"" | directedBy | ""Cyril Bruce"")
(""Cyril Bruce"" | type | ""director"")
(""Harry Carey"" | type | ""actor"")
(""Harry Carey"" | birthYear | 1878)
(""Harry Carey"" | starsIn | ""McVeagh of the South Seas"")"
89,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Piotr Hallmann (born in Gdynia, Poland) on August 25,1987,weighs 70.308 kilograms.","(Piotr_Hallmann | birthDate | 1987-08-25)
(Piotr_Hallmann | birthPlace | Gdynia,_Poland)
(Piotr_Hallmann | weight | 70.308)","(Piotr Hallmann | birthPlace | Gdynia, Poland)
(Piotr Hallmann | birthDate | August 25, 1987)
(Piotr Hallmann | weight | 70.308 kilograms)"
90,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Mason School of Business is located in Virginia in the United States at 101 Ukrop Way. The building that the company is based in is called The Alan B. Miller Hall and it was constructed between the 30th of March, 2007 and the 1st of June, 2009 after being designed by Robert A.M. Stern.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | completionDate | 2009-06-01)
(Alan_B._Miller_Hall | location | Virginia)
(Mason_School_of_Business | country | United_States)","(""The Mason School of Business"" | ""location"" | ""Virginia, United States"")

(""The Mason School of Business"" | ""address"" | ""101 Ukrop Way"")

(""The Mason School of Business"" | ""is based in"" | ""The Alan B. Miller Hall"")

(""The Alan B. Miller Hall"" | ""underwent construction"" | ""30th of March, 2007 to 1st of June, 2009"")

(""The Alan B. Miller Hall"" | ""was designed by"" | ""Robert A.M. Stern"")"
91,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument was established in 2000, in the United States, and is located in Adams County, state of Pennsylvania which has Carroll County, Maryland to its southeast. The monument is placed in the municipality of Gettysburg in Pennsylvania and is categorized as a Contributing Property.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | state | ""Pennsylvania"")
(11th_Mississippi_Infantry_Monument | municipality | Gettysburg,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)
(11th_Mississippi_Infantry_Monument | country | ""United States"")","(""11th Mississippi Infantry Monument"" | ""date of establishment"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""United States"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Adams County"")
(""Adams County"" | ""is part of"" | ""Pennsylvania"")
(""Pennsylvania"" | ""has border with"" | ""Carroll County, Maryland"")
(""Carroll County, Maryland"" | ""location"" | ""southeast of Pennsylvania"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Gettysburg"")
(""Gettysburg"" | ""is part of"" | ""Pennsylvania"")
(""11th Mississippi Infantry Monument"" | ""categorization"" | ""Contributing Property"")"
92,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy was born in Reşadiye, which is in the Tokat Province.","(Nurhan_Atasoy | birthPlace | Reşadiye)
(Reşadiye | isPartOf | Tokat_Province)","(""Nurhan Atasoy"" | ""place of birth"" | ""Reşadiye"")
(""Reşadiye"" | ""is in"" | ""Tokat Province"")"
93,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Grigory Neujmin was born January 1, 1886 in Tbilisi. Grigory discovered 1147 Stavropolis, an asteroid with an orbital period of 1249.6 days, with a periapsis of at 260855000000.","(1147_Stavropolis | discoverer | Grigory_Neujmin)
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)
(Grigory_Neujmin | birthPlace | Tbilisi)
(Grigory_Neujmin | birthDate | 1886-01-01)","(""Grigory Neujmin"" | ""birthDate"" | ""1886-01-01"")
(""Grigory Neujmin"" | ""birthPlace"" | ""Tbilisi"")
(""Grigory Neujmin"" | ""discovered"" | ""1147 Stavropolis"")
(""1147 Stavropolis"" | ""type"" | ""asteroid"")
(""1147 Stavropolis"" | ""orbitalPeriod"" | ""1249.6 days"")
(""1147 Stavropolis"" | ""periapsis"" | ""260855000000"")"
94,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aaron Turner is a post-metal musician who plays electric guitar with the band Twilight.,"(Aaron_Turner | genre | Post-metal)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))
(Aaron_Turner | instrument | Electric_guitar)","(Aaron Turner | type | Post-metal musician)
(Aaron Turner | playsInstrument | Electric guitar)
(Aaron Turner | memberOf | Twilight)"
95,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The birthdate of Brandon Carter is January 1, 1942.",(Brandon_Carter | birthDate | 1942-01-01),"(Brandon Carter | birthdate | January 1, 1942)"
96,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Enaire operated Adolfo Suarez Madrid-Barajas Airport is based in Paracuellos de Jarama. It has a runway length of 3500 metres and is at an elevation of 610 metres above sea level.,"(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Paracuellos_de_Jarama)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)","(""Adolfo Suarez Madrid-Barajas Airport"" | ""operator"" | ""Enaire"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""location"" | ""Paracuellos de Jarama"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""runway length"" | ""3500 metres"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""elevation"" | ""610 metres"")"
97,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",New Hampshire native Alan Shepard died in California.,"(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | status | ""Deceased"")","(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | deathPlace | California)"
98,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","New Hampshire native Alan Shepard, born 11/18/1932, earned his M.A. in 1957 from NWC and won the Distinguished Service Medal from the US Navy.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | almaMater | ""NWC, M.A. 1957"")
(Alan_Shepard | award | Distinguished_Service_Medal_(United_States_Navy))","(Alan Shepard | type | New Hampshire native)
(Alan Shepard | birthDate | 11/18/1932)
(Alan Shepard | almaMater | NWC)
(Alan Shepard | award | Distinguished Service Medal)
(Alan Shepard | awardIssuer | US Navy)
(Alan Shepard | dateOfMasters | 1957) 
(NWC | type | educational institution)
(US Navy | type | military organization)
(Distinguished Service Medal | type | award)
(Distinguished Service Medal | awardGivenBy | US Navy)"
99,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Year of No Light, a sludge metal band, produced and released the album Nord.","(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light)","(Year of No Light | type | sludge metal band),
(Year of No Light | produced | Nord),
(Year of No Light | released | Nord),
(Nord | producer | Year of No Light),
(Nord | release-maker | Year of No Light)"
100,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Nord, created by the band Year of No Light, is in the sludge metal genre.","(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light)","(""Nord"" | ""creator"" | ""Year of No Light"")
(""Nord"" | ""type"" | ""album"")
(""Year of No Light"" | ""type"" | ""band"")
(""Nord"" | ""genre"" | ""sludge metal"")"
101,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","In the United States, where Abraham A, Ribicoff was born, African Americans are one of the ethnic groups. Abraham A. Ribicoff was married to Ruth Ribicoff.","(Abraham_A._Ribicoff | spouse | ""Ruth Ribicoff"")
(Abraham_A._Ribicoff | birthPlace | United_States)
(United_States | ethnicGroup | African_Americans)
(Abraham_A._Ribicoff | nationality | United_States)","(Abraham A. Ribicoff | birthPlace | United States)
(African Americans | ethnicGroupIn | United States)
(Abraham A. Ribicoff | ethnicGroup | African Americans)
(Abraham A. Ribicoff | spouse | Ruth Ribicoff)"
102,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The album Turn Me On was produced and created by the American band The Honeymoon Killers. It was preceded by the Let it Breed album and has a total runtime of 35 minutes 10 seconds.,"(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | artist | The_Honeymoon_Killers_(American_band))
(Turn_Me_On_(album) | producer | The_Honeymoon_Killers_(American_band))
(Turn_Me_On_(album) | precededBy | Let_It_Breed)","(""Turn Me On"" | ""producer"" | ""The Honeymoon Killers""),
(""Turn Me On"" | ""creator"" | ""The Honeymoon Killers""),
(""Turn Me On"" | ""country"" | ""America""),
(""Turn Me On"" | ""precededBy"" | ""Let it Breed""),
(""Turn Me On"" | ""runtime"" | ""35 minutes 10 seconds"")"
103,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson was born in Darlington but resided in India for most of her life. She was born on January 1, 1726 and died on February 18, 1776.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | deathDate | 1776-02-18)
(Lady_Anne_Monson | residence | India)","(Lady Anne Monson | place of birth | Darlington)
(Lady Anne Monson | place of residence | India)
(Lady Anne Monson | date of birth | January 1, 1726)
(Lady Anne Monson | date of death | February 18, 1776)"
104,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bootleg Series Volume 1: The Quine Tapes is a rock album by the Velvet Underground. The Velvet Underground also produced the album, which runs for 230:05 minutes.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | genre | Rock_music)","(""Bootleg Series Volume 1: The Quine Tapes"" | ""type"" | ""rock album"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""by"" | ""The Velvet Underground"")
(""The Velvet Underground"" | ""produced"" | ""Bootleg Series Volume 1: The Quine Tapes"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""runtime"" | ""230:05 minutes"")"
105,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Louis Levy is the music composer for the film ""It's Great to Be Young"", starring Cecil Parker.","(""It's_Great_to_Be_Young_(1956_film) | musicComposer | Louis_Levy)
(""It's_Great_to_Be_Young_(1956_film) | starring | Cecil_Parker"")","(Louis Levy | type | Music Composer)
(""It's Great to Be Young"" | type | Film)
(Louis Levy | music composer for | ""It's Great to Be Young"")
(Cecil Parker | type | Actor)
(""It's Great to Be Young"" | starring | Cecil Parker)"
106,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology campus is located in Bangalore, India at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | city | Bangalore)
(Acharya_Institute_of_Technology | country | ""India"")","(Acharya Institute of Technology | location | Bangalore)
(Acharya Institute of Technology | location | India)
(Acharya Institute of Technology | address | Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090)
(Bangalore | partOf | India)
(Soldevanahalli | partOf | Bangalore)
(Acharya Dr. Sarvapalli Radhakrishnan Road | partOf | Bangalore)
(Hessarghatta Main Road | partOf | Bangalore)"
107,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bedford Aerodrome serves the Bedford Autodrome and is operated by MotorSport Vision. Bedford Aerodrome is located 83.2104 meters above sea level and has a runway length of 1095.,"(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | runwayLength | 1095.0)
(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | elevationAboveTheSeaLevel | 83.2104)","(""Bedford Aerodrome"" | ""serves"" | ""Bedford Autodrome""),
(""Bedford Aerodrome"" | ""is operated by"" | ""MotorSport Vision""),
(""Bedford Aerodrome"" | ""is located"" | ""83.2104 meters above sea level""),
(""Bedford Aerodrome"" | ""has a runway length of"" | ""1095"")"
108,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Hypermarcas, which was founded on January 1, 2001, is an S.A. corporation.","(Hypermarcas | foundingDate | 2001-01-01)
(Hypermarcas | type | S.A._(corporation))","(Hypermarcas | type | S.A. corporation)
(Hypermarcas | foundingDate | literal: January 1, 2001)"
109,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Like the dessert Sandesh, Bionico is also a dessert which contains condensed milk and is from the Guadalajara region of Mexico. Mexico uses the peso as their currency and has Mexican people.","(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Bionico | region | Guadalajara)
(Dessert | dishVariation | Sandesh_(confectionery))
(Bionico | ingredient | Condensed_milk)
(Bionico | country | Mexico)","(""Bionico"" | ""type"" | ""dessert"")
(""Bionico"" | ""contains"" | ""condensed milk"")
(""Bionico"" | ""origin"" | ""Guadalajara region of Mexico"")
(""Sandesh"" | ""type"" | ""dessert"")
(""Guadalajara region of Mexico"" | ""partOf"" | ""Mexico"")
(""Mexico"" | ""usesCurrency"" | ""peso"")
(""Mexico"" | ""hasPopulation"" | ""Mexican people"")"
110,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The runway name of Al Asad Airbase is 08/26 operated by the United States Air Force.,"(Al_Asad_Airbase | operatingOrganisation | United_States_Air_Force)
(Al_Asad_Airbase | runwayName | ""08/26"")","(Al Asad Airbase | runway name | ""08/26"")
(Al Asad Airbase | operated by | United States Air Force)"
111,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Rageous began and ended its production in 1997 on an assembly line in Detroit, a city in Michigan.","(Pontiac_Rageous | productionStartYear | 1997)
(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | assembly | Detroit)
(Pontiac_Rageous | productionEndYear | 1997)
(Detroit | type | City_(Michigan))","(""Pontiac Rageous"" | ""beganProduction"" | ""1997"")
(""Pontiac Rageous"" | ""endedProduction"" | ""1997"")
(""Pontiac Rageous"" | ""locationOfProduction"" | ""Detroit"")
(""Detroit"" | ""isLocatedIn"" | ""Michigan"")"
112,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The timezone of Ciudad Ayala which is led by Juan Nolasco is the Pacific Standard Time Zone.,"(Ciudad_Ayala | timeZone | Pacific_Standard_Time_Zone)
(Ciudad_Ayala | leader | Juan_Nolasco)","(""Ciudad Ayala"" | ""leader"" | ""Juan Nolasco""),
(""Ciudad Ayala"" | ""timeZone"" | ""Pacific Standard Time Zone"")"
113,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Peter Ogden is the founder of MotorSport Vision.,(MotorSport_Vision | foundedBy | Peter_Ogden),"(""Peter Ogden"" | ""type"" | ""Person""),
(""Peter Ogden"" | ""occupation"" | ""founder""),
(""MotorSport Vision"" | ""type"" | ""Organization""),
(""Peter Ogden"" | ""founderOf"" | ""MotorSport Vision""),
(""MotorSport Vision"" | ""founder"" | ""Peter Ogden"")"
114,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The film Super Capers had a running time of 98 minutes.,(Super_Capers | runtime | 98.0),"(Super Capers | type | Film)
(Super Capers | running time | 98 minutes)"
115,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina did her studies at the School of Applied Arts in Stuttgart.,(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart),"(""Liselotte Grschebina"" | ""did"" | ""her studies"")
(""Liselotte Grschebina"" | ""at"" | ""the School of Applied Arts in Stuttgart"")
(""her studies"" | ""in"" | ""School of Applied Arts in Stuttgart"")"
116,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Tom Sizemore, married to Maeve Quinlan, stars in the film Super Capers along with Adam West.","(Super_Capers | starring | Tom_Sizemore)
(Tom_Sizemore | spouse | Maeve_Quinlan)
(Super_Capers | starring | Adam_West)","(Tom Sizemore | marriedTo | Maeve Quinlan)
(Tom Sizemore | starsIn | Super Capers)
(Adam West | starsIn | Super Capers)"
117,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers is a film distributed by Roadside Attractions and Lionsgate. Super Capers was written by Ray Griggs, starred Justin Whalin, and made $30955 at the box office.","(Super_Capers | distributor | Roadside_Attractions)
(Super_Capers | distributor | Lionsgate)
(Super_Capers | starring | Justin_Whalin)
(Super_Capers | writer | Ray_Griggs_(director))
(Super_Capers | gross | 30955.0)","(""Super Capers"" | ""type"" | ""Film"")
(""Super Capers"" | ""distributedBy"" | ""Roadside Attractions"")
(""Super Capers"" | ""distributedBy"" | ""Lionsgate"")
(""Super Capers"" | ""writtenBy"" | ""Ray Griggs"")
(""Super Capers"" | ""starring"" | ""Justin Whalin"")
(""Super Capers"" | ""grossed"" | ""$30955"")"
118,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Tom Simon is the director and producer of Death on a Factory Farm, which was released by HBO.","(Death_on_a_Factory_Farm | director | Tom_Simon)
(Death_on_a_Factory_Farm | producer | Tom_Simon)
(Death_on_a_Factory_Farm | broadcastedBy | HBO)","(""Tom Simon"" | ""type"" | ""Person""),
(""Tom Simon"" | ""profession"" | ""director""),
(""Tom Simon"" | ""profession"" | ""producer""),
(""Death on a Factory Farm"" | ""type"" | ""Film""),
(""Death on a Factory Farm"" | ""director"" | ""Tom Simon""),
(""Death on a Factory Farm"" | ""producer"" | ""Tom Simon""),
(""Death on a Factory Farm"" | ""distributor"" | ""HBO""),
(""HBO"" | ""type"" | ""Organization""),
(""HBO"" | ""distributes"" | ""Death on a Factory Farm"")"
119,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The asteroid 1147 Stavropolis has a rotation period of 20378.5 with a periapsis of 260855000000. It reaches its epoch on 31 July 2016 (Julian Day 2457600.5).,"(1147_Stavropolis | rotationPeriod | 20378.5)
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))","(1147 Stavropolis | hasRotationPeriod | 20378.5)
(1147 Stavropolis | hasPeriapsis | 260855000000)
(1147 Stavropolis | reachesEpochOn | ""31 July 2016"")
(1147 Stavropolis | hasJulianDay | 2457600.5)"
120,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson was born in Darlington, England (population 106,000). She currently resides in the Republic of India.","(Lady_Anne_Monson | birthPlace | Darlington)
(India | longName | ""Republic of India"")
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Darlington | populationTotal | 106000)
(Lady_Anne_Monson | residence | India)","(""Lady Anne Monson"" | birthPlace | ""Darlington, England"")
(""Darlington, England"" | population | ""106,000"")
(""Lady Anne Monson"" | residence | ""Republic of India"")"
121,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The music production team Stargate has worked with such artists as Benny Blanco.,(Stargate_(production_team) | associatedBand/associatedMusicalArtist | Benny_Blanco),"(""Stargate"" | ""type"" | ""Music Production Team""),
(""Stargate"" | ""workedWith"" | ""Benny Blanco"")"
122,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The birth year of Cecil Parker is 1897.,(Cecil_Parker | birthYear | 1897),(Cecil Parker | birth year | 1897)
123,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nord, the album produced by Year of No Light preceded the Live at Roadburn 2008, which was produced by Roadburn Festival.","(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Live_at_Roadburn_2008_(Year_of_No_Light_album) | producer | Roadburn_Festival)
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)","(""Nord"" | ""producer"" | ""Year of No Light"")
(""Nord"" | ""precededBy"" | ""Live at Roadburn 2008"")
(""Live at Roadburn 2008"" | ""producer"" | ""Roadburn Festival"")"
124,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The length of the ALCO RS-3 is 17068.8 millimetres. It has a diesel-electric transmission and a V12 engine.,"(ALCO_RS-3 | engine | V12_engine)
(ALCO_RS-3 | powerType | Diesel-electric_transmission)
(ALCO_RS-3 | length | 17068.8 (millimetres))","(ALCO RS-3 | length | 17068.8 millimetres)
(ALCO RS-3 | hasTransmission | diesel-electric)
(ALCO RS-3 | hasEngine | V12)"
125,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The number of students in the University of Burgundy is 27400,16800 are undergraduate students,9400 postgraduate students,1299 doctoral students and 2900 staff members employed.The campus University is located in the city of Dijon.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfStudents | 27400)
(University_of_Burgundy | numberOfDoctoralStudents | 1299)
(University_of_Burgundy | campus | Dijon)
(University_of_Burgundy | city | Dijon)
(University_of_Burgundy | numberOfPostgraduateStudents | 9400)","('University of Burgundy' | 'numberOfStudents' | '27400')
('University of Burgundy' | 'numberUndergraduateStudents' | '16800')
('University of Burgundy' | 'numberPostgraduateStudents' | '9400')
('University of Burgundy' | 'numberDoctoralStudents' | '1299')
('University of Burgundy' | 'numberOfEmployees' | '2900')
('University of Burgundy' | 'locatedIn' | 'Dijon')"
126,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bionico is the dessert found in Mexico which can be varied by using cottage cheese. Mexicans are inhabitants of Mexico and their currency is peso.,"(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Bionico | country | Mexico)
(Bionico | dishVariation | Cottage_cheese)","(""Bionico"" | ""isFoundIn"" | ""Mexico"")
(""Bionico"" | ""canBeVariedUsing"" | ""cottage cheese"")
(""Bionico"" | ""typeOf"" | ""dessert"")
(""Mexicans"" | ""areInhabitantsOf"" | ""Mexico"")
(""Mexicans"" | ""currency"" | ""peso"")"
127,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng born in Zaoyang was part of Shenzhou 10 mission.,"(Nie_Haisheng | birthPlace | Zaoyang)
(Nie_Haisheng | mission | Shenzhou_10)","(""Nie Haisheng"" | ""birthPlace"" | ""Zaoyang""),
(""Nie Haisheng"" | ""partOf"" | ""Shenzhou 10 mission"")"
128,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was an American who was born on November 18th, 1923 in New Hampshire, was a crew member of Apollo 14, retired on August 1, 1974 and died in California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | dateOfRetirement | ""1974-08-01"")
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | mission | Apollo_14)","(Alan Shepard | type | American)
(Alan Shepard | birthDate | November 18th, 1923)
(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | crewMemberOf | Apollo 14)
(Alan Shepard | retirementDate | August 1, 1974)
(Alan Shepard | deathPlace | California)"
129,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Danielle Harris had a main role in Super Capers, a 98 minute long movie.","(Super_Capers | starring | Danielle_Harris)
(Super_Capers | runtime | 98.0)","(Danielle Harris | hadRoleIn | Super Capers)
(Danielle Harris | hadMainRoleIn | Super Capers)
(Super Capers | lengthInMinutes | 98)
(Super Capers | feature | Danielle Harris)"
130,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",9400 postgraduate students attend the University of Burgundy located in Dijon.,"(University_of_Burgundy | campus | Dijon)
(University_of_Burgundy | city | Dijon)
(University_of_Burgundy | numberOfPostgraduateStudents | 9400)","(""University of Burgundy"" | ""location"" | ""Dijon"")
(""University of Burgundy"" | ""hasStudent"" | ""postgraduate students"")
(""postgraduate students"" | ""quantity"" | 9400)"
131,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson was born in Darlington, in the Kingdom of England, a town that boasted a population of 106,000. Monson relocated to the Republic of India, more commonly referred to as India, and resided there for most of her life.","(Lady_Anne_Monson | birthPlace | Darlington)
(India | longName | ""Republic of India"")
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Darlington | populationTotal | 106000)
(Lady_Anne_Monson | residence | India)","(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington"")
(""Darlington"" | ""isLocatedIn"" | ""Kingdom of England"")
(""Darlington"" | ""population"" | ""106,000"")
(""Lady Anne Monson"" | ""movedTo"" | ""Republic of India"")
(""Republic of India"" | ""commonName"" | ""India"")
(""Lady Anne Monson"" | ""residedIn"" | ""India"")"
132,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Adolfo Suarez Madrid-Barajas Airport is operated by ENAIRE and has an elevation of 610.0 metres above sea level. It is in San Sebastián de los Reyes.,"(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | San_Sebastián_de_los_Reyes)","(""Adolfo Suarez Madrid-Barajas Airport"" | ""operator"" | ""ENAIRE"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""elevation"" | ""610.0 metres"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""location"" | ""San Sebastián de los Reyes"")"
133,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1634: The Bavarian Crisis, written by Virginia DeMarce and Eric Flint, has 448 pages.","(1634:_The_Bavarian_Crisis | numberOfPages | ""448"")
(1634:_The_Bavarian_Crisis | author | ""Virginia DeMarce and Eric Flint"")","(""1634: The Bavarian Crisis"" | author | ""Virginia DeMarce"")
(""1634: The Bavarian Crisis"" | author | ""Eric Flint"")
(""1634: The Bavarian Crisis"" | numberOfPages | 448)"
134,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala (Morelos, Mexico), of which City Manager is the highest title, is 1147m above the sea with population density of 1604. The city is located in the Pacific Daylight time zone.","(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | country | Mexico)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)
(Ciudad_Ayala | timeZone | Pacific_Daylight_Time)
(Ciudad_Ayala | populationDensity | 1604.0)","(""Ciudad Ayala"" | ""type"" | ""City"")
(""Ciudad Ayala"" | ""country"" | ""Mexico"")
(""Ciudad Ayala"" | ""state"" | ""Morelos"")
(""Ciudad Ayala"" | ""highestRankingTitle"" | ""City Manager"")
(""Ciudad Ayala"" | ""elevation"" | 1147)
(""Ciudad Ayala"" | ""populationDensity"" | 1604)
(""Ciudad Ayala"" | ""timeZone"" | ""Pacific Daylight Time Zone"")"
135,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ray Griggs wrote and directed the 98 minutes movie Super Capers. Michael Rooker played in the movie which had a budget of $2000000.,"(Super_Capers | starring | Michael_Rooker)
(Super_Capers | budget | 2000000.0)
(Super_Capers | writer | Ray_Griggs_(director))
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | runtime | 98.0)","(""Ray Griggs"" | ""wrote"" | ""Super Capers"")
(""Ray Griggs"" | ""directed"" | ""Super Capers"")
(""Super Capers"" | ""durationInMinutes"" | ""98"")
(""Michael Rooker"" | ""playedIn"" | ""Super Capers"")
(""Super Capers"" | ""budget"" | ""$2000000"")"
136,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bootleg Series Volume 1: The Quine Tapes is 230.05 minutes long.,(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05),"(""Bootleg Series Volume 1: The Quine Tapes"" | length | ""230.05 minutes"")"
137,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","English Without Tears is an 89 minute film released on July 28th, 1944. Harold French was the director and the editor was Alan Jaggs. Bernard Knowles did the cinematography while Nicholas Brodszky did the score.","(English_Without_Tears | runtime | 89.0)
(English_Without_Tears | musicComposer | Nicholas_Brodszky)
(English_Without_Tears | releaseDate | 1944-07-28)
(English_Without_Tears | director | Harold_French)
(English_Without_Tears | editing | Alan_Jaggs)
(English_Without_Tears | cinematography | Bernard_Knowles)","(""English Without Tears"" | release date | ""July 28th, 1944"")
(""English Without Tears"" | runtime | ""89 minutes"")
(""English Without Tears"" | director | ""Harold French"")
(""English Without Tears"" | editor | ""Alan Jaggs"")
(""English Without Tears"" | cinematographer | ""Bernard Knowles"")
(""English Without Tears"" | music composer | ""Nicholas Brodszky"")"
138,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The area code for Thurleigh is 01234.,(Thurleigh | areaCode | 01234),"(""Thurleigh"" | ""area code"" | ""01234"")"
139,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","McVeagh of the South Seas, a film produced by the Progressive Motion Picture Company, was distributed by Alliance Films Corporation.","(McVeagh_of_the_South_Seas | producer | The_Progressive_Motion_Picture_Company)
(McVeagh_of_the_South_Seas | distributor | Alliance_Films_Corporation)","(""McVeagh of the South Seas"" | ""productionCompany"" | ""Progressive Motion Picture Company"")
(""McVeagh of the South Seas"" | ""distributedBy"" | ""Alliance Films Corporation"")"
140,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala is a part of Morelos, which is located in the country of Mexico. Ciudad Ayala city has a population density of 1604.0, the time zone is in PDT and its elevation is 1147.0 above sea level. One of the leaders of Ciudad Ayala is the City Manager.","(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | country | Mexico)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)
(Ciudad_Ayala | timeZone | Pacific_Daylight_Time)
(Ciudad_Ayala | populationDensity | 1604.0)","(Ciudad Ayala | part of | Morelos)
(Morelos | located in | Mexico)
(Ciudad Ayala | hasPopulationDensity | 1604.0)
(Ciudad Ayala | timeZone | PDT)
(Ciudad Ayala | hasElevation | 1147.0)
(Ciudad Ayala | hasLeader | City Manager)"
141,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiação Sportiva Arapiraquense has 17000 members, played in the 2015 season and play in the Campeonato Brasileiro Série C league which Vila Nova Futebol Clube have been champions of.","(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | season | 2015)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)","(Agremiação Sportiva Arapiraquense | hasNumberOfMembers | 17000)
(Agremiação Sportiva Arapiraquense | participatedIn | 2015 season)
(Agremiação Sportiva Arapiraquense | league | Campeonato Brasileiro Série C)
(Vila Nova Futebol Clube | championsOf | Campeonato Brasileiro Série C)"
142,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Lady Anne Monson lives in India which under the rule of the Chief Justice.,"(Lady_Anne_Monson | residence | India)
(India | leaderTitle | Chief Justice)","(""Lady Anne Monson"" | ""livesIn"" | ""India"")
(""India"" | ""isUnder"" | ""The Chief Justice"")"
143,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The runtime of Expect a Miracle preceded by the Brian Kelly album Pools of Light and followed by Brian Kelly's Afterplay album, is 54.56.","(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | precededBy | Pools_of_Light_(Brian_Kelly_album))
(Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album))","(""Expect a Miracle"" | ""preceded_by"" | ""Pools of Light"")
(""Pools of Light"" | ""recorded_by"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""followed_by"" | ""Afterplay"")
(""Afterplay"" | ""recorded_by"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""runtime"" | 54.56)
(""Expect a Miracle"" | ""recorded_by"" | ""Brian Kelly"")"
144,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was born on May 2, 1908 in the German Empire.","(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | birthPlace | German_Empire)","(Liselotte Grschebina | birthDate | May 2, 1908)
(Liselotte Grschebina | birthPlace | German Empire)"
145,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The producer of the album Bootleg Series Volume 1: The Quine Tapes was the Velvet Underground that are in Rock music genre which was preceded by Squeeze by The Velvet Underground. The Bootleg Series Volume 1: The Quine Tapes was recorded under the Polydor Records record label and record label is Universal Music Group.,"(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | genre | Rock_music)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | precededBy | Squeeze_(The_Velvet_Underground_album))
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Polydor_Records)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Universal_Music_Group)","(""Bootleg Series Volume 1: The Quine Tapes"" | ""producer"" | ""Velvet Underground"")
(""Velvet Underground"" | ""genre"" | ""Rock music"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""precededBy"" | ""Squeeze"")
(""Squeeze"" | ""producer"" | ""Velvet Underground"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""recordLabel"" | ""Polydor Records"")
(""Polydor Records"" | ""parentCompany"" | ""Universal Music Group"")"
146,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Pennsylvania's Cumberland County is to the north of the Adams County, Pennsylvania, the home of the 11th Mississippi Infantry Monument.","(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsNorth | Cumberland_County,_Pennsylvania)","(""Cumberland County"" | ""isInState"" | ""Pennsylvania"")
(""Adams County"" | ""isInState"" | ""Pennsylvania"")
(""Cumberland County"" | ""isNorthOf"" | ""Adams County"")
(""11th Mississippi Infantry Monument"" | ""isIn"" | ""Adams County"")"
147,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ray Griggs wrote the $2000000 budgeted Super Capers which runs 98 minutes. The movie was directed by Ray Griggs and edited by Stacy Katzman.,"(Super_Capers | editing | Stacy_Katzman)
(Super_Capers | runtime | 98.0)
(Super_Capers | budget | 2000000.0)
(Super_Capers | writer | Ray_Griggs_(director))
(Super_Capers | director | Ray_Griggs_(director))","(""Ray Griggs"" | ""wrote"" | ""Super Capers"")
(""Ray Griggs"" | ""directed"" | ""Super Capers"")
(""Super Capers"" | ""edited by"" | ""Stacy Katzman"")
(""Super Capers"" | ""budget"" | ""$2000000"")
(""Super Capers"" | ""runTime"" | ""98 minutes"")"
148,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala is a city in which the government type is a council-manager government. One of the leaders of Ciudad Ayala is called the City Manager.,"(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | type | City)
(Ciudad_Ayala | governmentType | Council-manager_government)","(""Ciudad Ayala"" | ""type"" | ""City"")
(""Ciudad Ayala"" | ""governmentType"" | ""council-manager government"")
(""Ciudad Ayala"" | ""leaderTitle"" | ""City Manager"")"
149,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Bootleg Series Volume 1: The Quine Tapes fits into the Rock music genre, which includes the fusion genre of Noise rock.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | genre | Rock_music)
(Rock_music | musicFusionGenre | Noise_rock)","(""Bootleg Series Volume 1: The Quine Tapes"" | type | ""album"")

(""Bootleg Series Volume 1: The Quine Tapes"" | genre | ""Rock music"")

(""Rock music"" | includes | ""Noise rock"")

(""Bootleg Series Volume 1: The Quine Tapes"" | includes | ""Noise rock"")"
150,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The University of Cambridge is based in the United Kingdom.,(University_of_Cambridge | country | United_Kingdom),"(""University of Cambridge"" | ""is based in"" | ""United Kingdom"")"
151,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 230.05 minutes long the Bootleg Series Volume 1: The Quine Tapes was released on October, 16, 2001 by the Universal Music Group.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Universal_Music_Group)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | releaseDate | 2001-10-16)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05)","(""The Bootleg Series Volume 1: The Quine Tapes"" | ""duration"" | ""230.05 minutes"")
(""The Bootleg Series Volume 1: The Quine Tapes"" | ""releasedOn"" | ""October, 16, 2001"")
(""The Bootleg Series Volume 1: The Quine Tapes"" | ""distributor"" | ""Universal Music Group"")"
152,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",1147 Stavropolis discovered by Grigory Neujmin on the 11th of June 1929 with absolute magnitude of 11.5 has an orbital period of 1249.6 days. The apoapsis of 1147 Stavropolis is 418476000000.0.,"(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | discoverer | Grigory_Neujmin)
(1147_Stavropolis | absoluteMagnitude | 11.5)
(1147_Stavropolis | discovered | 1929-06-11)","(""1147 Stavropolis"" | ""discoveredBy"" | ""Grigory Neujmin"")
(""1147 Stavropolis"" | ""discoveryDate"" | ""11th of June 1929"")
(""1147 Stavropolis"" | ""absoluteMagnitude"" | 11.5)
(""1147 Stavropolis"" | ""orbitalPeriod"" | 1249.6)
(""1147 Stavropolis"" | ""apoapsis"" | 418476000000.0)"
153,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Brandon Carter, who is known for the Carter constant and the No-hair theorem, was born in England on 01-01-1942 and graduated from the University of Cambridge.","(Brandon_Carter | knownFor | Carter_constant)
(Brandon_Carter | knownFor | No-hair_theorem)
(Brandon_Carter | birthPlace | England)
(Brandon_Carter | birthDate | 1942-01-01)
(Brandon_Carter | almaMater | University_of_Cambridge)","(""Brandon Carter"" | ""knownFor"" | ""Carter constant"")
(""Brandon Carter"" | ""knownFor"" | ""No-hair theorem"")
(""Brandon Carter"" | ""birthPlace"" | ""England"")
(""Brandon Carter"" | ""birthDate"" | ""01-01-1942"")
(""Brandon Carter"" | ""almaMater"" | ""University of Cambridge"")"
154,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy is located in the city of Dijon, France.","(Dijon | country | France)
(University_of_Burgundy | city | Dijon)","(University of Burgundy | location | Dijon)
(Dijon | is in | France)"
155,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The post-metal musical sound, such as featured in the album Nord, is eclectic and may include instruments such as the cello as a performance instrument.","(Nord_(Year_of_No_Light_album) | genre | Post-metal)
(Post-metal | instrument | Cello)","(""post-metal musical sound"" | ""type of"" | ""music"")
(""post-metal musical sound"" | ""feature in"" | ""Nord"")
(""Nord"" | ""type of"" | ""album"")
(""post-metal musical sound"" | ""characteristic"" | ""eclectic"")
(""post-metal musical sound"" | ""may include"" | ""cello"")
(""cello"" | ""type of"" | ""instrument"")
(""cello"" | ""used for"" | ""performance"")"
156,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Post metal album The Year of No Light (runtime 58:41) was released by Nord on September sixth two thousand six under the record label Crucial Blast.,"(Nord_(Year_of_No_Light_album) | genre | Post-metal)
(Nord_(Year_of_No_Light_album) | recordLabel | Crucial_Blast)
(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | runtime | 58.41)","(The Year of No Light | type | Post metal album)
(The Year of No Light | runtime | 58:41)
(The Year of No Light | released by | Nord)
(The Year of No Light | release date | September sixth two thousand six)
(The Year of No Light | record label | Crucial Blast)
(Nord | released | The Year of No Light)
(Crucial Blast | has album | The Year of No Light)"
157,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Agremiacao Sportiva Arapiraquense's ground is the Estadio Municipal Coaracy da Mata Fonseca located in Arapiraca. The club has 17000 members and plays in the Campeonato Brasileiro Série C league in 2015 based in Brazil and Vila Nova Futebol Clube are the champions.,"(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | season | 2015)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Campeonato_Brasileiro_Série_C | country | Brazil)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(""Agremiacao Sportiva Arapiraquense"" | ""ground"" | ""Estadio Municipal Coaracy da Mata Fonseca"")
(""Estadio Municipal Coaracy da Mata Fonseca"" | ""location"" | ""Arapiraca"")
(""Agremiacao Sportiva Arapiraquense"" | ""numberOfMembers"" | 17000)
(""Agremiacao Sportiva Arapiraquense"" | ""playsIn"" | ""Campeonato Brasileiro Série C"")
(""Campeonato Brasileiro Série C"" | ""year"" | 2015)
(""Campeonato Brasileiro Série C"" | ""location"" | ""Brazil"")
(""Vila Nova Futebol Clube"" | ""areChampionsOf"" | ""Campeonato Brasileiro Série C"")"
158,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Adolfo Suárez Madrid–Barajas Airport in Alcobendas (operated by ENAIRE in Madrid), located 610.0 metres above sea level, has a runway named 18R/36L which is 4,349 metres in length.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 4349.0)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayName | ""18R/36L"")","(""The Adolfo Suárez Madrid–Barajas Airport"" | ""locatedIn"" | ""Alcobendas"")
(""The Adolfo Suárez Madrid–Barajas Airport"" | ""operatedBy"" | ""ENAIRE"")
(""The Adolfo Suárez Madrid–Barajas Airport"" | ""locationCity"" | ""Madrid"")
(""The Adolfo Suárez Madrid–Barajas Airport"" | ""altitude"" | ""610.0 metres"")
(""The Adolfo Suárez Madrid–Barajas Airport"" | ""hasRunway"" | ""18R/36L"")
(""18R/36L"" | ""locatedIn"" | ""The Adolfo Suárez Madrid–Barajas Airport"")
(""18R/36L"" | ""length"" | ""4,349 metres"")"
159,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson, a botanist, was born on January 1, 1726 in the Kingdom of England. Though she held British nationality, she resided in India for most of her life. She married George Monson.","(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | nationality | Kingdom_of_England)
(Lady_Anne_Monson | residence | India)
(Lady_Anne_Monson | spouse | George_Monson)
(Lady_Anne_Monson | professionalField | Botany)","(""Lady Anne Monson"" | ""type"" | ""botanist""),
(""Lady Anne Monson"" | ""birthDate"" | ""January 1, 1726""),
(""Lady Anne Monson"" | ""birthPlace"" | ""Kingdom of England""),
(""Lady Anne Monson"" | ""nationality"" | ""British""),
(""Lady Anne Monson"" | ""residence"" | ""India""),
(""Lady Anne Monson"" | ""spouse"" | ""George Monson"")"
160,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The title for the leader of Istanbul is Mayor.,(Istanbul | leaderTitle | Mayor),"(""Istanbul"" | ""title"" | ""Mayor"")"
161,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Adolfo Suárez Madrid Barajas Airport is found in Alcobendas and operated by ENAIRE which is located in Madrid. The airport has a runway length of 3500.0.,"(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)","(""Adolfo Suárez Madrid Barajas Airport"" | ""isFoundIn"" | ""Alcobendas"")
(""Adolfo Suárez Madrid Barajas Airport"" | ""operatedBy"" | ""ENAIRE"")
(""ENAIRE"" | ""locatedIn"" | ""Madrid"")
(""Adolfo Suárez Madrid Barajas Airport"" | ""hasRunwayLength"" | ""3500.0"")"
162,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Hypermarcas is located in Sao Paulo and sells healthcare products. Hypermarcas earns yearly 1800000000 and has a subsidiary called Mantecorp.,"(Hypermarcas | subsidiary | Mantecorp)
(Hypermarcas | product | Healthcare)
(Hypermarcas | location | São_Paulo)
(Hypermarcas | revenue | 1800000000)","(""Hypermarcas"" | ""location"" | ""Sao Paulo""),
(""Hypermarcas"" | ""sells"" | ""healthcare products""),
(""Hypermarcas"" | ""yearly earnings"" | 1800000000),
(""Hypermarcas"" | ""hasSubsidiary"" | ""Mantecorp"")"
163,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",One ethnic group in the United States is Asian-American.,(United_States | ethnicGroup | Asian_American),"(""Asian-American"" | ""isEthnicGroupIn"" | ""United States"")"
164,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Expect a Miracle is an instrumental music album that runs 54:56 minutes. It is followed by the album Afterplay.,"(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | genre | Instrumental_music)
(Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album))","(""Expect a Miracle"" | type | ""instrumental music album"")
(""Expect a Miracle"" | runtime | ""54:56 minutes"")
(""Expect a Miracle"" | followed by | ""Afterplay"")"
165,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Roadside Attractions, founded in 2003, and Lionsgate distributed the English-language (ISO 639-2 code eng) film Super Capers.","(Super_Capers | distributor | Roadside_Attractions)
(Roadside_Attractions | foundingYear | 2003-01-01)
(Super_Capers | distributor | Lionsgate)
(Super_Capers | language | English_language)
(English_language | iso6392Code | eng)","(""Roadside Attractions"" | ""foundingYear"" | 2003)
(""Super Capers"" | ""distributedBy"" | ""Roadside Attractions"")
(""Super Capers"" | ""distributedBy"" | ""Lionsgate"")
(""Super Capers"" | ""language"" | ""English"")
(""English"" | ""iso639-2Code"" | ""eng"")"
166,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The epoch of 1147 Stavropolis is 31 July 2016 (JD2457600.5). Its periapsis is 260855000000.0 and the apoapsis of the asteroid is 418476000000.0 A.U.,"(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))","(""1147 Stavropolis"" | ""epoch"" | ""31 July 2016 (JD2457600.5)"")
(""1147 Stavropolis"" | ""periapsis"" | 260855000000.0)
(""1147 Stavropolis"" | ""apoapsis"" | 418476000000.0)"
167,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiação Sportiva Arapiraquense, who have 17000 members, are a team that play in the Campeonato Brasileiro Série C league in Brazil. The team’s home ground, which is in Arapiraca, is called Estádio Municipal Coaracy da Mata Fonseca. The team’s nickname is ""Alvinegro"". The Vila Nova Futebol Clube have previously been champions at the Campeonato Brasileiro Série C.","(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Campeonato_Brasileiro_Série_C | country | Brazil)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | nickname | ""\'\'Alvinegro"")
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(""Agremiação Sportiva Arapiraquense"" | ""memberCount"" | 17000)
(""Agremiação Sportiva Arapiraquense"" | ""type"" | ""team"")
(""Agremiação Sportiva Arapiraquense"" | ""participatesIn"" | ""Campeonato Brasileiro Série C"")
(""Agremiação Sportiva Arapiraquense"" | ""locatedIn"" | ""Brazil"")
(""Agremiação Sportiva Arapiraquense"" | ""homeGround"" | ""Estádio Municipal Coaracy da Mata Fonseca"")
(""Estádio Municipal Coaracy da Mata Fonseca"" | ""locatedIn"" | ""Arapiraca"")
(""Agremiação Sportiva Arapiraquense"" | ""nickName"" | ""Alvinegro"")
(""Vila Nova Futebol Clube"" | ""previousChampion"" | ""Campeonato Brasileiro Série C"")"
168,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The creator of Bananaman, broadcasted by the BBC, is John Geering.","(Bananaman | creator | John_Geering)
(Bananaman | broadcastedBy | BBC)","(""Bananaman"" | ""creator"" | ""John Geering"")
(""Bananaman"" | ""broadcaster"" | ""BBC"")
(""John Geering"" | ""created"" | ""Bananaman"")"
169,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","English Without Tears, released 7-28-1944, was directed by Harold French. Alan Jaggs edited the film.","(English_Without_Tears | releaseDate | 1944-07-28)
(English_Without_Tears | director | Harold_French)
(English_Without_Tears | editing | Alan_Jaggs)","(""English Without Tears"" | ""release date"" | ""7-28-1944""),
(""English Without Tears"" | ""director"" | ""Harold French""),
(""English Without Tears"" | ""editor"" | ""Alan Jaggs"")"
170,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aleksandr Prudnikov currently plays for FC Amkar Perm and is 185 cm tall, he previously played for FC Spartak Moscow's youth team.","(Aleksandr_Prudnikov | club | FC_Amkar_Perm)
(Aleksandr_Prudnikov | height | 185.0 (centimetres))
(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(Aleksandr_Prudnikov | currentclub | FC_Amkar_Perm)","(Aleksandr Prudnikov | currently plays for | FC Amkar Perm)
(Aleksandr Prudnikov | height | ""185 cm"")
(Aleksandr Prudnikov | previously played for | FC Spartak Moscow's youth team)"
171,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bananaman, created by Steve Bright, stars Graeme Garden and was a TV series which was shown on the BBC.","(Bananaman | creator | Steve_Bright)
(Bananaman | broadcastedBy | BBC)
(Bananaman | starring | Graeme_Garden)","(""Bananaman"" | ""creator"" | ""Steve Bright"")
(""Bananaman"" | ""stars"" | ""Graeme Garden"")
(""Bananaman"" | ""type"" | ""TV series"")
(""Bananaman"" | ""broadcastedBy"" | ""BBC"")"
172,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",MotorSport Vision operates the Bedford Aerodrome where the runway length is 1095. The Bedford Aerodrome serves the nearby Bedford Autodrome.,"(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | runwayLength | 1095.0)
(Bedford_Aerodrome | cityServed | Bedford_Autodrome)","(""MotorSport Vision"" | ""operates"" | ""Bedford Aerodrome"")
(""Bedford Aerodrome"" | ""hasRunwayLength"" | ""1095"")
(""Bedford Aerodrome"" | ""serves"" | ""Bedford Autodrome"")"
173,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina is an Israeli who was born on May 2nd, 1908 in Karlsruhe, attended the school of Applied Arts in Stuttgart and died on June 14, 1994 in Israel.","(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | deathPlace | Israel)
(Liselotte_Grschebina | nationality | Israel)
(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)","(""Liselotte Grschebina"" | ""birthPlace"" | ""Karlsruhe"")
(""Liselotte Grschebina"" | ""birthDate"" | ""May 2nd, 1908"")
(""Liselotte Grschebina"" | ""nationality"" | ""Israeli"")
(""Liselotte Grschebina"" | ""deathDate"" | ""June 14, 1994"")
(""Liselotte Grschebina"" | ""deathPlace"" | ""Israel"")
(""Liselotte Grschebina"" | ""almaMater"" | ""School of Applied Arts in Stuttgart"")"
174,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Morelos UTC offset is minus six.,(Morelos | utcOffset | −6),"(""Morelos"" | ""utcOffset"" | ""-6"")"
175,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","In 1956 Gilbert Taylor and Louis Levy were both involved in the making of the film It's Great to be Young, which cost £282,838.","(""It's_Great_to_Be_Young_(1956_film) | gross | 282838.0)
(""It's_Great_to_Be_Young_(1956_film) | musicComposer | Louis_Levy)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor"")","(Gilbert Taylor | involved in | It's Great to be Young)
(Louis Levy | involved in | It's Great to be Young)
(Gilbert Taylor | year of involvement | 1956)
(Louis Levy | year of involvement | 1956)
(It's Great to be Young | year of production | 1956)
(It's Great to be Young | cost | £282,838)"
176,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aleksandr Prudnikov played for the youth side of the team FC Spartak, Moscow, whose home ground is Otkrytiye Arena. Now he plays for FC Amkar Perm.","(Aleksandr_Prudnikov | club | FC_Amkar_Perm)
(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(Aleksandr_Prudnikov | currentclub | FC_Amkar_Perm)
(FC_Spartak_Moscow | ground | Otkrytiye_Arena)","(Aleksandr Prudnikov | played for | youth side of FC Spartak)

(FC Spartak | isLocatedIn | Moscow)

(FC Spartak | hasHomeGround | Otkrytiye Arena)

(Aleksandr Prudnikov | plays for | FC Amkar Perm)"
177,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala, a city, has a UTC offset of -6 and the population density is 1604.","(Ciudad_Ayala | type | City)
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | utcOffset | −6)","(Ciudad Ayala | type | city)
(Ciudad Ayala | UTC offset | -6)
(Ciudad Ayala | population density | 1604)"
178,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, who was born Olga Nikolaevna Bondareva on April 27, 1837 in Leningrad, USSR, died on December 9, 1991. She was a graduate of Leningrad State University who was known for the Bondareva-Shapley theorem.","(Olga_Bondareva | birthPlace | Leningrad,_USSR)
(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | deathDate | 1991-12-09)","(""Olga Bondareva"" | ""birthName"" | ""Olga Nikolaevna Bondareva"")
(""Olga Bondareva"" | ""birthDate"" | ""April 27, 1837"")
(""Olga Bondareva"" | ""birthPlace"" | ""Leningrad, USSR"")
(""Olga Bondareva"" | ""deathDate"" | ""December 9, 1991"")
(""Olga Bondareva"" | ""almaMater"" | ""Leningrad State University"")
(""Olga Bondareva"" | ""knownFor"" | ""Bondareva-Shapley theorem"")"
179,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bananaman premiered on October 3rd 1983 on the ""STV"" network.","(Bananaman | broadcastedBy | ""STV"")
(Bananaman | firstAired | ""1983-10-03"")","(""Bananaman"" | ""premieredOn"" | ""October 3rd 1983"")
(""Bananaman"" | ""appearedOn"" | ""STV network"")"
180,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology is located in Bangalore, India at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | city | Bangalore)
(Acharya_Institute_of_Technology | country | ""India"")","(Acharya Institute of Technology | location | Bangalore, India)
(Acharya Institute of Technology | address | Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090)
(Acharya Institute of Technology | located at | Soldevanahalli)
(Acharya Institute of Technology | located on | Acharya Dr. Sarvapalli Radhakrishnan Road)
(Acharya Institute of Technology | located on | Hessarghatta Main Road)
(Acharya Institute of Technology | postal code | 560090)"
181,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Operated by the Madrid based ENAIRE, Adolfo Suárez Madrid–Barajas Airport is located in Alcobendas and has an elevation of 610 metres above sea level.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)","(""Adolfo Suárez Madrid–Barajas Airport"" | ""is operated by"" | ""ENAIRE"")
(""ENAIRE"" | ""is located in"" | ""Madrid"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""is located in"" | ""Alcobendas"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""has elevation"" | ""610 metres"")"
182,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Fellowship of the Ring belongs to the fantasy genre. Its author is J.R.R. Tolkien, and George Allen & Unwin published it. It was followed by The Two Towers and The Hobbit came before it.","(The_Fellowship_of_the_Ring | publisher | George_Allen_&_Unwin)
(The_Fellowship_of_the_Ring | literaryGenre | Fantasy_(genre))
(The_Fellowship_of_the_Ring | followedBy | The_Two_Towers)
(The_Fellowship_of_the_Ring | author | J._R._R._Tolkien)
(The_Fellowship_of_the_Ring | precededBy | The_Hobbit)","(""The Fellowship of the Ring"" | ""type"" | ""Fantasy genre""),
(""The Fellowship of the Ring"" | ""author"" | ""J.R.R. Tolkien""),
(""The Fellowship of the Ring"" | ""is published by"" | ""George Allen & Unwin""),
(""The Fellowship of the Ring"" | ""followed by"" | ""The Two Towers""),
(""The Hobbit"" | ""preceded"" | ""The Fellowship of the Ring"")"
183,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aleksandr Prudnikov is in the FC Terek Grozny club and also a member of the youth side of FC Spartak Moscow.,"(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(Aleksandr_Prudnikov | club | FC_Terek_Grozny)","(Aleksandr Prudnikov | member of | FC Terek Grozny)
(Aleksandr Prudnikov | member of | youth side of FC Spartak Moscow)"
184,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The location of Bedford Aerodrome is Thurleigh whose area code is 01234.,"(Bedford_Aerodrome | location | Thurleigh)
(Thurleigh | areaCode | 01234)","(""Bedford Aerodrome"" | ""location"" | ""Thurleigh"")
(""Thurleigh"" | ""hasAreaCode"" | ""01234"")"
185,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1147 Stavropolis' epoch was July 31, 2016, and has a rotation period of 20378.5 and a periapsis of 260855000000.0.","(1147_Stavropolis | rotationPeriod | 20378.5)
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))","(""1147 Stavropolis"" | ""epoch"" | ""July 31, 2016"")
(""1147 Stavropolis"" | ""rotation period"" | 20378.5)
(""1147 Stavropolis"" | ""periapsis"" | 260855000000.0)"
186,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The headquarters of HBO are in New York City, New York.","(HBO | headquarter | New_York_City,_New_York)","(""HBO"" | ""location of headquarters"" | ""New York City, New York"")"
187,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adams County, Pennsylvania has Carroll County, Maryland to its southeast and contains the 11th Mississippi Infantry Monument which was established in 2000. The 11th Mississippi Infantry Monument is categorized as a Contributing Property.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | state | ""Pennsylvania"")
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""Adams County, Pennsylvania"" | ""locationAdjacent"" | ""Carroll County, Maryland"")
(""Adams County, Pennsylvania"" | ""contains"" | ""11th Mississippi Infantry Monument"")
(""11th Mississippi Infantry Monument"" | ""locationWithin"" | ""Adams County, Pennsylvania"")
(""11th Mississippi Infantry Monument"" | ""establishedIn"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""isCategorizedAs"" | ""Contributing Property"")"
188,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The builder of the 12 cylinder ALCO RS-3 is the American Locomotive Company.,"(ALCO_RS-3 | builder | American_Locomotive_Company)
(ALCO_RS-3 | cylinderCount | 12)","(""12 cylinder ALCO RS-3"" | ""builder"" | ""American Locomotive Company"")"
189,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lionsgate, located in the U.S., served as distributor for Super Capers, a movie in English starring Michael Rooker.","(Super_Capers | distributor | Lionsgate)
(Lionsgate | location | United_States)
(Super_Capers | starring | Michael_Rooker)
(Super_Capers | language | English_language)","(""Lionsgate"" | ""location"" | ""U.S."")
(""Lionsgate"" | ""distributorOf"" | ""Super Capers"")
(""Super Capers"" | ""language"" | ""English"")
(""Super Capers"" | ""starring"" | ""Michael Rooker"")"
190,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala (located in the country of Mexico) is a city and part of Morelos. Its elevation above the sea level is 1147.0. It falls into UTC offset -6 time zone and its leader is called Governator.,"(Ciudad_Ayala | type | City)
(Ciudad_Ayala | utcOffset | −6)
(Ciudad_Ayala | leaderTitle | Governator)
(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | country | Mexico)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)","(""Ciudad Ayala"" | ""type"" | ""City""),
(""Ciudad Ayala"" | ""partOf"" | ""Morelos""),
(""Ciudad Ayala"" | ""locationCountry"" | ""Mexico""),
(""Ciudad Ayala"" | ""elevationAboveSeaLevel"" | ""1147.0""),
(""Ciudad Ayala"" | ""timeZone"" | ""UTC offset -6""),
(""Ciudad Ayala"" | ""leaderTitle"" | ""Governator"")"
191,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brandon Carter was born in England and graduated from the University of Cambridge.,"(Brandon_Carter | birthPlace | England)
(Brandon_Carter | almaMater | University_of_Cambridge)","(""Brandon Carter"" | ""place of birth"" | ""England"")
(""Brandon Carter"" | ""graduated from"" | ""University of Cambridge"")"
192,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The American band the Honeymoon Killers drew some musicians from an associated musical group named Pussy Galore.,(The_Honeymoon_Killers_(American_band) | associatedBand/associatedMusicalArtist | Pussy_Galore_(band)),"(""the Honeymoon Killers"" | ""nationality"" | ""American"")
(""the Honeymoon Killers"" | ""type"" | ""Band"")
(""the Honeymoon Killers"" | ""hasRelatedBand"" | ""Pussy Galore"")
(""the Honeymoon Killers"" | ""hasMember"" | ""musicians"")
(""Pussy Galore"" | ""type"" | ""musical group"")
(""musicians"" | ""memberOf"" | ""Pussy Galore"")"
193,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument is located in the United States, falls under the category of Contributing property, is in the municipality of Gettysburg, Pennsylvania, and was established in the year 2000. 11th Mississippi Infantry Monument's location is Adams County, Pennsylvania, and to the southeast of Adams County, Pennsylvania lies Carroll County, Maryland.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | state | ""Pennsylvania"")
(11th_Mississippi_Infantry_Monument | municipality | Gettysburg,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)
(11th_Mississippi_Infantry_Monument | country | ""United States"")","(""11th Mississippi Infantry Monument"" | ""location"" | ""United States"")
(""11th Mississippi Infantry Monument"" | ""type"" | ""Contributing property"")
(""11th Mississippi Infantry Monument"" | ""municipality"" | ""Gettysburg"")
(""11th Mississippi Infantry Monument"" | ""locatedInArea"" | ""Pennsylvania"")
(""11th Mississippi Infantry Monument"" | ""establishmentYear"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""locatedInArea"" | ""Adams County, Pennsylvania"")
(""Adams County, Pennsylvania"" | ""liesToTheSoutheastOf"" | ""Carroll County, Maryland"")"
194,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aaron Turner originated from the United states, singing in the post-metal genre for a living. Aaron Turner also played with the band Twilight.","(Aaron_Turner | genre | Post-metal)
(Aaron_Turner | instrument | Singing)
(Aaron_Turner | origin | United_States)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))","(""Aaron Turner"" | ""place of origin"" | ""United States"")
(""Aaron Turner"" | ""profession"" | ""singing"")
(""Aaron Turner"" | ""music genre"" | ""post-metal"")
(""Aaron Turner"" | ""associatedBand"" | ""Twilight"")"
195,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","It’s Great to Be Young is a 94 minute movie released in 1956. It stars John Mills and is the cinematography is done by Gilbert Taylor. Louis Levy was the composer of the music while Cyril Frankel was the director. The film was edited by Max Benedict while the cost of the movie was only 282,838 pounds.","(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor)
(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | gross | 282838.0)
(""It's_Great_to_Be_Young_(1956_film) | director | Cyril_Frankel)
(""It's_Great_to_Be_Young_(1956_film) | musicComposer | Louis_Levy)
(""It's_Great_to_Be_Young_(1956_film) | editing | Max_Benedict"")","(""It’s Great to Be Young"" | releaseYear | 1956)
(""It’s Great to Be Young"" | hasDuration | 94)
(""It’s Great to Be Young"" | hasActor | ""John Mills"")
(""It’s Great to Be Young"" | cinematography | ""Gilbert Taylor"")
(""It’s Great to Be Young"" | hasComposer | ""Louis Levy"")
(""It’s Great to Be Young"" | director | ""Cyril Frankel"")
(""It’s Great to Be Young"" | hasEditor | ""Max Benedict"")
(""It’s Great to Be Young"" | hasCost | 282838 pounds)"
196,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1147 Stavropolis asteroid (absolute magnitude 11.5) has an orbital period of 1249.6 and a rotational period of 20378.5. With an epoch of 31 July 2016 (JD2457600.5), the asteroid's apoapsis is 418476000000.0 AU and a periapsis of 260855000000.0.","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | absoluteMagnitude | 11.5)
(1147_Stavropolis | rotationPeriod | 20378.5)
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))
(1147_Stavropolis | orbitalPeriod | 1249.6)","(1147 Stavropolis | absoluteMagnitude | 11.5)
(1147 Stavropolis | orbitalPeriod | 1249.6)
(1147 Stavropolis | rotationalPeriod | 20378.5)
(1147 Stavropolis | epoch | ""31 July 2016 (JD2457600.5)"")
(1147 Stavropolis | apoapsis | 418476000000.0 AU)
(1147 Stavropolis | periapsis | 260855000000.0 AU)"
197,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Velvet Underground, a band who were also associated with the band Theatre of Eternal Music, released the album Bootleg Series Volume 1: The Quine Tapes.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(The_Velvet_Underground | associatedBand/associatedMusicalArtist | Theatre_of_Eternal_Music)","(""The Velvet Underground"" | ""type"" | ""band""),
(""The Velvet Underground"" | ""associatedWith"" | ""Theatre of Eternal Music""),
(""Theatre of Eternal Music"" | ""type"" | ""band""),
(""The Velvet Underground"" | ""released"" | ""Bootleg Series Volume 1: The Quine Tapes""),
(""Bootleg Series Volume 1: The Quine Tapes"" | ""type"" | ""album""),
(""Bootleg Series Volume 1: The Quine Tapes"" | ""releasedBy"" | ""The Velvet Underground"")."
198,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Hypermarcas is a pharmaceutical company located in Brazil that produces pharmaceutical drugs under the leadership of a CEO.,"(Hypermarcas | location | Brazil)
(Hypermarcas | product | Drugs)
(Hypermarcas | industry | Pharmaceuticals)
(Hypermarcas | keyPerson | CEO)","(""Hypermarcas"" | ""type"" | ""pharmaceutical company"")
(""Hypermarcas"" | ""location"" | ""Brazil"")
(""Hypermarcas"" | ""produces"" | ""pharmaceutical drugs"")
(""Hypermarcas"" | ""hasPosition"" | ""CEO"")"
199,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bill Oddie, father to Kate Hardie, starred in the BBC's show Bananaman, first aired on 10/03/83 on the BBC, the company that filmed and showed the series who have a headquarters called Broadcasting House.","(BBC | city | Broadcasting_House)
(Bananaman | starring | Bill_Oddie)
(Bill_Oddie | child | Kate_Hardie)
(Bananaman | broadcastedBy | BBC)
(Bananaman | firstAired | ""1983-10-03"")","(""Bill Oddie"" | ""parentOf"" | ""Kate Hardie"")
(""Bill Oddie"" | ""starredIn"" | ""Bananaman"")
(""Bananaman"" | ""firstAiredOn"" | ""10/03/83"")
(""Bananaman"" | ""broadcastedBy"" | ""BBC"")
(""BBC"" | ""filmed"" | ""Bananaman"")
(""BBC"" | ""showed"" | ""Bananaman"")
(""BBC"" | ""hasHeadquarters"" | ""Broadcasting House"")"
200,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The College of William and Mary is the owner of the Alan B. Miller Hall at 101 Ukrop Way in Virginia, which was completed on 01/06/2009. The building, which was designed by architect Robert A M Stern, actually began construction on the 30th of March, 2007.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | completionDate | 2009-06-01)
(Alan_B._Miller_Hall | location | Virginia)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(Alan B. Miller Hall | owner | College of William and Mary)
(Alan B. Miller Hall | location | 101 Ukrop Way in Virginia)
(Alan B. Miller Hall | completion date | 01/06/2009)
(Alan B. Miller Hall | architect | Robert A M Stern)
(Alan B. Miller Hall | construction start date | 30th of March, 2007)"
201,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","John Mills played the lead in the movie 'It's Great to Be Young', released in 1956. The movie lasts 94 minutes, and its cinematography was carried out by Gilbert Taylor.","(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor)
(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0"")","(""John Mills"" | ""actedIn"" | ""'It's Great to Be Young'"")
(""'It's Great to Be Young'"" | ""actor"" | ""John Mills"")
(""'It's Great to Be Young'"" | ""releaseYear"" | 1956)
(""'It's Great to Be Young'"" | ""durationInMinutes"" | 94)
(""'It's Great to Be Young'"" | ""cinematographer"" | ""Gilbert Taylor"")
(""Gilbert Taylor"" | ""cinematographerFor"" | ""'It's Great to Be Young'"")"
202,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","HBO's headquarters are situated in New York City, New York.","(HBO | headquarter | New_York_City,_New_York)","(""HBO"" | ""headquartersLocation"" | ""New York City, New York"")"
203,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Al Asad Airbase has a runway length of 3990.0 and is operated by the United States Air Force.,"(Al_Asad_Airbase | operatingOrganisation | United_States_Air_Force)
(Al_Asad_Airbase | runwayLength | 3990.0)","(""Al Asad Airbase"" | ""hasRunwayLength"" | 3990.0)
(""Al Asad Airbase"" | ""isOperatedBy"" | ""United States Air Force"")"
204,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Year of No Light produced and released their album Nord on 06-09-2006 with the record labels Crucial Blast and E-Vinyl. Nord was followed up by their album Live at Roadburn 2008.,"(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | recordLabel | Crucial_Blast)
(Nord_(Year_of_No_Light_album) | recordLabel | E-Vinyl)","(""Year of No Light"" | ""produced"" | ""Nord"")
(""Year of No Light"" | ""released"" | ""Nord"")
(""Nord"" | ""release date"" | ""06-09-2006"")
(""Nord"" | ""record label"" | ""Crucial Blast"")
(""Nord"" | ""record label"" | ""E-Vinyl"")
(""Year of No Light"" | ""produced"" | ""Live at Roadburn 2008"")
(""Nord"" | ""followed by"" | ""Live at Roadburn 2008"")"
205,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Trane is a subsidiary company located in Ireland. They are a building materials company manufacturing HVAC. They were founded in La Crosse WI on Jan 1 1913, and now employ 29,000 people.","(Trane | type | Subsidiary)
(Trane | foundingDate | 1913-01-01)
(Trane | location | Ireland)
(Trane | foundationPlace | La_Crosse,_Wisconsin)
(Trane | numberOfEmployees | 29000)
(Trane | product | HVAC)
(Trane | industry | Building_materials)","(""Trane"" | ""type"" | ""Subsidiary Company"")
(""Trane"" | ""location"" | ""Ireland"")
(""Trane"" | ""industry"" | ""Building Materials"")
(""Trane"" | ""products"" | ""HVAC"")
(""Trane"" | ""foundingLocation"" | ""La Crosse, WI"")
(""Trane"" | ""foundingDate"" | ""Jan 1 1913""^^xsd:date)
(""Trane"" | ""employeeCount"" | ""29000""^^xsd:integer)"
206,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Terence Rattigan wrote English Without Tears along with Anatole de Grunwald. Grunwald also produced the film.,"(English_Without_Tears | producer | Anatole_de_Grunwald)
(English_Without_Tears | writer | Anatole_de_Grunwald)
(English_Without_Tears | writer | Terence_Rattigan)","(""Terence Rattigan"" | ""wrote"" | ""English Without Tears"")
(""Terence Rattigan"" | ""collaborator"" | ""Anatole de Grunwald"")
(""Anatole de Grunwald"" | ""wrote"" | ""English Without Tears"")
(""Anatole de Grunwald"" | ""produced"" | ""English Without Tears"")"
207,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The coupe style Pontiac Rageous was last produced in 1997.,"(Pontiac_Rageous | productionEndYear | 1997)
(Pontiac_Rageous | bodyStyle | Coupe)","(""Pontiac Rageous"" | ""type"" | ""coupe style"")
(""Pontiac Rageous"" | ""year of final production"" | ""1997"")"
208,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Cecil Parker was born as Cecil Schwabe.,(Cecil_Parker | birthName | Cecil Schwabe),"(""Cecil Parker"", ""birthName"", ""Cecil Schwabe"")"
209,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, born Olga Nikolaevna Bondareva in Leningrad, USSR on April 27, 1937 is know for the Bondareva-Shapley theorem.","(Olga_Bondareva | birthPlace | Leningrad,_USSR)
(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")","(Olga Bondareva | name | Olga Nikolaevna Bondareva)
(Olga Bondareva | birthPlace | Leningrad, USSR) 
(Olga Bondareva | birthDate | April 27, 1937)
(Olga Bondareva | knownFor | Bondareva-Shapley theorem)"
210,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Authored by Eric Flint, 1634: The Bavarian Crisis precedes Ring of Fire II.","(1634:_The_Bavarian_Crisis | followedBy | Ring_of_Fire_II)
(1634:_The_Bavarian_Crisis | author | Eric_Flint)","(Eric Flint | authorOf | 1634: The Bavarian Crisis)
(1634: The Bavarian Crisis | precedes | Ring of Fire II)
(1634: The Bavarian Crisis | authoredBy | Eric Flint)
(Ring of Fire II | precededBy | 1634: The Bavarian Crisis)"
211,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Hypermarcas, located in Sao Paulo, makes healthcare products with a revenue of $1,800,000,000 and has a subsidiary called Mantecorp.","(Hypermarcas | subsidiary | Mantecorp)
(Hypermarcas | product | Healthcare)
(Hypermarcas | location | São_Paulo)
(Hypermarcas | revenue | 1800000000)","(""Hypermarcas"" | ""location"" | ""Sao Paulo"")
(""Hypermarcas"" | ""industry"" | ""healthcare products"")
(""Hypermarcas"" | ""revenue"" | ""$1,800,000,000"")
(""Hypermarcas"" | ""hasSubsidiary"" | ""Mantecorp"")"
212,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The release date of Nord, Year of No Light Album is 06-09-2006 which is the sludge metal genre, produced by Year of No Light.","(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)","(Nord | release date | ""06-09-2006"")
(Nord | genre | ""sludge metal"")
(Nord | produced by | Year of No Light)
(Year of No Light | produces | Nord)"
213,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",There are 16800 undergraduate students at the University of Burgundy in Dijon.,"(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | campus | Dijon)","(""University of Burgundy"" | ""number of undergraduate students"" | ""16800"")
(""University of Burgundy"" | ""location"" | ""Dijon"")"
214,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva was a student at Leningrad State University and worked in the professional field of mathematics and economics. She died in Saint Petersburg on December 9, 1991.","(Olga_Bondareva | deathPlace | Saint_Petersburg)
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | deathDate | 1991-12-09)
(Olga_Bondareva | professionalField | Economics)
(Olga_Bondareva | professionalField | Mathematics)","(Olga Bondareva | type | Person)
(Olga Bondareva | occupation | Mathematician)
(Olga Bondareva | occupation | Economist)
(Olga Bondareva | deathDate | December 9, 1991)
(Olga Bondareva | deathPlace | Saint Petersburg)
(Olga Bondareva | alumni | Leningrad State University)"
215,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nurhan Atasoy was born in Resadiye and resides in Teşvikiye.,"(Nurhan_Atasoy | birthPlace | Reşadiye)
(Nurhan_Atasoy | residence | Teşvikiye)","(Nurhan Atasoy | was born in | Resadiye)
(Nurhan Atasoy | resides in | Teşvikiye)"
216,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The American band, The Honeymoon Killers, followed up their album, ""Let it Breed."" with a self-produced 35 minute, 10 seconds album, they entitled ""Turn Me On."" Although a designated punk blues album, ""Turn Me On"" is also considered to be of the musical genre known as noise rock.","(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | artist | The_Honeymoon_Killers_(American_band))
(Turn_Me_On_(album) | genre | Punk_blues)
(Turn_Me_On_(album) | producer | The_Honeymoon_Killers_(American_band))
(Turn_Me_On_(album) | genre | Noise_rock)
(Turn_Me_On_(album) | precededBy | Let_It_Breed)","(The Honeymoon Killers | nationality | American)
(The Honeymoon Killers | type | band)
(The Honeymoon Killers | produced | Let it Breed)
(The Honeymoon Killers | produced | Turn Me On)
(The Honeymoon Killers | duration | 35 minutes 10 seconds)
(Turn Me On | title | ""Turn Me On"")
(Turn Me On | followed by | Let it Breed)
(Turn Me On | genre | punk blues)
(Turn Me On | genre | noise rock)
(Turn Me On | producer | The Honeymoon Killers)
(Let it Breed | followed by | Turn Me On)
(Let it Breed | producer | The Honeymoon Killers)"
217,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adolfo Suárez Madrid–Barajas Airport is located in Alcobendas. This airport is operated by ENAIRE, which is located in Madrid, Spain. The runway is named 18L/36R and has a length of 4,349.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 4349.0)
(ENAIRE | city | Madrid)
(Madrid | country | Spain)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayName | ""18L/36R"")","(Adolfo Suárez Madrid–Barajas Airport | location | Alcobendas)
(Adolfo Suárez Madrid–Barajas Airport | operator | ENAIRE)
(ENAIRE | location | Madrid, Spain)
(runway 18L/36R | partOf | Adolfo Suárez Madrid–Barajas Airport)
(runway 18L/36R | length | 4349)"
218,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",MotorSport Vision was founded by Peter Ogden.,(MotorSport_Vision | foundedBy | Peter_Ogden),(MotorSport Vision | was founded by | Peter Ogden)
219,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The death place of Liselotte Grschebina is Israel.,(Liselotte_Grschebina | deathPlace | Israel),(Liselotte Grschebina | death place | Israel)
220,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Bedford Aerodrome runway surface is made out of concrete, it is named 08/26 and is 1095 long. The aerodrome serves the Bedford Autodrome and is 83.2104 above sea level.","(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | elevationAboveTheSeaLevel | 83.2104)
(Bedford_Aerodrome | runwayLength | 1095.0)
(Bedford_Aerodrome | runwayName | ""08/26"")
(Bedford_Aerodrome | runwaySurfaceType | Concrete)","(Bedford Aerodrome | runwaySurface | ""concrete"")
(Bedford Aerodrome | runwayName | ""08/26"")
(Bedford Aerodrome | runwayLength | 1095)
(Bedford Aerodrome | serves | Bedford Autodrome)
(Bedford Aerodrome | elevationAboveSeaLevel | 83.2104)"
221,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aaron Turner is a singer who played with Twilight, which is of the black metal genre.","(Aaron_Turner | instrument | Singing)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))
(Aaron_Turner | genre | Black_metal)","(""Aaron Turner"" | type | ""Singer"")
(""Aaron Turner"" | playedWith | ""Twilight"")
(""Twilight"" | type | ""Black Metal genre"")"
222,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bananaman was a TV series which was aired on the BBC. It starred Jill Shilling and was shown for the first time on the 3rd of October, 1983. The BBC headquarters are located in the Broadcasting House.","(BBC | city | Broadcasting_House)
(Bananaman | starring | Jill_Shilling)
(Bananaman | broadcastedBy | BBC)
(Bananaman | firstAired | ""1983-10-03"")","(""Bananaman"" | ""type"" | ""TV series"")
(""Bananaman"" | ""airedOn"" | ""BBC"")
(""Bananaman"" | ""starring"" | ""Jill Shilling"")
(""Bananaman"" | ""firstAirDate"" | ""3rd of October, 1983"")
(""BBC"" | ""type"" | ""Broadcasting Company"")
(""BBC"" | ""location"" | ""Broadcasting House"")"
223,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Bootleg Series Volume I: The Quine Tapes was recorded in San Francisco by Polydor Records. It was released on 10/16/01 by the Universal Music Group record label.,"(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Polydor_Records)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | San_Francisco)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Universal_Music_Group)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | releaseDate | 2001-10-16)","(""The Bootleg Series Volume I: The Quine Tapes"" | ""recordedIn"" | ""San Francisco"")
(""The Bootleg Series Volume I: The Quine Tapes"" | ""recordedBy"" | ""Polydor Records"")
(""The Bootleg Series Volume I: The Quine Tapes"" | ""releaseDate"" | ""10/16/01"")
(""The Bootleg Series Volume I: The Quine Tapes"" | ""releasedBy"" | ""Universal Music Group"")
(""Polydor Records"" | ""city"" | ""San Francisco"")
(""Universal Music Group"" | ""release"" | ""The Bootleg Series Volume I: The Quine Tapes"")"
224,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng from the People's Republic of China took part in the Shenzhou 6 mission.,"(Nie_Haisheng | mission | Shenzhou_6)
(""Nie_Haisheng | nationality | People's_Republic_of_China"")","(""Nie Haisheng"" | ""nationality"" | ""People's Republic of China""),
(""Nie Haisheng"" | ""took part in"" | ""Shenzhou 6 mission"")"
225,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","It's Great to Be Young, a 1956 film starring John Mills, has a running time of 94 minutes.","(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0"")","(""It's Great to Be Young"" | type | ""film"")
(""It's Great to Be Young"" | date | 1956)
(""It's Great to Be Young"" | starring | ""John Mills"")
(""It's Great to Be Young"" | running time | 94 minutes)"
226,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Hypermarcas's main product is drugs.,(Hypermarcas | product | Drugs),"(""Hypermarcas"" | ""mainProduct"" | ""drugs"")"
227,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The 17068.8 millimetres ALCO RS-3 has a diesel-electric transmission.,"(ALCO_RS-3 | powerType | Diesel-electric_transmission)
(ALCO_RS-3 | length | 17068.8 (millimetres))","(""ALCO RS-3"" | ""height (in millimetres)"" | ""17068.8"")
(""ALCO RS-3"" | ""hasTransmissionType"" | ""diesel-electric"")"
228,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiacao Sportiva Arapiraquense's ground is the Estadio Municipal Coaracy da Mata Fonseca, has 17000 members, is located in Arapiraca, and were in Campeonato Brasileiro Serie C (based in Brazil) in 2015.Agremiação Sportiva Arapiraquense play in the Campeonato Brasileiro Série C league, and the Vila Nova Futebol Clube are the champions of Campeonato Brasileiro Serie C.","(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Agremiação_Sportiva_Arapiraquense | season | 2015_Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | country | Brazil)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(Agremiacao Sportiva Arapiraquense | ground | Estadio Municipal Coaracy da Mata Fonseca)
(Agremiacao Sportiva Arapiraquense | members | 17000)
(Agremiacao Sportiva Arapiraquense | location | Arapiraca)
(Agremiacao Sportiva Arapiraquense | league | Campeonato Brasileiro Serie C)
(Agremiacao Sportiva Arapiraquense | year | 2015)
(Agremiacao Sportiva Arapiraquense | country | Brazil)
(Vila Nova Futebol Clube | league | Campeonato Brasileiro Serie C)
(Vila Nova Futebol Clube | status | champions) 
(Estadio Municipal Coaracy da Mata Fonseca | part of | Agremiacao Sportiva Arapiraquense)
(Campeonato Brasileiro Serie C | participant | Agremiacao Sportiva Arapiraquense)
(Campeonato Brasileiro Serie C | champion | Vila Nova Futebol Clube)
(Campeonato Brasileiro Serie C | country | Brazil)
"
229,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument, which falls under the category of contributing property, is in Pennsylvania in Adams County. To the southeast of Adams County, Pennsylvania lies Carroll County, Maryland.","(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | state | ""Pennsylvania"")
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""11th Mississippi Infantry Monument"" | ""type"" | ""contributing property"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Adams County, Pennsylvania"")
(""Adams County, Pennsylvania"" | ""isIn"" | ""Pennsylvania"")
(""Carroll County, Maryland"" | ""isSoutheastOf"" | ""Adams County, Pennsylvania"")"
230,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",English Without Tears is a film written by Terence Rattigan and Anatole de Grunwald. Bernard Knowles is known as the cinematographer for the film and it has a running time of an hour and 29 minutes.,"(English_Without_Tears | writer | Anatole_de_Grunwald)
(English_Without_Tears | cinematography | Bernard_Knowles)
(English_Without_Tears | writer | Terence_Rattigan)
(English_Without_Tears | runtime | 89.0)","(""English Without Tears"" | ""writtenBy"" | ""Terence Rattigan"")
(""English Without Tears"" | ""writtenBy"" | ""Anatole de Grunwald"")
(""Bernard Knowles"" | ""isCinematographerFor"" | ""English Without Tears"")
(""English Without Tears"" | ""runningTime"" | ""1 hour 29 minutes"")"
231,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was born in New Hampshire on November 18, 1923.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | birthPlace | New_Hampshire)","(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | birthDate | November 18, 1923)"
232,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","It’s Great to Be Young, featuring cinematography by Gilbert Taylor, made 282,838 pounds at the box office. Louis Levy composed the music for the film.","(""It's_Great_to_Be_Young_(1956_film) | gross | 282838.0)
(""It's_Great_to_Be_Young_(1956_film) | musicComposer | Louis_Levy)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor"")","1. (""It’s Great to Be Young"" | dbo:cinematography | ""Gilbert Taylor"")
2. (""It’s Great to Be Young"" | dbo:gross | ""282,838 pounds"")
3. (""Louis Levy"" | dbo:composer | ""It’s Great to Be Young"")"
233,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The campus of the Acharya Institute of Technology is located at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090. The University is associated with the Visvesvaraya Technological University. Dr. G. P. Prabhukumar is the director. The All India Council for Technical Education, located in Mumbai, gave the University the Technical Campus status.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(All_India_Council_for_Technical_Education | location | Mumbai)
(Acharya_Institute_of_Technology | director | ""Dr. G. P. Prabhukumar"")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | city | Bangalore)
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)","(Acharya Institute of Technology | location | Soldevanahalli)
(Acharya Institute of Technology | address | Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090)
(Acharya Institute of Technology | associatedWith | Visvesvaraya Technological University)
(Acharya Institute of Technology | director | Dr. G. P. Prabhukumar)
(Acharya Institute of Technology | status | Technical Campus)
(All India Council for Technical Education | location | Mumbai)
(All India Council for Technical Education | gaveStatusTo | Acharya Institute of Technology)"
234,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Bedford Aerodrome, which also serves the Bedford Autodrome, has an operating organization that is called MotorSport Vision. Situated 83.2 meters above sea level, the runway length at the Bedford Aerodrome is 1095.","(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | runwayLength | 1095.0)
(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | elevationAboveTheSeaLevel | 83.2104)","(""Bedford Aerodrome"" | ""serves"" | ""Bedford Autodrome"")
(""Bedford Aerodrome"" | ""hasOperatingOrganization"" | ""MotorSport Vision"")
(""Bedford Aerodrome"" | ""situatedAt"" | ""83.2 meters above sea level"")
(""Bedford Aerodrome"" | ""hasRunwayLength"" | ""1095"")"
235,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Acharya Institute of Technology in India is affiliated to Visvesvaraya Technological University located in the city of Belgaum.,"(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Visvesvaraya_Technological_University | city | Belgaum)
(Acharya_Institute_of_Technology | country | ""India"")","(""Acharya Institute of Technology"" | ""locatedIn"" | ""India"")
(""Acharya Institute of Technology"" | ""affiliatedTo"" | ""Visvesvaraya Technological University"")
(""Visvesvaraya Technological University"" | ""locatedIn"" | ""Belgaum"")"
236,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aleksandr Prudnikov was born on February 24, 1989 and currently plays for the FC Amkar Perm football club, but he previously played youth football for FC Spartak Moscow, which is located at the Otkrytiye Arena.","(Aleksandr_Prudnikov | club | FC_Amkar_Perm)
(Aleksandr_Prudnikov | birthDate | 1989-02-24)
(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(FC_Spartak_Moscow | ground | Otkrytiye_Arena)","(Aleksandr Prudnikov | birthDate | ""February 24, 1989"")
(Aleksandr Prudnikov | team | FC Amkar Perm)
(FC Amkar Perm | type | ""football club"")
(Aleksandr Prudnikov | formerTeam | FC Spartak Moscow)
(FC Spartak Moscow | type | ""youth football club"")
(FC Spartak Moscow | location | Otkrytiye Arena)
(Otkrytiye Arena | type | ""arena"")"
237,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1147 Stavropolis epoch is 31 July 2016 (Julian Day 2457600.5). The periapsis of the asteroid is 260855000000, and its orbital period is 1249.6 days.","(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))
(1147_Stavropolis | orbitalPeriod | 1249.6)","(""1147 Stavropolis"" | ""hasEpoch"" | ""31 July 2016"")
(""1147 Stavropolis"" | ""hasJulianDay"" | ""2457600.5"")
(""1147 Stavropolis"" | ""hasPeriapsis"" | ""260855000000"")
(""1147 Stavropolis"" | ""hasOrbitalPeriod"" | ""1249.6 days"")"
238,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",With 16800 undergraduate students the University of Burgundy has 27400 total number of students.,"(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | numberOfStudents | 27400)","(""University of Burgundy"" | ""total number of students"" | 27400)
(""University of Burgundy"" | ""number of undergraduate students"" | 16800)"
239,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Assembled in Michigan, the Pontiac Rageous was last produced in 1997.","(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | productionEndYear | 1997)","(""Pontiac Rageous"" | ""assemblyLocation"" | ""Michigan""),
(""Pontiac Rageous"" | ""lastProductionYear"" | 1997)"
240,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument is located in the United States, falls under the category of Contributing property, is in the municipality of Gettysburg, Pennsylvania, and was established in the year 2000. Adams County Pennsylvania is East of Franklin County, Pennsylvania, and has Cumberland County, Pennsylvania to its north.","(Adams_County,_Pennsylvania | hasToItsWest | Franklin_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | municipality | Gettysburg,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)
(Adams_County,_Pennsylvania | hasToItsNorth | Cumberland_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | country | ""United States"")","(""11th Mississippi Infantry Monument"" | ""location"" | ""United States"")
(""11th Mississippi Infantry Monument"" | ""type"" | ""Contributing property"")
(""11th Mississippi Infantry Monument"" | ""municipality"" | ""Gettysburg"")
(""11th Mississippi Infantry Monument"" | ""state"" | ""Pennsylvania"")
(""11th Mississippi Infantry Monument"" | ""year of establishment"" | 2000)
(""Adams County Pennsylvania"" | ""relative direction"" | ""East of Franklin County, Pennsylvania"")
(""Adams County Pennsylvania"" | ""relative direction"" | ""North of Cumberland County, Pennsylvania"")"
241,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala is located in Morelos, which is in Mexico. It is 1,147 meters above sea level.","(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | country | Mexico)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)","(""Ciudad Ayala"" | ""location"" | ""Morelos"")
(""Morelos"" | ""location"" | ""Mexico"")
(""Ciudad Ayala"" | ""elevation"" | ""1,147 meters"")"
242,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Jamie Lawrence's club is Brentford F.C.,(Jamie_Lawrence | club | Brentford_F.C.),(Jamie Lawrence | club | Brentford F.C.)
243,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology, established in 2000, is affiliated with Visvesvaraya Technological University. The campus address for the Institute is: Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | established | 2000)","(""Acharya Institute of Technology"" | ""established"" | ""2000"")
(""Acharya Institute of Technology"" | ""affiliatedWith"" | ""Visvesvaraya Technological University"")
(""Acharya Institute of Technology"" | ""campusAddress"" | ""Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090"")"
244,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Weighing 70.308kg, Piotr Hallmann was born on August 25, 1987 in Gdynia, Poland.","(Piotr_Hallmann | birthDate | 1987-08-25)
(Piotr_Hallmann | birthPlace | Gdynia,_Poland)
(Piotr_Hallmann | weight | 70.308)","(Piotr Hallmann | weight | 70.308kg)
(Piotr Hallmann | birthDate | August 25, 1987)
(Piotr Hallmann | birthPlace | Gdynia)
(Piotr Hallmann | nationality | Poland)"
245,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Baku Turkish Martyrs' Memorial in Azerbaijan was designed by Huseyin Butuner and Hilmi Guner.,"(Baku_Turkish_Martyrs\'_Memorial | designer | ""Hüseyin Bütüner and Hilmi Güner"")
(""Baku_Turkish_Martyrs'_Memorial | location | Azerbaijan"")","(""Baku Turkish Martyrs' Memorial"" | location | ""Azerbaijan"")
(""Baku Turkish Martyrs' Memorial"" | architect | ""Huseyin Butuner"")
(""Baku Turkish Martyrs' Memorial"" | architect | ""Hilmi Guner"")"
246,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The All India Council for Technical Education of Mumbai, India proudly designated its Technical Campus status to the Acharya Institute of Technology of Bangalore, India, directed by Dr. G. Prabhukumar and located at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090, India.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(All_India_Council_for_Technical_Education | location | Mumbai)
(Acharya_Institute_of_Technology | director | ""Dr. G. P. Prabhukumar"")
(Acharya_Institute_of_Technology | city | Bangalore)
(Acharya_Institute_of_Technology | country | ""India"")
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)","(""All India Council for Technical Education"" | ""location"" | ""Mumbai, India"")
(""All India Council for Technical Education"" | ""designation"" | ""Technical Campus status"")
(""All India Council for Technical Education"" | ""designationGivenTo"" | ""Acharya Institute of Technology"")
(""Acharya Institute of Technology"" | ""location"" | ""Bangalore, India"")
(""Acharya Institute of Technology"" | ""status"" | ""Technical Campus"")
(""Acharya Institute of Technology"" | ""director"" | ""Dr. G. Prabhukumar"")
(""Acharya Institute of Technology"" | ""address"" | ""Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090, India"")
(""Dr. G. Prabhukumar"" | ""role"" | ""Director"")
(""Dr. G. Prabhukumar"" | ""worksAt"" | ""Acharya Institute of Technology"")"
247,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, or Olga Nikolaevna Bondareva, studied at Leningrad State University. She was in the field of Mathematics and Economics.","(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | professionalField | Economics)
(Olga_Bondareva | professionalField | Mathematics)","(Olga Bondareva | nickname | Olga Nikolaevna Bondareva)
(Olga Bondareva | studied at | Leningrad State University)
(Olga Bondareva | field of study | Mathematics)
(Olga Bondareva | field of study | Economics)"
248,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bootleg Series Volume 1: The Quine Tapes by The Velvet Underground with run time of 230:05 was recorded in the United States.Velvet Underground also produced it.,"(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | United_States)","(""Bootleg Series Volume 1: The Quine Tapes"" | ""by"" | ""The Velvet Underground"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""run time"" | ""230:05"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""recorded in"" | ""the United States"")
(""The Velvet Underground"" | ""produced"" | ""Bootleg Series Volume 1: The Quine Tapes"")"
249,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Madrid based Adolfo Suárez Madrid–Barajas Airport is operated by ENAIRE. It has an elevation of 610.0 metres above sea level and a runway length of 3,500.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Madrid)","(Adolfo Suárez Madrid–Barajas Airport | based in | Madrid)
(Adolfo Suárez Madrid–Barajas Airport | operated by | ENAIRE)
(Adolfo Suárez Madrid–Barajas Airport | elevation | 610.0 metres)
(Adolfo Suárez Madrid–Barajas Airport | runway length | 3,500)"
250,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Rageous, a coupe, was assembled on the assembly line in Detroit, Michigan.","(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | assembly | Detroit)
(Pontiac_Rageous | bodyStyle | Coupe)","(""Pontiac Rageous"" | ""type"" | ""coupe"")
(""Pontiac Rageous"" | ""location of assembly"" | ""Detroit, Michigan"")
(""Detroit, Michigan"" | ""is location of"" | ""Pontiac Rageous"")"
251,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Train song Mermaid belongs to the genre of pop rock written by the band Train, which is on Columbia Records and Sony Music Entertainment record label.","(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)","(""Mermaid"" | type | ""Train song"")
(""Mermaid"" | genre | ""pop rock"")
(""Mermaid"" | writtenBy | ""Train"")
(""Mermaid"" | recordLabel | ""Columbia Records"")
(""Mermaid"" | recordLabel | ""Sony Music Entertainment"")
(""Train"" | type | ""band"")
(""Train"" | writes | ""Mermaid"")
(""Train"" | signedTo | ""Columbia Records"")
(""Train"" | signedTo | ""Sony Music Entertainment"")
(""Columbia Records"" | type | ""record label"")
(""Columbia Records"" | hasArtist | ""Train"")
(""Columbia Records"" | hasSong | ""Mermaid"")
(""Sony Music Entertainment"" | type | ""record label"")
(""Sony Music Entertainment"" | hasArtist | ""Train"")
(""Sony Music Entertainment"" | hasSong | ""Mermaid"")"
252,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Acharya Institute of Technology was given the 'Technical Campus' status by All India Council for Technical Education located in Mumbai which is affiliated with the Visvesvaraya Technological University. Acharya Institute of Technology's director is Dr. G. P. Prabhukumar which was established in the year 2000, located at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(All_India_Council_for_Technical_Education | location | Mumbai)
(Acharya_Institute_of_Technology | director | ""Dr. G. P. Prabhukumar"")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | established | 2000)
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)","(Acharya Institute of Technology | status | 'Technical Campus')
(Acharya Institute of Technology | givenStatusBy | All India Council for Technical Education)
(All India Council for Technical Education | location | Mumbai)
(Acharya Institute of Technology | affiliatedWith | Visvesvaraya Technological University)
(Acharya Institute of Technology | director | Dr. G. P. Prabhukumar)
(Acharya Institute of Technology | establishedIn | 2000)
(Acharya Institute of Technology | location | Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090)"
253,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Olga Bondareva-born as Olga Nikolaevna Bondareva-was a student at Leningrad State University. She was known for the Bondareva-Shapley theorem and later died in Saint Petersburg.,"(Olga_Bondareva | deathPlace | Saint_Petersburg)
(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")
(Olga_Bondareva | almaMater | Leningrad_State_University)","(""Olga Bondareva"" | ""birthName"" | ""Olga Nikolaevna Bondareva"")
(""Olga Bondareva"" | ""almaMater"" | ""Leningrad State University"")
(""Olga Bondareva"" | ""knownFor"" | ""Bondareva-Shapley theorem"")
(""Olga Bondareva"" | ""deathPlace"" | ""Saint Petersburg"")"
254,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Expect a Miracle, created and produced by composer and pianist Brian Kelly, has a runtime of 54.56 minutes.","(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist))","(""Expect a Miracle"" | creator | ""Brian Kelly"")
(""Expect a Miracle"" | producer | ""Brian Kelly"")
(""Brian Kelly"" | job | ""composer"")
(""Brian Kelly"" | job | ""pianist"")
(""Expect a Miracle"" | runtime | 54.56)"
255,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bionico is a popular Mexican dessert that combines sour cream, chopped fruits, condensed milk, granola, raisins and shredded coconut.","(Bionico | course | Dessert)
(Bionico | mainIngredient | ""Chopped Fruits, Sour Cream, Condensed Milk, Granola, Shredded Coconut, Raisins"")
(Bionico | country | Mexico)","(""Bionico"" | ""type"" | ""Mexican dessert"")
(""Bionico"" | ""ingredient"" | ""sour cream"")
(""Bionico"" | ""ingredient"" | ""chopped fruits"")
(""Bionico"" | ""ingredient"" | ""condensed milk"")
(""Bionico"" | ""ingredient"" | ""granola"")
(""Bionico"" | ""ingredient"" | ""raisins"")
(""Bionico"" | ""ingredient"" | ""shredded coconut"")"
256,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva (born April 27, 1937 - died December 9, 1991) was an economist who graduated from Leningrad State University.","(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | deathDate | 1991-12-09)
(Olga_Bondareva | professionalField | Economics)","(Olga Bondareva | birthDate | April 27, 1937)
(Olga Bondareva | deathDate | December 9, 1991)
(Olga Bondareva | occupation | economist)
(Olga Bondareva | almaMater | Leningrad State University)"
257,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",One residence of Nurhan Atasoy was in Istanbul.,(Nurhan_Atasoy | residence | Istanbul),(Nurhan Atasoy | residence | Istanbul)
258,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",It’s Great to be Young is a movie starring John Mills and Cecil Parker. It was released in 1956. Max Benedict edited the movie and died in London.,"(""It's_Great_to_Be_Young_(1956_film) | editing | Max_Benedict)
(Max_Benedict | deathPlace | London)
(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | starring | Cecil_Parker"")","(""It’s Great to be Young"" | type | ""movie"")
(""It’s Great to be Young"" | starring | ""John Mills"")
(""It’s Great to be Young"" | starring | ""Cecil Parker"")
(""It’s Great to be Young"" | release year | ""1956"")
(""It’s Great to be Young"" | edited by | ""Max Benedict"")
(""Max Benedict"" | death place | ""London"")"
259,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina was born in Karlsruhe on 1908-05-02.,"(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | birthDate | 1908-05-02)","(Liselotte Grschebina | birthDate | ""1908-05-02"")
(Liselotte Grschebina | birthPlace | Karlsruhe)"
260,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","AmeriGas, which brings in a net income of $211,200,000, was founded on January 1, 1959.","(AmeriGas | foundingDate | 1959-01-01)
(AmeriGas | netIncome | 211200000)","(""AmeriGas"" | ""netIncome"" | ""$211,200,000"")
(""AmeriGas"" | ""foundingDate"" | ""January 1, 1959"")"
261,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The ALCO RS-3, built by the Montreal Locomotive Works between May 1950 and August 1956, has a diesel-electric transmission and measures 17068.8 millimetres in length.","(ALCO_RS-3 | buildDate | ""May 1950 - August 1956"")
(ALCO_RS-3 | powerType | Diesel-electric_transmission)
(ALCO_RS-3 | builder | Montreal_Locomotive_Works)
(ALCO_RS-3 | length | 17068.8 (millimetres))","(ALCO RS-3 | builtBy | Montreal Locomotive Works)
(Montreal Locomotive Works | built | ALCO RS-3)
(ALCO RS-3 | buildStartDate | May 1950)
(ALCO RS-3 | buildEndDate | August 1956)
(ALCO RS-3 | transmission | diesel-electric)
(ALCO RS-3 | measuresInLength | 17068.8 millimetres)"
262,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng took part in the Shenzhou 10 mission.,(Nie_Haisheng | mission | Shenzhou_10),"(""Nie Haisheng"" | ""took part in"" | ""Shenzhou 10 mission"")"
263,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva was born on April 27, 1937 and died on December 9,1991. She was in the professional field of mathematics and Economics.","(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | deathDate | 1991-12-09)
(Olga_Bondareva | professionalField | Economics)
(Olga_Bondareva | professionalField | Mathematics)","(Olga Bondareva | birthDate | ""April 27, 1937"")
(Olga Bondareva | deathDate | ""December 9, 1991"")
(Olga Bondareva | profession | ""mathematics"")
(Olga Bondareva | profession | ""Economics"")"
264,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The genre of the Turn Me On album is noise rock and the Turn Me On album, which was followed by the Take it Off album and the album Turn Me On was preceded by the album Let It Breed.","(Turn_Me_On_(album) | genre | Noise_rock)
(Turn_Me_On_(album) | precededBy | Let_It_Breed)
(Turn_Me_On_(album) | followedBy | Take_It_Off!)","(""Turn Me On"" | ""genre"" | ""noise rock"")
(""Turn Me On"" | ""followed_by"" | ""Take It Off"")
(""Turn Me On"" | ""preceded_by"" | ""Let It Breed"")"
265,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Abdul Taib Mahmud was a member of the Parti Pesaka Bumiputera Bersatu. His successor was Adenan Satem.,"(Abdul_Taib_Mahmud | successor | Adenan_Satem)
(Abdul_Taib_Mahmud | party | Parti_Pesaka_Bumiputera_Bersatu)","(""Abdul Taib Mahmud"" | ""type"" | ""Person""),
(""Abdul Taib Mahmud"" | ""memberOf"" | ""Parti Pesaka Bumiputera Bersatu""),
(""Parti Pesaka Bumiputera Bersatu"" | ""type"" | ""Organization""),
(""Abdul Taib Mahmud"" | ""successor"" | ""Adenan Satem""),
(""Adenan Satem"" | ""type"" | ""Person""),
(""Adenan Satem"" | ""predecessor"" | ""Abdul Taib Mahmud"")"
266,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Trane is located in Ireland.,(Trane | location | Ireland),"(""Trane"" | ""location"" | ""Ireland"")"
267,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Harold French directed the film English Without Tears which was edited by Alan Jaggs and released on 07-28-1944.,"(English_Without_Tears | releaseDate | 1944-07-28)
(English_Without_Tears | director | Harold_French)
(English_Without_Tears | editing | Alan_Jaggs)","(""Harold French"" | ""directed"" | ""English Without Tears"")
(""English Without Tears"" | ""directedBy"" | ""Harold French"")
(""English Without Tears"" | ""editedBy"" | ""Alan Jaggs"")
(""Alan Jaggs"" | ""edited"" | ""English Without Tears"")
(""English Without Tears"" | ""releaseDate"" | ""07-28-1944"")"
268,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","HBO, the sister channel of Cinemax, broadcasted The Death on a Factory Farm.","(Death_on_a_Factory_Farm | broadcastedBy | HBO)
(HBO | sisterStation | Cinemax)","(""HBO"" | ""sister channel of"" | ""Cinemax"")
(""HBO"" | ""broadcasted"" | ""The Death on a Factory Farm"")"
269,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The movie English Without Tears is edited by Alan Jaggs, produced by Anatole de Grunwald, and has a running time of 89 minutes. Harold French, who has been an actor since 1920, directed the film.","(English_Without_Tears | editing | Alan_Jaggs)
(Harold_French | activeYearsStartYear | 1920-01-01)
(English_Without_Tears | director | Harold_French)
(English_Without_Tears | producer | Anatole_de_Grunwald)
(English_Without_Tears | runtime | 89.0)","(""English Without Tears"" | editedBy | ""Alan Jaggs"")
(""English Without Tears"" | producedBy | ""Anatole de Grunwald"")
(""English Without Tears"" | ""running time"" | 89 minutes)
(""English Without Tears"" | directedBy | ""Harold French"")
(""Harold French"" | ""profession"" | ""actor"")
(""Harold French"" | ""activeYearsStartYear"" | 1920)"
270,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Turkey's type of government is a unitary state.,(Turkey | governmentType | Unitary_state),(Turkey | type of government | unitary state)
271,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Super Capers is a 98-minute English-language movie directed and edited by Ray Griggs and Stacy Katzman.,"(Super_Capers | language | English_language)
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | editing | Stacy_Katzman)
(Super_Capers | runtime | 98.0)","(""Super Capers"" | ""runtime"" | ""98 minutes"")
(""Super Capers"" | ""language"" | ""English"")
(""Super Capers"" | ""director"" | ""Ray Griggs"")
(""Super Capers"" | ""director"" | ""Stacy Katzman"")
(""Super Capers"" | ""editor"" | ""Ray Griggs"")
(""Super Capers"" | ""editor"" | ""Stacy Katzman"")"
272,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Industrial rock stems from noise rock.,(Noise_rock | derivative | Industrial_rock),"(""Industrial rock"" | ""stems from"" | ""noise rock"")"
273,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Train song Mermaid was produced by the Espionage production team.,(Mermaid_(Train_song) | producer | Espionage_(production_team)),"(""Mermaid"" | ""type"" | ""Song"")
(""Mermaid"" | ""producer"" | ""Espionage production team"")
(""Mermaid"" | ""artist"" | ""Train"")
(""Espionage production team"" | ""produced"" | ""Mermaid"")
(""Train"" | ""song"" | ""Mermaid"")"
274,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was born on November, 18, 1923 in New Hampshire. He was an American that served in the United States Navy where he was awarded the Distinguished Service Medal; he retired in August 1974. He later died in California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | dateOfRetirement | ""1974-08-01"")
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | award | Distinguished_Service_Medal_(United_States_Navy))","(Alan Shepard | birthDate | ""November, 18, 1923"")
(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | nationality | American)
(Alan Shepard | occupation | United States Navy)
(Alan Shepard | award | Distinguished Service Medal)
(Alan Shepard | retireDate | August 1974)
(Alan Shepard | deathPlace | California)"
275,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina was born in the German Empire which was founded in 1871-01-01.,"(Liselotte_Grschebina | birthPlace | German_Empire)
(German_Empire | foundingDate | 1871-01-01)","(""Liselotte Grschebina"" | ""birthPlace"" | ""German Empire"")
(""German Empire"" | ""foundingDate"" | ""1871-01-01"")"
276,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Film ""English Without Tears"" was written by Terence Rattigan, cinematographic by Bernard Knowles, music composed by Nicholas Brodszky, produced by Anatole de Grunwald, directed by Harold French.","(English_Without_Tears | cinematography | Bernard_Knowles)
(English_Without_Tears | writer | Terence_Rattigan)
(English_Without_Tears | musicComposer | Nicholas_Brodszky)
(English_Without_Tears | producer | Anatole_de_Grunwald)
(English_Without_Tears | director | Harold_French)","(""English Without Tears"" | was written by | ""Terence Rattigan"")
(""English Without Tears"" | cinematographic by | ""Bernard Knowles"")
(""English Without Tears"" | music composed by | ""Nicholas Brodszky"")
(""English Without Tears"" | produced by | ""Anatole de Grunwald"")
(""English Without Tears"" | directed by | ""Harold French"")"
277,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was an American who was born on November 18, 1923 in New Hampshire and died in California, which Dianne Feinstein is a senator of.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)
(California | senators | Dianne_Feinstein)","(Alan Shepard | type | American)
(Alan Shepard | birthDate | November 18, 1923)
(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | deathPlace | California)
(Dianne Feinstein | type | Senator)
(Dianne Feinstein | belongsTo | California)"
278,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1147 Stavropolis, discovered by Grigory Neujmin, has an orbital period of 1249.6 days and an apoapsis of 418476000000.0.","(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | discoverer | Grigory_Neujmin)
(1147_Stavropolis | apoapsis | 418476000000.0)","(""1147 Stavropolis"" | ""discoveredBy"" | ""Grigory Neujmin"") 
(""1147 Stavropolis"" | ""orbitalPeriod"" | 1249.6) 
(""1147 Stavropolis"" | ""apoapsis"" | 418476000000.0)"
279,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Bootleg Series Volume 1: The Quine Tapes, by the proto-punk group The Velvet Underground, fits into the Rock music genre.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | genre | Rock_music)
(The_Velvet_Underground | genre | Proto-punk)","(""The Bootleg Series Volume 1: The Quine Tapes"" | ""author"" | ""The Velvet Underground""),
(""The Bootleg Series Volume 1: The Quine Tapes"" | ""genre"" | ""Rock music""),
(""The Velvet Underground"" | ""type"" | ""proto-punk group""),
(""The Velvet Underground"" | ""produced"" | ""The Bootleg Series Volume 1: The Quine Tapes"")"
280,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Bootleg Series Volume 1: The Quine Tapes, is a noise rock album, with this being a genre of rock music.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | genre | Rock_music)
(Rock_music | musicFusionGenre | Noise_rock)","(""Bootleg Series Volume 1: The Quine Tapes"" | type | ""Album"")
(""Bootleg Series Volume 1: The Quine Tapes"" | genre | ""Noise rock"")
(""Noise rock"" | type | ""genre of rock music"")"
281,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Turkey, whose national language is Turkish, is the birthplace of Nurhan Atasoy.","(Nurhan_Atasoy | birthPlace | Turkey)
(Turkey | language | Turkish_language)","(""Turkey"" | ""nationalLanguage"" | ""Turkish"")
(""Turkey"" | ""birthPlace"" | ""Nurhan Atasoy"")"
282,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was born in Karlsruhe and died in Israel, which is made up of different ethnic groups. Those groups include Arabs and Israeli Jews.","(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | deathPlace | Israel)
(Israel | ethnicGroup | Arab_citizens_of_Israel)
(Israel | ethnicGroup | Israeli_Jews)","(Liselotte Grschebina | birthPlace | Karlsruhe)
(Liselotte Grschebina | deathPlace | Israel)
(Israel | isComposedOf | Ethnic groups)
(Ethnic groups | include | Arabs)
(Ethnic groups | include | Israeli Jews)"
283,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Agremiação Sportiva Arapiraquense has the nickname of Asa Gigante and they play in the Campeonato Brasileiro Série C league in Brazil.,"(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | nickname | ""Asa Gigante \'\'"")
(Campeonato_Brasileiro_Série_C | country | Brazil)","(""Agremiação Sportiva Arapiraquense"" | ""nickname"" | ""Asa Gigante""),
(""Agremiação Sportiva Arapiraquense"" | ""playsIn"" | ""Campeonato Brasileiro Série C""),
(""Campeonato Brasileiro Série C"" | ""location"" | ""Brazil"")"
284,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","McVeagh of the South Seas was directed by Gregory Allen, produced by the Progressive Motion Picture Company and distributed by Alliance Films Corporation.","(McVeagh_of_the_South_Seas | director | Gregory_Allen)
(McVeagh_of_the_South_Seas | producer | The_Progressive_Motion_Picture_Company)
(McVeagh_of_the_South_Seas | distributor | Alliance_Films_Corporation)","(""McVeagh of the South Seas"" | ""director"" | ""Gregory Allen""),
(""McVeagh of the South Seas"" | ""producer"" | ""Progressive Motion Picture Company""),
(""McVeagh of the South Seas"" | ""distributor"" | ""Alliance Films Corporation""),
(""Gregory Allen"" | ""directed"" | ""McVeagh of the South Seas""),
(""Progressive Motion Picture Company"" | ""produced"" | ""McVeagh of the South Seas""),
(""Alliance Films Corporation"" | ""distributed"" | ""McVeagh of the South Seas"")"
285,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",1147 Stavropolis has an orbital period of 1249.6 days and an absolute magnitude of 11.5.,"(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | absoluteMagnitude | 11.5)","(""1147 Stavropolis"" | ""hasOrbitalPeriod"" | ""1249.6 days"")
(""1147 Stavropolis"" | ""hasAbsoluteMagnitude"" | ""11.5"")"
286,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Honeymoon Killers is associated with the Pussy Galore.,(The_Honeymoon_Killers_(American_band) | associatedBand/associatedMusicalArtist | Pussy_Galore_(band)),"(""The Honeymoon Killers"" | ""is associated with"" | ""Pussy Galore"")"
287,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The pop rock Mermaid song by Train with runtime of 3 minutes and 16 seconds was released on twenty seventh of December 2012 by the Sony Music Entertainment and Columbia record labels.,"(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)
(Mermaid_(Train_song) | releaseDate | 2012-12-27)","(""Mermaid song"" | type | ""pop rock"")
(""Mermaid song"" | artist | ""Train"")
(""Mermaid song"" | hasRuntime | ""3 minutes and 16 seconds"")
(""Mermaid song"" | releaseDate | ""twenty seventh of December 2012"")
(""Mermaid song"" | releasedBy | ""Sony Music Entertainment"")
(""Mermaid song"" | releasedBy | ""Columbia record labels"")
(""Train"" | hasSong | ""Mermaid song"")
(""Sony Music Entertainment"" | hasRelease | ""Mermaid song"")
(""Columbia record labels"" | hasRelease | ""Mermaid song"")"
288,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The timezone of Ciudad Ayala led by City Manager is the Pacific Standard Time Zone.,"(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | timeZone | Pacific_Standard_Time_Zone)","(""Ciudad Ayala"" | ""timezone"" | ""Pacific Standard Time Zone"")
(""Ciudad Ayala"" | ""leader"" | ""City Manager"")"
289,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aleksandr Prudnikov plays for FC Amkar Perm and is a member of the youth side of FC Spartak Moscow. The home ground of FC Spartak Moscow is Otkrytiye Arena. Prudnikov is 185 cm. tall.,"(Aleksandr_Prudnikov | club | FC_Amkar_Perm)
(Aleksandr_Prudnikov | height | 185.0 (centimetres))
(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(FC_Spartak_Moscow | ground | Otkrytiye_Arena)","(""Aleksandr Prudnikov"" | ""playsFor"" | ""FC Amkar Perm"")
(""Aleksandr Prudnikov"" | ""memberOf"" | ""Youth side of FC Spartak Moscow"")
(""FC Spartak Moscow"" | ""hasMember"" | ""Aleksandr Prudnikov"")
(""FC Spartak Moscow"" | ""homeGround"" | ""Otkrytiye Arena"")
(""Aleksandr Prudnikov"" | ""height"" | ""185 cm"")"
290,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Harry Carey, an actor born in 1878, had a role in the movie McVeagh of the South Seas.",(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878)),"(""Harry Carey"" | ""type"" | ""Actor"")
(""Harry Carey"" | ""birthYear"" | 1878)
(""McVeagh of the South Seas"" | ""type"" | ""Movie"")
(""Harry Carey"" | ""actedIn"" | ""McVeagh of the South Seas"")"
291,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Train song by Mermaid is form the pop rock genre, a subgenre of indie pop.","(Mermaid_(Train_song) | genre | Pop_rock)
(Pop_rock | musicSubgenre | Indie_pop)","(""The Train song"" | ""hasCreator"" | ""Mermaid""),
(""The Train song"" | ""genre"" | ""pop rock""),
(""pop rock"" | ""subGenreOf"" | ""indie pop""),
(""The Train song"" | ""genre"" | ""indie pop"")."
292,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was born in Karlsruhe on May 2nd, 1908.","(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | birthDate | 1908-05-02)","(Liselotte Grschebina | birthPlace | Karlsruhe)
(Liselotte Grschebina | birthDate | ""May 2nd, 1908"")"
293,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brandon Carter graduated from the University of Cambridge which is known as a research University.,"(Brandon_Carter | almaMater | University_of_Cambridge)
(University_of_Cambridge | type | Research_university)","(""Brandon Carter"" | education | ""University of Cambridge"")
(""University of Cambridge"" | type | ""research university"")
(""Brandon Carter"" | alumni | ""University of Cambridge"")"
294,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aleksandr Prudnikov was born on February 24, 1989 and currently plays for FC Terek Grozny which is based at Grozny. His current club is FC Amkar Perm which is managed by Gadzhi Gadzhiyev.","(FC_Terek_Grozny | ground | Grozny)
(Aleksandr_Prudnikov | currentclub | FC_Amkar_Perm)
(FC_Amkar_Perm | manager | Gadzhi_Gadzhiyev)
(Aleksandr_Prudnikov | club | FC_Terek_Grozny)
(Aleksandr_Prudnikov | birthDate | 1989-02-24)","(Aleksandr Prudnikov | birthDate | February 24, 1989)
(Aleksandr Prudnikov | playsFor | FC Terek Grozny)
(Aleksandr Prudnikov | playsFor | FC Amkar Perm)
(FC Terek Grozny | basedAt | Grozny)
(FC Amkar Perm | managedBy | Gadzhi Gadzhiyev)"
295,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, also known as Olga Nikolaevna Bondareva, graduated from Leningrad State University. She was known for the Bondareva-Shapley Theorem and later died in Saint Petersburg.","(Olga_Bondareva | deathPlace | Saint_Petersburg)
(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")
(Olga_Bondareva | almaMater | Leningrad_State_University)","(Olga Bondareva | also known as | Olga Nikolaevna Bondareva)
(Olga Bondareva | graduated from | Leningrad State University)
(Olga Bondareva | was known for | Bondareva-Shapley Theorem)
(Olga Bondareva | died in | Saint Petersburg)"
296,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Velvet Underground has been active since 1964.,(The_Velvet_Underground | activeYearsStartYear | 1964-01-01),"(""The Velvet Underground"" | ""has been active since"" | 1964)"
297,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Categorised as a Contributing Property, the 11th Mississippi Infantry Monument was established in 2000. It is located in the Adams County, Pennsylvania, which has Frederick County, Maryland to its southwest. The monument is also placed in the municipality of Gettysburg in Pennsylvania. The Adams County has Carroll County, Maryland to its southeast and Cumberland county to its north.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSouthwest | Frederick_County,_Maryland)
(11th_Mississippi_Infantry_Monument | municipality | Gettysburg,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)
(Adams_County,_Pennsylvania | hasToItsNorth | Cumberland_County,_Pennsylvania)","(""11th Mississippi Infantry Monument"" | ""type"" | ""Contributing Property"")
(""11th Mississippi Infantry Monument"" | ""established in"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""located in"" | ""Adams County"")
(""11th Mississippi Infantry Monument"" | ""located in"" | ""Pennsylvania"")
(""11th Mississippi Infantry Monument"" | ""located in"" | ""Gettysburg"")
(""Adams County"" | ""located in"" | ""Pennsylvania"")
(""Frederick County"" | ""located in"" | ""Maryland"")
(""Adams County"" | ""borders"" | ""Frederick County"")
(""Adams County"" | ""borders"" | ""Carroll County"")
(""Adams County"" | ""borders"" | ""Cumberland county"")
(""Carroll County"" | ""located in"" | ""Maryland"")
(""Cumberland county"" | ""located in"" | ""Pennsylvania"")
(""Adams County"" | ""contains"" | ""11th Mississippi Infantry Monument"")"
298,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bionico is a dessert found in the region of Jalisco in Mexico, where the national currency is the peso.","(Mexico | currency | Mexican_peso)
(Bionico | course | Dessert)
(Bionico | region | Jalisco)
(Bionico | country | Mexico)","(""Bionico"" | ""is"" | ""dessert"") 
(""Bionico"" | ""foundIn"" | ""Jalisco"") 
(""Jalisco"" | ""locatedIn"" | ""Mexico"") 
(""Mexico"" | ""nationalCurrency"" | ""peso"")"
299,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lionsgate and the 2003 founded Roadside Attractions distributed the English-language movie Super Capers. ""eng"" is ISO 639-2 code for English.","(Super_Capers | distributor | Roadside_Attractions)
(Roadside_Attractions | foundingYear | 2003-01-01)
(Super_Capers | distributor | Lionsgate)
(Super_Capers | language | English_language)
(English_language | iso6392Code | eng)","(""Lionsgate"" | ""distributed"" | ""Super Capers"")
(""Roadside Attractions"" | ""distributed"" | ""Super Capers"")
(""Roadside Attractions"" | ""foundedIn"" | ""2003"")
(""Super Capers"" | ""language"" | ""English"")
(""eng"" | ""isISOCODEFor"" | ""English"")"
300,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bananaman, which is broadcast by the BBC based at Broadcasting House in London, starred Tim Brooke-Taylor and was last aired on April 15th, 1986.","(BBC | city | Broadcasting_House)
(Bananaman | lastAired | ""1986-04-15"")
(Bananaman | broadcastedBy | BBC)
(Bananaman | starring | Tim_Brooke-Taylor)","(""Bananaman"" | ""broadcastBy"" | ""BBC""),
(""BBC"" | ""location"" | ""Broadcasting House""),
(""Broadcasting House"" | ""city"" | ""London""),
(""Bananaman"" | ""starred"" | ""Tim Brooke-Taylor""),
(""Bananaman"" | ""lastAiredDate"" | ""April 15th, 1986"")"
301,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, or Olga Nikolaevna Bondareva, studied at Leningrad State University. She was in the field of Mathematics and Economics.","(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | professionalField | Economics)
(Olga_Bondareva | professionalField | Mathematics)","(Olga Bondareva | alias | Olga Nikolaevna Bondareva)
(Olga Bondareva | studiedAt | Leningrad State University)
(Olga Bondareva | fieldOfStudy | Mathematics)
(Olga Bondareva | fieldOfStudy | Economics)"
302,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson (January 1, 1726 - February 18, 1776) was born in Darlington, England and is of English nationality. She is the spouse of George Monson.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | deathDate | 1776-02-18)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | nationality | Kingdom_of_England)
(Lady_Anne_Monson | spouse | George_Monson)","(""Lady Anne Monson"" | ""birthdate"" | ""January 1, 1726"")
(""Lady Anne Monson"" | ""deathdate"" | ""February 18, 1776"")
(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington, England"")
(""Lady Anne Monson"" | ""nationality"" | ""English"")
(""Lady Anne Monson"" | ""spouse"" | ""George Monson"")"
303,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy a Turkish national, born on 1934-01-01 , has a residence in Istanbul.","(Nurhan_Atasoy | birthDate | 1934-01-01)
(Nurhan_Atasoy | residence | Istanbul)
(Nurhan_Atasoy | citizenship | Turkey)
(Nurhan_Atasoy | nationality | Turkish_people)","(""Nurhan Atasoy"" | ""type"" | ""Person""),
(""Nurhan Atasoy"" | ""nationality"" | ""Turkish""),
(""Nurhan Atasoy"" | ""birthDate"" | ""1934-01-01""),
(""Nurhan Atasoy"" | ""residence"" | ""Istanbul"")"
304,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The album Let it Breed was followed by the album Turn Me On which was itself followed by the album Take It Off!. Take it Off! is an EP in the noise rock genre which was produced by Wharton Tiers.,"(Take_It_Off! | genre | Noise_rock)
(Take_It_Off! | producer | Wharton_Tiers)
(Turn_Me_On_(album) | precededBy | Let_It_Breed)
(Turn_Me_On_(album) | followedBy | Take_It_Off!)","(""Let it Breed"" | ""followedBy"" | ""Turn Me On"")
(""Turn Me On"" | ""followedBy"" | ""Take It Off!"")
(""Take It Off!"" | ""type"" | ""EP"")
(""Take It Off!"" | ""partOfGenre"" | ""noise rock"")
(""Take It Off!"" | ""producedBy"" | ""Wharton Tiers"")"
305,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","MotorSport Vision, founded in 2004, operates the Bedford Aerodrome which has a runway surface made of concrete.","(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | runwaySurfaceType | Concrete)
(MotorSport_Vision | foundingYear | 2004)","(""MotorSport Vision"" | ""foundedIn"" | ""2004"")

(""MotorSport Vision"" | ""operates"" | ""Bedford Aerodrome"")

(""Bedford Aerodrome"" | ""hasSurfaceMaterial"" | ""concrete"")"
306,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adolfo Suárez Madrid–Barajas Airport is located in Alcobendas. This airport is operated by ENAIRE, which is located in Madrid. The runway is named 18R/36L and has a length of 4,349 meters. The airport is situated 610 meters above the sea level.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 4349.0)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayName | ""18R/36L"")","(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""hasOperator"" | ""ENAIRE"")
(""ENAIRE"" | ""location"" | ""Madrid"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""hasRunway"" | ""18R/36L"")
(""18R/36L"" | ""hasLength"" | ""4,349 meters"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""hasAltitude"" | ""610 meters"")"
307,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The University of Burgundy is located in the city of Dijon.,(University_of_Burgundy | city | Dijon),(University of Burgundy | is located in | Dijon)
308,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva is a United states citizen who is a professional in the mathematical optimization field. She is also known for Stochastic programming, and his alma mater is Humboldt University.","(Darinka_Dentcheva | citizenship | United_States)
(Darinka_Dentcheva | professionalField | Mathematical_optimization)
(Darinka_Dentcheva | knownFor | Stochastic_programming)
(Darinka_Dentcheva | almaMater | Humboldt_University)","(Darinka Dentcheva | nationality | ""United States"")
(Darinka Dentcheva | profession | ""mathematical optimization professional"")
(Darinka Dentcheva | field | ""mathematical optimization"")
(Darinka Dentcheva | knownFor | ""Stochastic programming"")
(Darinka Dentcheva | almaMater | ""Humboldt University"")"
309,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The currency of Mexico, where the local people are called Mexicans, is the peso. Bionico is a dessert containing raisins, which can be found in Guadalajara there and another type of dessert is Sandesh.","(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Bionico | region | Guadalajara)
(Bionico | ingredient | Raisin)
(Dessert | dishVariation | Sandesh_(confectionery))
(Bionico | country | Mexico)","(""Mexico"" | ""currency"" | ""peso"")
(""Mexico"" | ""demonym"" | ""Mexicans"")
(""Guadalajara"" | ""isIn"" | ""Mexico"")
(""Bionico"" | ""isTypeOf"" | ""dessert"")
(""Bionico"" | ""containsIngredient"" | ""raisins"")
(""Bionico"" | ""canBeFoundIn"" | ""Guadalajara"")
(""Sandesh"" | ""isTypeOf"" | ""dessert"")"
310,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","J. R. R. Tolkien, born on January 3rd, 1892 wrote Fellowship of the Ring, released on July 29, 1954. It was released after the Hobbit.","(The_Fellowship_of_the_Ring | author | J._R._R._Tolkien)
(J._R._R._Tolkien | birthDate | 1892-01-03)
(The_Fellowship_of_the_Ring | releaseDate | 1954-07-29)
(The_Fellowship_of_the_Ring | precededBy | The_Hobbit)","(J. R. R. Tolkien | birthDate | January 3rd, 1892)
(J. R. R. Tolkien | wrote | Fellowship of the Ring)
(Fellowship of the Ring | releaseDate | July 29, 1954)
(Fellowship of the Ring | wasReleasedAfter | the Hobbit)"
311,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","It's Great to Be Young, a 1956 film, was edited by Max Benedict.","(""It's_Great_to_Be_Young_(1956_film) | editing | Max_Benedict"")","(""It's Great to Be Young"" | type | ""Film""),
(""It's Great to Be Young"" | releaseYear | ""1956""),
(""It's Great to Be Young"" | editedBy | ""Max Benedict""), 
(""Max Benedict"" | type | ""Person""), 
(""Max Benedict"" | jobRole | ""Editor"")"
312,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Bootleg Series Volume 1: The Quine Tapes was recorded under the Universal Music Group record label whereas Music group the Velvet Underground and the record label Polydor Records released it.,"(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Polydor_Records)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Universal_Music_Group)","(""The Bootleg Series Volume 1: The Quine Tapes"" | ""recordLabel"" | ""Universal Music Group"")
(""The Bootleg Series Volume 1: The Quine Tapes"" | ""release"" | ""Velvet Underground"")
(""The Bootleg Series Volume 1: The Quine Tapes"" | ""release"" | ""Polydor Records"")
(""Velvet Underground"" | ""release"" | ""The Bootleg Series Volume 1: The Quine Tapes"")
(""Polydor Records"" | ""release"" | ""The Bootleg Series Volume 1: The Quine Tapes"")"
313,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nurhan Atasoy resides in Istanbul.,(Nurhan_Atasoy | residence | Istanbul),"(""Nurhan Atasoy"" | ""resides in"" | ""Istanbul"")"
314,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Industrial rock is a derivative of noise rock.,(Noise_rock | derivative | Industrial_rock),"(""Industrial rock"" | ""is a derivative of"" | ""noise rock"")"
315,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was born on May 2, 1908, has Israeli nationality, studied at the School of Applied Arts in Stuttgart and died in Israel on June 14, 1994.","(Liselotte_Grschebina | deathPlace | Israel)
(Liselotte_Grschebina | nationality | Israel)
(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)
(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | birthDate | 1908-05-02)","(Liselotte Grschebina | birthDate | May 2, 1908)
(Liselotte Grschebina | nationality | Israeli)
(Liselotte Grschebina | studiedAt | School of Applied Arts in Stuttgart)
(Liselotte Grschebina | deathPlace | Israel)
(Liselotte Grschebina | deathDate | June 14, 1994)"
316,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva is an economist and famous mathematician known for the Bondareva-Shapley theorem. She graduated from Leningrad State University, passing away on December 9th, 1991.","(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | professionalField | Economics)
(Olga_Bondareva | professionalField | Mathematics)
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | deathDate | 1991-12-09)","(Olga Bondareva | type | economist)
(Olga Bondareva | type | mathematician)
(Olga Bondareva | knownFor | Bondareva-Shapley theorem)
(Bondareva-Shapley theorem | knownFor | Olga Bondareva)
(Olga Bondareva | graduatedFrom | Leningrad State University)
(Leningrad State University | alumni | Olga Bondareva)
(Olga Bondareva | deathDate | December 9th, 1991)"
317,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Artist Brian Kelly, who is a composer & pianist, created the album Expect a Miracle which was preceded by the album Pools of Light. Expect a Miracle is in the instrumental music genre and has a runtime of 54.56 minutes.","(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | precededBy | Pools_of_Light_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Instrumental_music)","(Brian Kelly | type | Artist)
(Brian Kelly | profession | Composer)
(Brian Kelly | profession | Pianist)
(Brian Kelly | created | Expect a Miracle)
(Expect a Miracle | type | Album)
(Expect a Miracle | preceded by | Pools of Light)
(Pools of Light | type | Album)
(Expect a Miracle | genre | Instrumental Music)
(Expect a Miracle | runtime | 54.56 minutes)"
318,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The long name for the Philippines is called the Republic of the Philippines.,"(Philippines | longName | ""Republic of the Philippines"")","(""Philippines"" | ""hasLongName"" | ""Republic of the Philippines"")"
319,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The movie ""Super Capers"" had a budget of 2000000.0 dollars.",(Super_Capers | budget | 2000000.0),"(""Super Capers"" | budget | 2000000.0 dollars)"
320,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The College of William and Mary, in the United States, is home to the Robert A.M. Stern designed Alan B. Miller Hall which houses the Mason School of Business at 101 Ukrop Way.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Mason_School_of_Business | country | United_States)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""The College of William and Mary"" | ""location"" | ""United States"")
(""The College of William and Mary"" | ""includes"" | ""Alan B. Miller Hall"")
(""Alan B. Miller Hall"" | ""designed by"" | ""Robert A.M. Stern"")
(""Alan B. Miller Hall"" | ""houses"" | ""Mason School of Business"")
(""Alan B. Miller Hall"" | ""located at"" | ""101 Ukrop Way"")
(""Mason School of Business"" | ""part of"" | ""The College of William and Mary"")"
321,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Sludge metal originated from the hardcore punk genre.,(Sludge_metal | stylisticOrigin | Hardcore_punk),"(""Sludge metal"" | ""originated from"" | ""hardcore punk genre"")"
322,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina was an Israeli national who died in Israel. The population density of Israel is 387.63 people per square kilometre of land area.,"(Liselotte_Grschebina | deathPlace | Israel)
(Israel | populationDensity | 387.63)
(Liselotte_Grschebina | nationality | Israel)","(Liselotte Grschebina | nationality | Israel)
(Liselotte Grschebina | deathPlace | Israel)
(Israel | populationDensity | 387.63 people per square kilometre of land area)"
323,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Year of No Light album Nord belongs to the post-metal genre whereas Cello belongs to the post-metal instrument.,"(Nord_(Year_of_No_Light_album) | genre | Post-metal)
(Post-metal | instrument | Cello)","(""Nord"" | ""type"" | ""album"")
(""Nord"" | ""creator"" | ""Year of No Light"")
(""Year of No Light"" | ""album"" | ""Nord"")
(""Nord"" | ""genre"" | ""post-metal"")
(""Cello"" | ""type"" | ""musical instrument"")
(""Cello"" | ""genre"" | ""post-metal"")"
324,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Writers of English Without Tears, Anatole de Grunwald and Terence Rattigan, died in London and Hamilton, Bermuda, respectively.","(English_Without_Tears | writer | Anatole_de_Grunwald)
(Terence_Rattigan | deathPlace | Hamilton,_Bermuda)
(Anatole_de_Grunwald | deathPlace | London)
(English_Without_Tears | writer | Terence_Rattigan)","(""English Without Tears"" | dbo:author | ""Anatole de Grunwald"")
(""English Without Tears"" | dbo:author | ""Terence Rattigan"")
(""Anatole de Grunwald"" | dbo:deathPlace | ""London"")
(""Terence Rattigan"" | dbo:deathPlace | ""Hamilton, Bermuda"")"
325,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Hobbit was published by George Allen & Unwin.,(The_Hobbit | publisher | George_Allen_&_Unwin),"(""The Hobbit"" | ""publisher"" | ""George Allen & Unwin"")"
326,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Turkey, which uses the lira as its national currency, was the birthplace of Nurhan Atasoy who is a Turkish citizen. The largest city in Turkey is Istanbul.","(Turkey | largestCity | Istanbul)
(Nurhan_Atasoy | nationality | Turkish_people)
(Turkey | currency | Turkish_lira)
(Nurhan_Atasoy | birthPlace | Turkey)","(""Turkey"" | ""uses"" | ""lira"")
(""Nurhan Atasoy"" | ""citizenship"" | ""Turkey"")
(""Nurhan Atasoy"" | ""birthPlace"" | ""Turkey"")
(""Turkey"" | ""hasLargestCity"" | ""Istanbul"")"
327,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Harold French directed the 89 minutes movie English Without Tears which was written by Anatole de Grunwald. Nicholas Brodszky composed the music for the movie which was released on 28th July 1944.,"(English_Without_Tears | runtime | 89.0)
(English_Without_Tears | musicComposer | Nicholas_Brodszky)
(English_Without_Tears | releaseDate | 1944-07-28)
(English_Without_Tears | director | Harold_French)
(English_Without_Tears | writer | Anatole_de_Grunwald)","(""Harold French"" | ""directed"" | ""English Without Tears"")
(""English Without Tears"" | ""hasDuration"" | ""89 minutes"")
(""English Without Tears"" | ""writtenBy"" | ""Anatole de Grunwald"")
(""Nicholas Brodszky"" | ""composedMusicFor"" | ""English Without Tears"")
(""English Without Tears"" | ""releaseDate"" | ""28th July 1944"")"
328,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The extended play song, 'Til Death Do Us Part came after Take It Off!","(""Take_It_Off! | followedBy | 'Til_Death_Do_Us_Part_(EP)"")","('Til Death Do Us Part | type | extended play song)
(Take It Off | precedes | 'Til Death Do Us Part)"
329,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Bedford Aerodrome (located in Thurleigh) serves the Bedford Autodrome. The ICAO location identifier for the Bedford Aerodrome is EGBF.,"(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | location | Thurleigh)
(Bedford_Aerodrome | icaoLocationIdentifier | EGBF)","(""Bedford Aerodrome"" | ""location"" | ""Thurleigh"")
(""Bedford Aerodrome"" | ""serves"" | ""Bedford Autodrome"")
(""Bedford Aerodrome"" | ""ICAO location identifier"" | ""EGBF"")"
330,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiação Sportiva Arapiraquense club has 170000 members, played in 2015 and play in the Campeonato Brasileiro Série C league which Vila Nova Futebol Clube are the champions of.","(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | season | 2015)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)","(""Agremiação Sportiva Arapiraquense"" | ""hasMembers"" | 170000)
(""Agremiação Sportiva Arapiraquense"" | ""playedInYear"" | 2015)
(""Agremiação Sportiva Arapiraquense"" | ""participatesIn"" | ""Campeonato Brasileiro Série C"")
(""Campeonato Brasileiro Série C"" | ""hasChampion"" | ""Vila Nova Futebol Clube"")
(""Vila Nova Futebol Clube"" | ""isChampionOf"" | ""Campeonato Brasileiro Série C"")"
331,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Turkish city of Istanbul has a metropolitan area of 5,343 km².",(Istanbul | areaMetro | 5343000000.0),"(Istanbul | type | City)
(Istanbul | isPartOf | Turkey)
(Istanbul | areaTotal | 5343 km²)
"
332,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The album Expect a Miracle was created by composer and pianist Brian Kelly. It's an easy listening collection in the instrumental music genre.,"(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | genre | Instrumental_music)
(Expect_a_Miracle | genre | Easy_listening)
(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))","(""Expect a Miracle"" | ""creator"" | ""Brian Kelly"")
(""Brian Kelly"" | ""profession"" | ""composer"")
(""Brian Kelly"" | ""profession"" | ""pianist"")
(""Expect a Miracle"" | ""type"" | ""album"")
(""Expect a Miracle"" | ""genre"" | ""instrumental music"")
(""Expect a Miracle"" | ""genre"" | ""easy listening"")"
333,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The United States has a total area of 9833520000000.,(United_States | areaTotal | 9833520000000.0),"(""United States"" | ""hasTotalArea"" | 9833520000000)"
334,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva (United states Citizen) lives in New York city, the largest city in the United States as an American.","(Darinka_Dentcheva | residence | United_States)
(United_States | largestCity | New_York_City)
(Darinka_Dentcheva | citizenship | United_States)
(United_States | demonym | American)","(Darinka Dentcheva | type | United states Citizen)
(Darinka Dentcheva | livesIn | New York city)
(New York city | type | city)
(New York city | inCountry | United States)
(New York city | status | largest city)
(Darinka Dentcheva | nationality | American)"
335,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adolfo Suárez Madrid–Barajas Airport is found in San Sebastián de los Reyes. ENAIRE is the operating organisation for this airport, which is situated 610 meters above sea level.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | San_Sebastián_de_los_Reyes)","(""Adolfo Suárez Madrid–Barajas Airport"" | ""is found in"" | ""San Sebastián de los Reyes""),
(""Adolfo Suárez Madrid–Barajas Airport"" | ""is operated by"" | ""ENAIRE""),
(""Adolfo Suárez Madrid–Barajas Airport"" | ""is situated"" | 610),
(""Adolfo Suárez Madrid–Barajas Airport"" | ""unit of elevation"" | ""meters above sea level"")"
336,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The production team Stargate is associated with the musical artist Michael Jackson.,(Stargate_(production_team) | associatedBand/associatedMusicalArtist | Michael_Jackson),"(""Stargate"" | ""associatedWith"" | ""Michael Jackson""),
(""Michael Jackson"" | ""associatedWith"" | ""Stargate""), 
(""Stargate"" | ""type"" | ""Production Team""), 
(""Michael Jackson"" | ""type"" | ""Musical Artist"")"
337,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala is a city that uses a type of government called council-manager government, and one of the leaders is the City Manager.","(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | type | City)
(Ciudad_Ayala | governmentType | Council-manager_government)","(""Ciudad Ayala"" | ""type"" | ""city"")
(""Ciudad Ayala"" | ""uses"" | ""council-manager government"")
(""Ciudad Ayala"" | ""leader"" | ""City Manager"")"
338,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Grigory Neujmin discovered 1147 Stavropolis and the orbital period of the asteroid 1147 Stavropolis is 1249.6 days.,"(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | discoverer | Grigory_Neujmin)","(""Grigory Neujmin"" | ""discovered"" | ""1147 Stavropolis"")
(""1147 Stavropolis"" | ""discoveredBy"" | ""Grigory Neujmin"")
(""1147 Stavropolis"" | ""orbitalPeriod"" | ""1249.6 days"")"
339,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina is of Israeli nationality and was born in the German Empire. Israel's national language is Modern Hebrew.,"(Liselotte_Grschebina | nationality | Israel)
(Liselotte_Grschebina | birthPlace | German_Empire)
(Israel | language | Modern_Hebrew)","(""Liselotte Grschebina"" | ""nationality"" | ""Israeli"")
(""Liselotte Grschebina"" | ""place of birth"" | ""German Empire"")
(""Israel"" | ""national language"" | ""Modern Hebrew"")"
340,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Asian-American is one of the ethnic groups in the United States.,(United_States | ethnicGroup | Asian_American),"(""Asian-American"" | ""typeOf"" | ""ethnic groups"")
(""Asian-American"" | ""location"" | ""United States"")"
341,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Velvet Underground recorded the album Bootleg Series Volume 1: The Quine Tapes in St. Louis, Missouri, USA. The album Bootleg Series Volume 1: The Quine Tapes were released under the rock genre. Its length is 230:05 minutes, and the group also served as its producer.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | United_States)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | St._Louis,_Missouri)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | genre | Rock_music)","(The Velvet Underground | recorded in | St. Louis, Missouri, USA)
(The Velvet Underground | recorded | Bootleg Series Volume 1: The Quine Tapes)
(Bootleg Series Volume 1: The Quine Tapes | album by | The Velvet Underground)
(Bootleg Series Volume 1: The Quine Tapes | release location | St. Louis, Missouri, USA)
(Bootleg Series Volume 1: The Quine Tapes | genre | rock)
(Bootleg Series Volume 1: The Quine Tapes | length | 230:05 minutes)
(The Velvet Underground | producer of | Bootleg Series Volume 1: The Quine Tapes)"
342,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument, which is categorised as a contributing property, is located in Adams County, Pennsylvania with Carroll County Maryland to the southeast.","(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | state | ""Pennsylvania"")
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""11th Mississippi Infantry Monument"" | ""type"" | ""contributing property"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Adams County, Pennsylvania"")
(""Adams County, Pennsylvania"" | ""has geographical relation"" | ""Carroll County Maryland"")
(""Carroll County Maryland"" | ""is located"" | ""to the southeast of Adams County, Pennsylvania"")"
343,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Akeem Ayers began his NFL career with the Tennessee Titans, however, he no longer plays for them.","(Akeem_Ayers | debutTeam | Tennessee_Titans)
(Akeem_Ayers | formerTeam | Tennessee_Titans)","(Akeem Ayers | began career with | Tennessee Titans)
(Akeem Ayers | NFL career | true)
(Akeem Ayers | plays for | Tennessee Titans)
(Tennessee Titans | former player | Akeem Ayers)
(Akeem Ayers | no longer plays for | Tennessee Titans)"
344,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Trane company is a subsidiary founded in La Crosse Wisconsin on 1913-01-01. Their industry is building materials, and they produce HVAC. Currently based in Ireland, they employ 29,000 people.","(Trane | type | Subsidiary)
(Trane | foundingDate | 1913-01-01)
(Trane | location | Ireland)
(Trane | foundationPlace | La_Crosse,_Wisconsin)
(Trane | numberOfEmployees | 29000)
(Trane | product | HVAC)
(Trane | industry | Building_materials)","(""Trane company"" | ""foundingDate"" | ""1913-01-01"")
(""Trane company"" | ""foundingLocation"" | ""La Crosse Wisconsin"")
(""Trane company"" | ""type"" | ""subsidiary"")
(""Trane company"" | ""industry"" | ""building materials"")
(""Trane company"" | ""product"" | ""HVAC"")
(""Trane company"" | ""location"" | ""Ireland"")
(""Trane company"" | ""numberOfEmployees"" | ""29,000"")"
345,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The vice chancellor at the University of Cambridge is Leszek Borysiewicz.,(University_of_Cambridge | viceChancellor | Leszek_Borysiewicz),"(""University of Cambridge"" | ""viceChancellor"" | ""Leszek Borysiewicz"")
(""Leszek Borysiewicz"" | ""isViceChancellorAt"" | ""University of Cambridge"")"
346,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina is an Israeli national born in Karlsruhe on May 2, 1908, who did her studies at the School of Applied Arts in Stuttgart and died in Israel on June 14, 1994.","(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | deathPlace | Israel)
(Liselotte_Grschebina | nationality | Israel)
(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)","(""Liselotte Grschebina"" | ""type"" | ""Person"")
(""Liselotte Grschebina"" | ""birthPlace"" | ""Karlsruhe"")
(""Liselotte Grschebina"" | ""birthdate"" | ""May 2, 1908"")
(""Liselotte Grschebina"" | ""nationality"" | ""Israeli"")
(""Liselotte Grschebina"" | ""education"" | ""School of Applied Arts in Stuttgart"")
(""Liselotte Grschebina"" | ""deathdate"" | ""June 14, 1994"")
(""Liselotte Grschebina"" | ""deathPlace"" | ""Israel"")"
347,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Agremiação Sportiva Arapiraquense play in the Campeonato Brasileiro Série C league. They have 17000 members. They were crowned the league champions back in 2015 but Vila Nova Futebol Clube are the current champions.,"(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Agremiação_Sportiva_Arapiraquense | season | 2015_Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)","(Agremiação Sportiva Arapiraquense | league | Campeonato Brasileiro Série C)
(Agremiação Sportiva Arapiraquense | hasMembers | 17000)
(Agremiação Sportiva Arapiraquense | won | league champions)
(Agremiação Sportiva Arapiraquense | year | 2015)
(Vila Nova Futebol Clube | is | current champions)"
348,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan B Miller Hall was completed on June 1,2009 and architected by Robert A M Stern. Alan B. Miller hall is owned by the College of Mary and William.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | completionDate | 2009-06-01)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""Alan B Miller Hall"" | ""completionDate"" | ""June 1, 2009"")
(""Alan B Miller Hall"" | ""architect"" | ""Robert A M Stern"")
(""Alan B Miller Hall"" | ""owner"" | ""College of Mary and William"")"
349,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was born in Karlsruhe and died in Israel, which has the ethic group, Arabs and the Israeli Jews.","(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | deathPlace | Israel)
(Israel | ethnicGroup | Arab_citizens_of_Israel)
(Israel | ethnicGroup | Israeli_Jews)","(""Liselotte Grschebina"" | ""birthPlace"" | ""Karlsruhe"")
(""Liselotte Grschebina"" | ""deathPlace"" | ""Israel"")
(""Israel"" | ""ethnicGroup"" | ""Arabs"")
(""Israel"" | ""ethnicGroup"" | ""Israeli Jews"")"
350,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson, the spouse of George Monson, professional botanist, and former resident of the Kingdom of England as a British national, was born in Darlington but resided in India for most of her life.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | nationality | Kingdom_of_England)
(Lady_Anne_Monson | residence | India)
(Lady_Anne_Monson | spouse | George_Monson)
(Lady_Anne_Monson | professionalField | Botany)","(""Lady Anne Monson"" | ""spouse of"" | ""George Monson""),
(""George Monson"" | ""profession"" | ""botanist""),
(""Lady Anne Monson"" | ""nationality"" | ""British""),
(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington""),
(""Lady Anne Monson"" | ""residence"" | ""India""),
(""Lady Anne Monson"" | ""former resident of"" | ""Kingdom of England"")"
351,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aleksandr Prudnikov plays for FC Amkar Perm managed by Gadzhi Gadzhiyev. He also played for FC Spartak Moscow's youth team.,"(Aleksandr_Prudnikov | club | FC_Amkar_Perm)
(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(FC_Amkar_Perm | manager | Gadzhi_Gadzhiyev)
(Aleksandr_Prudnikov | currentclub | FC_Amkar_Perm)","(Aleksandr Prudnikov | playsFor | FC Amkar Perm)
(FC Amkar Perm | managedBy | Gadzhi Gadzhiyev)
(Aleksandr Prudnikov | playedFor | FC Spartak Moscow's youth team)"
352,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy in Dijon, France has 16800 undergraduate students, and 9400 postgraduate students.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | campus | Dijon)
(University_of_Burgundy | city | Dijon)
(University_of_Burgundy | numberOfPostgraduateStudents | 9400)
(University_of_Burgundy | country | France)","(""University of Burgundy"" | ""location"" | ""Dijon, France"")
(""University of Burgundy"" | ""hasUndergraduateStudents"" | 16800)
(""University of Burgundy"" | ""hasPostgraduateStudents"" | 9400)"
353,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala has a population density of 1604, a UTC offset of -6, a government type of council-manager, and a leader title in the city is called the City Manager.","(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | governmentType | Council-manager_government)
(Ciudad_Ayala | utcOffset | −6)","(""Ciudad Ayala"" | ""populationDensity"" | 1604)
(""Ciudad Ayala"" | ""utcOffset"" | -6)
(""Ciudad Ayala"" | ""governmentType"" | ""council-manager"")
(""Ciudad Ayala"" | ""leaderTitle"" | ""City Manager"")"
354,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The American band, the Honeymoon Killers, self-produced a punk blues album called Turn Me On, which has a run time of 35.1 minutes.","(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | genre | Punk_blues)
(Turn_Me_On_(album) | producer | The_Honeymoon_Killers_(American_band))","(""the Honeymoon Killers"" | ""type"" | ""American band"")
(""the Honeymoon Killers"" | ""produce"" | ""Turn Me On"")
(""Turn Me On"" | ""type"" | ""punk blues album"")
(""Turn Me On"" | ""producedBy"" | ""the Honeymoon Killers"")
(""Turn Me On"" | ""runtime"" | ""35.1 minutes"")"
355,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala is a city with population density of 1604.0. 1,777,539 people live in the metropolitan area of Ciudad Ayala in UTC offset -6 time zone. City Manager is one of the leaders of the city.","(Ciudad_Ayala | populationMetro | 1777539)
(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | type | City)
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | utcOffset | −6)","(""Ciudad Ayala"" | ""type"" | ""city""),
(""Ciudad Ayala"" | ""populationDensity"" | 1604.0),
(""metropolitan area of Ciudad Ayala"" | ""population"" | 1777539),
(""metropolitan area of Ciudad Ayala"" | ""isPartOf"" | ""Ciudad Ayala""),
(""Ciudad Ayala"" | ""timeZone"" | ""UTC offset -6""),
(""City Manager"" | ""leaderOf"" | ""Ciudad Ayala"")"
356,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nicholas Brodszky's music was used in English Without Tears, an 89 minute film edited by Alan Jaggs.","(English_Without_Tears | runtime | 89.0)
(English_Without_Tears | musicComposer | Nicholas_Brodszky)
(English_Without_Tears | editing | Alan_Jaggs)","(""Nicholas Brodszky"" | ""music used in"" | ""English Without Tears""),
(""English Without Tears"" | ""runtime"" | ""89 minutes""),
(""English Without Tears"" | ""edited by"" | ""Alan Jaggs"")"
357,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala is in the Pacific Standard Time Zone and is led by Juan Nolasco.,"(Ciudad_Ayala | timeZone | Pacific_Standard_Time_Zone)
(Ciudad_Ayala | leader | Juan_Nolasco)","(""Ciudad Ayala"" | ""is in"" | ""Pacific Standard Time Zone""),
(""Ciudad Ayala"" | ""is led by"" | ""Juan Nolasco"")"
358,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiação Sportiva Arapiraquense has 17000 members, play in the Campeonato Brasileiro Série C league and play at the ground of Estádio Municipal Coaracy da Mata Fonseca.","(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(Agremiação Sportiva Arapiraquense | hasMembers | 17000)
(Agremiação Sportiva Arapiraquense | playIn | Campeonato Brasileiro Série C)
(Agremiação Sportiva Arapiraquense | playAt | Estádio Municipal Coaracy da Mata Fonseca)"
359,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Darinka Dentcheva lives in New Jersey where the primary language spoken is English.,"(Darinka_Dentcheva | residence | New_Jersey)
(New_Jersey | language | English_language)","(Darinka Dentcheva | livesIn | New Jersey)
(New Jersey | languageSpoken | English)"
360,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology, located in India is affiliated with the Belgaum University, Visvesvaraya Technological University.","(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Visvesvaraya_Technological_University | city | Belgaum)
(Acharya_Institute_of_Technology | country | ""India"")","(Acharya Institute of Technology | location | India)
(Acharya Institute of Technology | affiliation | Belgaum University)
(Acharya Institute of Technology | affiliation | Visvesvaraya Technological University)"
361,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Rageous was both first produced and last produced in the year 1997 on the assembly line in Detroit, Michigan.","(Pontiac_Rageous | productionStartYear | 1997)
(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | assembly | Detroit)
(Pontiac_Rageous | productionEndYear | 1997)","(""Pontiac Rageous"" | ""first produced"" | ""1997""),
(""Pontiac Rageous"" | ""last produced"" | ""1997""),
(""Pontiac Rageous"" | ""location of production"" | ""Detroit""),
(""Pontiac Rageous"" | ""location of production"" | ""Michigan""),
(""Detroit"" | ""is in"" | ""Michigan"")"
362,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Danielle Harris had a main role in the movie Super Capers which was directed by Ray Griggs and had 98 minutes duration.,"(Super_Capers | starring | Danielle_Harris)
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | runtime | 98.0)","(Danielle Harris | hadRoleIn | Super Capers)
(Super Capers | directedBy | Ray Griggs)
(Super Capers | duration | 98 minutes)"
363,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Michigan has a total area of 250493000000.0 square kilometers.,(Michigan | areaTotal | 250493000000.0),(Michigan | totalArea | 250493000000.0)
364,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Trane was founded on 1913-01-01 and employed 29000 people.,"(Trane | foundingDate | 1913-01-01)
(Trane | numberOfEmployees | 29000)","(""Trane"" | ""foundingDate"" | ""1913-01-01"")
(""Trane"" | ""numberOfEmployees"" | ""29000"")"
365,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Brian Kelly album Expect a Miracle (runtime: 54.56 minutes) was preceded by the album Pools of Lights and followed by the album Afterplay.,"(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | precededBy | Pools_of_Light_(Brian_Kelly_album))
(Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album))","(""Brian Kelly"" | ""type"" | ""Person"")
(""Expect a Miracle"" | ""type"" | ""Album"")
(""Expect a Miracle"" | ""creator"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""runtime"" | ""54.56 minutes"")
(""Pools of Lights"" | ""type"" | ""Album"")
(""Pools of Lights"" | ""creator"" | ""Brian Kelly"")
(""Afterplay"" | ""type"" | ""Album"")
(""Afterplay"" | ""creator"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""precededBy"" | ""Pools of Lights"")
(""Expect a Miracle"" | ""followedBy"" | ""Afterplay"")"
366,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Super Capers budget was 2000000.,(Super_Capers | budget | 2000000.0),"(""Super Capers"" | ""budget"" | 2000000)"
367,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument was established in 2000 in the municipality of Gettysburg, Adams County, Pennsylvania.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | municipality | Gettysburg,_Pennsylvania)","(""11th Mississippi Infantry Monument"" | ""establishmentYear"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Gettysburg"")
(""Gettysburg"" | ""isIn"" | ""Adams County"")
(""Adams County"" | ""isIn"" | ""Pennsylvania"")"
368,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina died in Petah Tikva and has Israeli nationality. Israel's full name is the State of Israel has a population density of 387.63.,"(Israel | populationDensity | 387.63)
(Liselotte_Grschebina | deathPlace | Petah_Tikva)
(Israel | longName | ""State of Israel"")
(Liselotte_Grschebina | nationality | Israel)","(""Liselotte Grschebina"" | ""deathPlace"" | ""Petah Tikva""),
(""Liselotte Grschebina"" | ""nationality"" | ""Israeli""),
(""Israel"" | ""officialName"" | ""the State of Israel""),
(""Israel"" | ""populationDensity"" | 387.63)"
369,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Squeeze was preceded by the album Andy Warhol's Velvet Underground Featuring Nico.,"(""Squeeze_(The_Velvet_Underground_album) | precededBy | Andy_Warhol's_Velvet_Underground_Featuring_Nico"")","(""Squeeze"" | ""precededBy"" | ""Andy Warhol's Velvet Underground Featuring Nico""),
(""Andy Warhol's Velvet Underground Featuring Nico"" | ""followedBy"" | ""Squeeze"")"
370,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Expect a Miracle is an instrumental and easy listening album produced by Brian Kelly. The album has a runtime of 54 minutes and 56 seconds. Brian Kelly's next album was Afterplay.,"(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | genre | Instrumental_music)
(Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Easy_listening)","(""Expect a Miracle"" | type | ""album"")
(""Expect a Miracle"" | genre | ""instrumental"")
(""Expect a Miracle"" | genre | ""easy listening"")
(""Expect a Miracle"" | producer | ""Brian Kelly"")
(""Expect a Miracle"" | runtime | ""54 minutes and 56 seconds"")
(""Brian Kelly"" | produces | ""Expect a Miracle"")
(""Brian Kelly"" | hasNextAlbum | ""Afterplay"")"
371,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The campus of the Acharya Institute of Technology is located at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090, India was established in the year 2000 and it is affiliated with the Visvesvaraya Technological University.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | established | 2000)
(Acharya_Institute_of_Technology | country | ""India"")","(Acharya Institute of Technology | location | Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090, India)
(Acharya Institute of Technology | establishedYear | 2000)
(Acharya Institute of Technology | affiliation | Visvesvaraya Technological University)"
372,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nie Haisheng, from the People's Republic of China, was born on October 13, 1964, in Zaoyang and was a fighter pilot.","(Nie_Haisheng | birthPlace | Zaoyang)
(""Nie_Haisheng | nationality | People's_Republic_of_China)
(Nie_Haisheng | birthDate | 1964-10-13)
(Nie_Haisheng | occupation | Fighter_pilot)","(Nie Haisheng | nationality | People's Republic of China)
(Nie Haisheng | birthDate | October 13, 1964)
(Nie Haisheng | birthPlace | Zaoyang)
(Nie Haisheng | occupation | fighter pilot)"
373,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina was of Israeli nationality and was born in the German Empire. Israel's national language is Modern Hebrew.,"(Liselotte_Grschebina | nationality | Israel)
(Liselotte_Grschebina | birthPlace | German_Empire)
(Israel | language | Modern_Hebrew)","(""Liselotte Grschebina"" | ""nationality"" | ""Israeli"")  
(""Liselotte Grschebina"" | ""place of birth"" | ""German Empire"")  
(""Israel"" | ""national language"" | ""Modern Hebrew"")"
374,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, born in Leningrad, USSR on the date April 27, 1937 as Olga Nikolaevna Bondareva, is known for the Bondareva-Shapley theorem and died in Saint Petersburg.","(Olga_Bondareva | deathPlace | Saint_Petersburg)
(Olga_Bondareva | birthPlace | Leningrad,_USSR)
(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")","(Olga Bondareva | birthPlace | Leningrad, USSR)
(Olga Bondareva | birthDate | April 27, 1937)
(Olga Bondareva | birthName | Olga Nikolaevna Bondareva)
(Olga Nikolaevna Bondareva | knownFor | Bondareva-Shapley theorem)
(Olga Bondareva | deathPlace | Saint Petersburg)"
375,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Acharya Institute of Technology can be found in India and has an address of Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | country | ""India"")","(Acharya Institute of Technology | location | India)
(Acharya Institute of Technology | address | ""Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090"")"
376,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Composer and pianist Brian Kelly produced the compilation album Expect a Miracle (runtime 54:56 minutes).,"(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | type | Compilation_Album)","(Brian Kelly | type | Composer)
(Brian Kelly | type | Pianist)
(Brian Kelly | produced | Expect a Miracle)
(Expect a Miracle | type | Compilation album)
(Expect a Miracle | runtime | 54:56 minutes)"
377,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Pontiac manufactured the Pontiac Rageous on their assembly line in Detroit, Michigan.","(Pontiac_Rageous | assembly | Detroit)
(Detroit | isPartOf | Michigan)
(Pontiac_Rageous | manufacturer | Pontiac)","(""Pontiac"" | ""manufactured"" | ""Pontiac Rageous""),
(""Pontiac Rageous"" | ""manufactured by"" | ""Pontiac""),
(""Pontiac Rageous"" | ""location of manufacturing"" | ""Detroit, Michigan""),
(""Pontiac"" | ""location of manufacturing"" | ""Detroit, Michigan"")"
378,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",IMDB id of McVeagh of the South Seas is 0004319. The film was written and acted by Harry Carey born in 1878. McVeagh of the South Seas movie was produced by Progressive Motion Picture Company and directed by Cyril Bruce.,"(McVeagh_of_the_South_Seas | imdbId | 0004319)
(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | writer | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | producer | The_Progressive_Motion_Picture_Company)
(McVeagh_of_the_South_Seas | director | Cyril_Bruce)","(""McVeagh of the South Seas"" | ""IMDB id"" | ""0004319"")
(""Harry Carey"" | ""birth year"" | ""1878"")
(""Harry Carey"" | ""writer of"" | ""McVeagh of the South Seas"")
(""Harry Carey"" | ""actor in"" | ""McVeagh of the South Seas"")
(""McVeagh of the South Seas"" | ""produced by"" | ""Progressive Motion Picture Company"")
(""McVeagh of the South Seas"" | ""directed by"" | ""Cyril Bruce"")"
379,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The campus address for the Acharya Institute of Technology is: Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090, India and it is affiliated with the Visvesvaraya Technological University. It was established in the year 2000.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | established | 2000)
(Acharya_Institute_of_Technology | country | ""India"")","(""Acharya Institute of Technology"" | ""address"" | ""Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090, India"")
(""Acharya Institute of Technology"" | ""affiliated with"" | ""Visvesvaraya Technological University"")
(""Acharya Institute of Technology"" | ""established in"" | ""the year 2000"")"
380,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Saint Petersburg is a city in the country of Russia.,(Saint_Petersburg | country | Russia),"(Saint Petersburg | type | City)
(Saint Petersburg | isLocatedIn | Russia)
(Russia | type | Country)
(Russia | hasCity | Saint Petersburg)"
381,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Grigory Neujmin, born Jan 1, 1886 in Tbilisi, discovered the 1147 Stavropolis which has an orbital period of 1249.6 and a periapsis of 260855000000.0.","(1147_Stavropolis | discoverer | Grigory_Neujmin)
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)
(Grigory_Neujmin | birthPlace | Tbilisi)
(Grigory_Neujmin | birthDate | 1886-01-01)","(Grigory Neujmin | birthDate | ""Jan 1, 1886"")
(Grigory Neujmin | birthPlace | Tbilisi)
(Grigory Neujmin | discovered | 1147 Stavropolis)
(1147 Stavropolis | hasOrbitalPeriod | 1249.6)
(1147 Stavropolis | hasPeriapsis | 260855000000.0)"
382,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Vila Nova Futebol Clube are the champions of Campeonato Brasileiro Serie C league played by Agremiacao Sportiva Arapiraquense. The club has 17000 members and their ground is Estadio Municipal Coaracy da Mata Fonseca located in Arapiraca.,"(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(Vila Nova Futebol Clube | title | ""champions"")
(Vila Nova Futebol Clube | competition | Campeonato Brasileiro Serie C)
(Vila Nova Futebol Clube | opponent | Agremiacao Sportiva Arapiraquense)
(Vila Nova Futebol Clube | numberOfMembers | 17000)
(Vila Nova Futebol Clube | ground | Estadio Municipal Coaracy da Mata Fonseca)
(Estadio Municipal Coaracy da Mata Fonseca | location | Arapiraca)"
383,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Saint Petersburg is located in the country of Russia.,(Saint_Petersburg | country | Russia),(Saint Petersburg | location | Russia)
384,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala, a part of Morelos, is located in Mexico. The UTC offset of Morelos is minus six.","(Morelos | utcOffset | −6)
(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | country | Mexico)","(""Ciudad Ayala"" | ""partOf"" | ""Morelos""),
(""Ciudad Ayala"" | ""isLocatedIn"" | ""Mexico""),
(""Morelos"" | ""isLocatedIn"" | ""Mexico""),
(""Morelos"" | ""UTCTimeOffset"" | ""-6"")"
385,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Olga Bondareva’s birth name was Olga Nikolaevna Bondareva. She was a student at Leningrad State University and was known for the Bondareva-Shapley Theorum. She later died in St. Petersburg.,"(Olga_Bondareva | deathPlace | Saint_Petersburg)
(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")
(Olga_Bondareva | almaMater | Leningrad_State_University)","(Olga Bondareva | birth name | ""Olga Nikolaevna Bondareva"")
(Olga Bondareva | student of | Leningrad State University)
(Olga Bondareva | known for | Bondareva-Shapley Theorem)
(Olga Bondareva | death place | St. Petersburg)"
386,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Train song Mermaid was produced by the production team Espionage.,(Mermaid_(Train_song) | producer | Espionage_(production_team)),"(""Mermaid"" | type | ""song"")
(""Mermaid"" | creator | ""Train"")
(""Mermaid"" | producedBy | ""Espionage"")
(""Espionage"" | type | ""production team"")"
387,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aaron Turner is a singer who played with the band Twilight.,"(Aaron_Turner | instrument | Singing)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))","(Aaron Turner | type | Singer)
(Aaron Turner | playedWith | Twilight)
(Twilight | type | Band)"
388,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The film Super Capers, starring Justin Whalin, is 98.0 minutes long. While the budget was 2,000,000, the film's gross income was $30,955.","(Super_Capers | budget | 2000000.0)
(Super_Capers | starring | Justin_Whalin)
(Super_Capers | runtime | 98.0)
(Super_Capers | gross | 30955.0)","(""Super Capers"" | starring | ""Justin Whalin"")
(""Super Capers"" | runtime| 98.0)
(""Super Capers"" | budget | 2000000)
(""Super Capers"" | gross income | 30955)"
389,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Train song by Mermaid is from the pop rock genre has a length of 3 minutes and 16 seconds.,"(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | runtime | 3.16)","(""The Train song"" | isCreatedBy | ""Mermaid""),
(""The Train song"" | genre | ""pop rock""),
(""The Train song"" | hasLength | ""3 minutes and 16 seconds"")"
390,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Turn Me On, a punk blues album produced by The Honeymoon Killers, has a total length of 35 minutes 10 seconds.","(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | genre | Punk_blues)
(Turn_Me_On_(album) | producer | The_Honeymoon_Killers_(American_band))","(""Turn Me On"" | rdf:type | ""Album"")
(""Turn Me On"" | dbo:genre | ""Punk Blues"")
(""Turn Me On"" | dbo:producer | ""The Honeymoon Killers"")
(""Turn Me On"" | dbo:totalDuration | ""35 minutes 10 seconds"")"
391,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Terence Rattigan died in Hamilton.,"(Terence_Rattigan | deathPlace | Hamilton,_Bermuda)","(""Terence Rattigan"" | ""deathPlace"" | ""Hamilton"")
(""Terence Rattigan"" | ""deathDate"" | literal)"
392,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Michael Rooker was born in Jasper, Alabama.","(Michael_Rooker | birthPlace | Jasper,_Alabama)","(""Michael Rooker"" | ""birthPlace"" | ""Jasper, Alabama"")
(""Michael Rooker"" | ""birthLocation"" | ""Jasper, Alabama"")"
393,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Abraham A. Ribicoff was born in Connecticut, the United States and his wife is Casey Ribicoff.","(Abraham_A._Ribicoff | spouse | Casey_Ribicoff)
(Abraham_A._Ribicoff | nationality | American)
(Abraham_A._Ribicoff | birthPlace | Connecticut)","(Abraham A. Ribicoff | was born in | Connecticut, the United States)
(Abraham A. Ribicoff | spouse | Casey Ribicoff)"
394,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The location of Trane is in Ireland.,(Trane | location | Ireland),"(""Trane"" | ""location"" | ""Ireland"")"
395,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aleksandr Prudnikov was born on 24th February 1989 and played for FC Terek Grozny located in Grozny and managed by Rashid Rakhimov. Aleksandr Prudnikov currently plays for FC Amkar Perm.,"(FC_Terek_Grozny | ground | Grozny)
(Aleksandr_Prudnikov | currentclub | FC_Amkar_Perm)
(Aleksandr_Prudnikov | club | FC_Terek_Grozny)
(Aleksandr_Prudnikov | birthDate | 1989-02-24)
(FC_Terek_Grozny | manager | Rashid_Rakhimov)","(Aleksandr Prudnikov | birthDate | ""24th February 1989"")
(Aleksandr Prudnikov | playedFor | FC Terek Grozny)
(FC Terek Grozny | location | Grozny)
(FC Terek Grozny | manager | Rashid Rakhimov)
(Aleksandr Prudnikov | playsFor | FC Amkar Perm)"
396,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brandon Carter is a professional in the field of general relativity has a doctoral advisor named Dennis William Sciama.,"(Brandon_Carter | professionalField | General_relativity)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)","(""Brandon Carter"" | ""type"" | ""Person"")
(""Brandon Carter"" | ""profession"" | ""General Relativity Professional"")
(""Brandon Carter"" | ""doctoralAdvisor"" | ""Dennis William Sciama"")
(""Dennis William Sciama"" | ""type"" | ""Person"")"
397,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was born on November 18, 1923 in New Hampshire and his nationality was the United States. He later died in California, whom Dianne Feinstein represented as the Senator.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)
(California | senators | Dianne_Feinstein)","(""Alan Shepard"" | ""birthDate"" | ""November 18, 1923"")
(""Alan Shepard"" | ""birthPlace"" | ""New Hampshire"")
(""Alan Shepard"" | ""nationality"" | ""United States"")
(""Alan Shepard"" | ""deathPlace"" | ""California"")
(""Dianne Feinstein"" | ""position"" | ""Senator"")
(""Dianne Feinstein"" | ""representation"" | ""California"")"
398,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The architect of the Alan B Miller Hall in the USA is Robert A M Stern and the current tenants are The Mason School of Business. The Hall is located at 101 Ukrop Way and is owned by The College of William and Mary.,"(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Mason_School_of_Business | country | United_States)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""Alan B Miller Hall"" | ""architect"" | ""Robert A M Stern""),
(""Alan B Miller Hall"" | ""country"" | ""USA""),
(""Alan B Miller Hall"" | ""tenant"" | ""The Mason School of Business""),
(""Alan B Miller Hall"" | ""address"" | ""101 Ukrop Way""),
(""Alan B Miller Hall"" | ""owner"" | ""The College of William and Mary""),
(""The Mason School of Business"" | ""location"" | ""Alan B Miller Hall""),
(""The College of William and Mary"" | ""owns"" | ""Alan B Miller Hall"")"
399,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","English Without Tears is a film directed by Harold French. Story was written by Anatole de Grunwald, and music was composed by Nicholas Brodszky. Its duration is 89 minutes long and it was released in 1944-07-28.","(English_Without_Tears | runtime | 89.0)
(English_Without_Tears | musicComposer | Nicholas_Brodszky)
(English_Without_Tears | releaseDate | 1944-07-28)
(English_Without_Tears | director | Harold_French)
(English_Without_Tears | writer | Anatole_de_Grunwald)","(""English Without Tears"" | ""type"" | ""Film"")
(""English Without Tears"" | ""director"" | ""Harold French"")
(""English Without Tears"" | ""writer"" | ""Anatole de Grunwald"")
(""English Without Tears"" | ""musicComposer"" | ""Nicholas Brodszky"")
(""English Without Tears"" | ""duration"" | 89 (unit: minutes))
(""English Without Tears"" | ""releaseDate"" | ""1944-07-28"")"
400,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aleksandr Prudnikov currently plays for the FC Amkar Perm football club and his height is 185.0 centimeters. His youth football club was FC Spartak Moscow.,"(Aleksandr_Prudnikov | club | FC_Amkar_Perm)
(Aleksandr_Prudnikov | height | 185.0 (centimetres))
(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(Aleksandr_Prudnikov | currentclub | FC_Amkar_Perm)","(Aleksandr Prudnikov | currently plays for | FC Amkar Perm football club)
(Aleksandr Prudnikov | has height | ""185.0 centimeters"")
(Aleksandr Prudnikov | youth football club was | FC Spartak Moscow)"
401,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva was born on April 27, 1937 and attended Leningrad State University. She worked in the field of economics and died on 9th of December 1991.","(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | deathDate | 1991-12-09)
(Olga_Bondareva | professionalField | Economics)","(Olga Bondareva | birthDate | ""April 27, 1937"")
(Olga Bondareva | birthPlace | Leningrad State University)
(Olga Bondareva | occupation | economics)
(Olga Bondareva | deathDate | ""December 9, 1991"")"
402,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng (born 10/13/1964) is a fighter pilot who participated in the Shenzhou 6 mission.,"(Nie_Haisheng | mission | Shenzhou_6)
(Nie_Haisheng | birthDate | 1964-10-13)
(Nie_Haisheng | occupation | Fighter_pilot)","(""Nie Haisheng"" | ""type"" | ""Human"")
(""Nie Haisheng"" | ""birthDate"" | ""10/13/1964"")
(""Nie Haisheng"" | ""occupation"" | ""Fighter pilot"")
(""Nie Haisheng"" | ""participated in"" | ""Shenzhou 6"")
(""Shenzhou 6"" | ""type"" | ""Mission"")
(""Shenzhou 6"" | ""participant"" | ""Nie Haisheng"")"
403,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The 94 minute It's Great to Be Young is a 1956 film directed by Cyril Frankel written by Ted Willis.,"(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | director | Cyril_Frankel)
(""It's_Great_to_Be_Young_(1956_film) | writer | Ted_Willis"")","(""It's Great to Be Young"" | duration | ""94 minutes"")
(""It's Great to Be Young"" | releaseYear | ""1956"")
(""It's Great to Be Young"" | directedBy | ""Cyril Frankel"")
(""It's Great to Be Young"" | writtenBy | ""Ted Willis"")
(""Cyril Frankel"" | direct | ""It's Great to Be Young"")
(""Ted Willis"" | wrote | ""It's Great to Be Young"")"
404,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bananaman starring Bill Oddie and broadcasted by BBC first aired on 3rd October 1983. BBC was founded by John Reith, 1st Baron Reith, and has its location at the Broadcasting House.","(BBC | city | Broadcasting_House)
(Bananaman | starring | Bill_Oddie)
(BBC | foundedBy | John_Reith,_1st_Baron_Reith)
(Bananaman | broadcastedBy | BBC)
(Bananaman | firstAired | ""1983-10-03"")","(""Bananaman"" | ""starring"" | ""Bill Oddie"")
(""Bananaman"" | ""broadcasted by"" | ""BBC"")
(""Bananaman"" | ""air date"" | ""3rd October 1983"")
(""BBC"" | ""founded by"" | ""John Reith, 1st Baron Reith"")
(""BBC"" | ""location"" | ""Broadcasting House"")"
405,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ted Willis wrote the 1956 film It's Great to be Young in which John Mills played the leading role and Cecil Parker had a main role. Both Juliet Mills and Hayley Mills are Children of John Mills.,"(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(John_Mills | child | Juliet_Mills)
(""It's_Great_to_Be_Young_(1956_film) | starring | Cecil_Parker)
(John_Mills | child | Hayley_Mills)
(""It's_Great_to_Be_Young_(1956_film) | writer | Ted_Willis"")","(Ted Willis | wrote | It's Great to be Young)
(It's Great to be Young | releaseYear | 1956)
(It's Great to be Young | stars | John Mills)
(John Mills | actedIn | It's Great to be Young)
(It's Great to be Young | stars | Cecil Parker)
(Cecil Parker | actedIn | It's Great to be Young)
(John Mills | hasChild | Juliet Mills)
(John Mills | hasChild | Hayley Mills)
(Juliet Mills | parent | John Mills)
(Hayley Mills | parent | John Mills)"
406,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy was born in Turkey which has a total land area of 783,356.0 km^2.","(Turkey | areaTotal | 783356.0)
(Nurhan_Atasoy | birthPlace | Turkey)","(""Nurhan Atasoy"" | ""place of birth"" | ""Turkey"")
(""Turkey"" | ""total land area"" | 783356.0)"
407,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard, an American born in New Hampshire, died in California.","(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)","(Alan Shepard | type | American)
(Alan Shepard | place of birth | New Hampshire)
(Alan Shepard | place of death | California)"
408,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, a mathematician, was born on April 27, 1937 and died on 9th of December, 1991. She was an economist.","(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | deathDate | 1991-12-09)
(Olga_Bondareva | professionalField | Economics)
(Olga_Bondareva | professionalField | Mathematics)","(Olga Bondareva | type | Mathematician)
(Olga Bondareva | type | Economist)
(Olga Bondareva | birthDate | ""April 27, 1937"")
(Olga Bondareva | deathDate | ""December 9, 1991"")"
409,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1147 Stavropolis, which has an orbital period of 1249.6 days and a periapsis of 260855000000.0, had its epoch on July 31, 2016.","(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))
(1147_Stavropolis | orbitalPeriod | 1249.6)","(""1147 Stavropolis"" | ""hasOrbitalPeriod"" | ""1249.6 days"")
(""1147 Stavropolis"" | ""hasPeriapsis"" | ""260855000000.0"")
(""1147 Stavropolis"" | ""hasEpoch"" | ""July 31, 2016"")"
410,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nurhan Atasoy was born in Tokat Province in Reşadiye.,"(Nurhan_Atasoy | birthPlace | Reşadiye)
(Reşadiye | isPartOf | Tokat_Province)","(""Nurhan Atasoy"" | ""born in"" | ""Tokat Province"")
(""Nurhan Atasoy"" | ""born in"" | ""Reşadiye"")"
411,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Piotr Hallmann was born on August 25, 1987, in Gdynia, Poland which has a UTC of +02:00.","(Piotr_Hallmann | birthDate | 1987-08-25)
(Piotr_Hallmann | birthPlace | Gdynia,_Poland)
(Gdynia,_Poland | utcOffset | +2)","(Piotr Hallmann | birthDate | ""August 25, 1987"")
(Piotr Hallmann | birthPlace | Gdynia)
(Piotr Hallmann | nationality | Poland)
(Gdynia | country | Poland)
(Gdynia | UTC | +02:00)"
412,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina was born within the German Empire and died in Petah Tikva. The German Empire's anthem is Die Wacht Am Rhein.,"(Liselotte_Grschebina | birthPlace | German_Empire)
(German_Empire | anthem | Die_Wacht_am_Rhein)
(Liselotte_Grschebina | deathPlace | Petah_Tikva)","(Liselotte Grschebina | place of birth | German Empire)
(Liselotte Grschebina | place of death | Petah Tikva)
(German Empire | anthem | Die Wacht Am Rhein)"
413,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Bedford Aerodrome is 83.2104 above sea level and has a runway made out of concrete.,"(Bedford_Aerodrome | elevationAboveTheSeaLevel | 83.2104)
(Bedford_Aerodrome | runwaySurfaceType | Concrete)","(Bedford Aerodrome | elevation | 83.2104)
(Bedford Aerodrome | hasRunway | Runway)
(Runway | madeOutOf | concrete)"
414,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nurhan Atasoy was born in the Tokat Province in Reşadiye.,"(Nurhan_Atasoy | birthPlace | Reşadiye)
(Reşadiye | isPartOf | Tokat_Province)","(""Nurhan Atasoy"" | ""birthPlace"" | ""Tokat Province"")
(""Nurhan Atasoy"" | ""birthPlace"" | ""Reşadiye"")"
415,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The movie English Without Tears is Written by Anatole de Grunwald and Terence Rattigan. Rattigan can be found in the IMDb under the I.D. of 0711905. The cinematographer of this film is Bernard Knowles.,"(English_Without_Tears | cinematography | Bernard_Knowles)
(Terence_Rattigan | imdbId | 0711905)
(English_Without_Tears | writer | Anatole_de_Grunwald)
(English_Without_Tears | writer | Terence_Rattigan)","(English Without Tears | writtenBy | Anatole de Grunwald)
(English Without Tears | writtenBy | Terence Rattigan)
(Terence Rattigan | IMDbID | 0711905)
(English Without Tears | cinematographer | Bernard Knowles)"
416,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was born within the German Empire however she now has Israeli nationality. Israel, where Israelis live, is led by the Prime Minister and has a population density of 387.63.","(Israel | leaderTitle | ""Prime Minister"")
(Liselotte_Grschebina | nationality | Israel)
(Israel | populationDensity | 387.63)
(Liselotte_Grschebina | birthPlace | German_Empire)","(Liselotte Grschebina | birthPlace | German Empire)
(Liselotte Grschebina | nationality | Israel)
(Israel | countryFor | Israelis)
(Israel | leaderTitle | Prime Minister)
(Israel | populationDensity | 387.63)"
417,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan B. Miller Hall, owned by the College of William and Mary, was designed by Robert A.M. Stern and completed on June 1, 2009.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | completionDate | 2009-06-01)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(Alan B. Miller Hall | ownedBy | College of William and Mary)
(Alan B. Miller Hall | designedBy | Robert A.M. Stern)
(Alan B. Miller Hall | completionDate | ""June 1, 2009"")"
418,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Adolfo Suárez Madrid–Barajas Airport in Alcobendas (operated by ENAIRE in Madrid), located 610.0 metres above sea level, has a runway named 18L/36R that is 4,349 metres long.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 4349.0)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayName | ""18L/36R"")","(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""operated by"" | ""ENAIRE"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""situated in"" | ""Madrid"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""altitude"" | 610.0)
(""Adolfo Suárez Madrid–Barajas Airport"" | ""has runway"" | ""18L/36R"")
(""18L/36R"" | ""is part of"" | ""Adolfo Suárez Madrid–Barajas Airport"")
(""18L/36R"" | ""length"" | 4349)"
419,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Louis Levy was born on 20.11.1894.,(Louis_Levy | birthDate | 1894-11-20),"(""Louis Levy"" | ""birthDate"" | ""1894-11-20"")"
420,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The standardized nomenclature for the English language according to the ISO 639-1 code is ""en"".",(English_language | iso6391Code | en),"(""the standardized nomenclature for the English language"" | ""according to"" | ""the ISO 639-1 code"")
(""the ISO 639-1 code"" | ""is"" | ""en"")"
421,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers is a 98 minute film that is distributed by Roadside Attractions and Lionsgate. The director is Ray Griggs and the main star actor is Justin Whalin. The movie only made $30,955 and they had a budget of $2,000,000.","(Super_Capers | distributor | Roadside_Attractions)
(Super_Capers | distributor | Lionsgate)
(Super_Capers | budget | 2000000.0)
(Super_Capers | starring | Justin_Whalin)
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | runtime | 98.0)
(Super_Capers | gross | 30955.0)","(""Super Capers"" | ""runtime"" | ""98 minutes"")
(""Super Capers"" | ""distributedBy"" | ""Roadside Attractions"")
(""Super Capers"" | ""distributedBy"" | ""Lionsgate"")
(""Super Capers"" | ""director"" | ""Ray Griggs"")
(""Super Capers"" | ""starring"" | ""Justin Whalin"")
(""Super Capers"" | ""gross"" | ""$30,955"")
(""Super Capers"" | ""budget"" | ""$2,000,000"")"
422,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The City Manager is a leader of Ciudad Ayala with a population density of 1604.0.,"(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | populationDensity | 1604.0)","(""City Manager"" | ""positionType"" | ""leader"")
(""City Manager"" | ""leadershipRole"" | ""Ciudad Ayala"")
(""Ciudad Ayala"" | ""hasLeader"" | ""City Manager"")
(""Ciudad Ayala"" | ""populationDensity"" | 1604.0)"
423,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala is in the Pacific Standard Time Zone, and City Manager is the leader title for Ciudad Ayala.","(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | timeZone | Pacific_Standard_Time_Zone)","(""Ciudad Ayala"" | ""location"" | ""Pacific Standard Time Zone""),
(""City Manager"" | ""title"" | ""Leader of Ciudad Ayala""),
(""Ciudad Ayala"" | ""leader"" | ""City Manager"")"
424,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nie Haisheng (born on 13th October, 1964) was part of the mission Shenzhou 10.","(Nie_Haisheng | mission | Shenzhou_10)
(Nie_Haisheng | birthDate | 1964-10-13)","(""Nie Haisheng"" | ""birthDate"" | ""13th October, 1964"")
(""Nie Haisheng"" | ""partOf"" | ""Shenzhou 10"")"
425,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Thurleigh is in the country of United Kingdom.,(Thurleigh | country | United_Kingdom),"(""Thurleigh"" | ""isInCountry"" | ""United Kingdom"")"
426,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Mermaid is a song belonging to the musical band Train and released on the Columbia Records record label.,"(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | recordLabel | Columbia_Records)","(""Mermaid"" | ""type"" | ""song"")
(""Mermaid"" | ""belongsTo"" | ""Train"")
(""Train"" | ""type"" | ""musical band"")
(""Mermaid"" | ""releasedOn"" | ""Columbia Records"")
(""Columbia Records"" | ""type"" | ""record label"")"
427,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adolfo Suarez Madrid-Barajas Airport, operated by Madrid-based ENAIRE, is located in Alcobendas, Spain. The airport is 610.0 metres above sea level; its runway length is 4349.0.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 4349.0)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Alcobendas | country | Spain)","(""Adolfo Suarez Madrid-Barajas Airport"" | ""operator"" | ""ENAIRE"")
(""ENAIRE"" | ""location"" | ""Madrid"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""location"" | ""Alcobendas, Spain"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""elevationAboveSeaLevel"" | ""610.0 metres"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""runwayLength"" | ""4349.0"")"
428,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Dennis William Sciama was the doctoral advisor of Brandon Carter.,(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama),(Dennis William Sciama | doctoral advisor of | Brandon Carter)
429,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard's birth place was New Hampshire. He died in California, on 21st of July,1998.","(Alan_Shepard | deathPlace | California)
(Alan_Shepard | deathDate | ""1998-07-21"")
(Alan_Shepard | birthPlace | New_Hampshire)","(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | deathPlace | California)
(Alan Shepard | deathDate | 21st of July,1998)"
430,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Abraham A. Ribicoff was born in the United States which is home to the ethnic group, African Americans.","(Abraham_A._Ribicoff | birthPlace | United_States)
(United_States | ethnicGroup | African_Americans)","(""Abraham A. Ribicoff"" | ""birthPlace"" | ""United States"")
(""United States"" | ""ethnicGroup"" | ""African Americans"")"
431,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy is located in Dijon, France. The campus is home to 2900 staff members who oversee the education of 27400 students. The university serves 16800 undergraduate students and 1299 doctoral students.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfStudents | 27400)
(University_of_Burgundy | numberOfDoctoralStudents | 1299)
(University_of_Burgundy | campus | Dijon)
(University_of_Burgundy | city | Dijon)
(University_of_Burgundy | country | France)","(""University of Burgundy"" | ""location"" | ""Dijon, France"")
(""University of Burgundy"" | ""staffCount"" | 2900)
(""University of Burgundy"" | ""studentCount"" | 27400)
(""University of Burgundy"" | ""undergraduateStudentCount"" | 16800)
(""University of Burgundy"" | ""doctoralStudentCount"" | 1299)"
432,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Morelos is in time zone UTC−6.,(Morelos | utcOffset | −6),"(""Morelos"" | ""timeZone"" | ""UTC−6"")"
433,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aaron Turner a singer and musician born in Boston started performing in 1995 in the Lotus Eaters band in post-metal genre.,"(Aaron_Turner | genre | Post-metal)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Lotus_Eaters_(band))
(Aaron_Turner | instrument | Singing)
(Aaron_Turner | activeYearsStartYear | 1995)
(Aaron_Turner | origin | Boston)","(""Aaron Turner"" | ""type"" | ""singer"")
(""Aaron Turner"" | ""type"" | ""musician"")
(""Aaron Turner"" | ""birthPlace"" | ""Boston"")
(""Aaron Turner"" | ""startYear"" | ""1995"")
(""Lotus Eaters"" | ""type"" | ""band"")
(""Aaron Turner"" | ""memberOf"" | ""Lotus Eaters"")
(""Lotus Eaters"" | ""genre"" | ""post-metal"")"
434,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy campus, located in Dijon, has 16800 undergraduate students and 1299 doctoral students.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | numberOfDoctoralStudents | 1299)
(University_of_Burgundy | campus | Dijon)
(University_of_Burgundy | city | Dijon)","(""University of Burgundy"" | ""location"" | ""Dijon"")
(""University of Burgundy"" | ""hasUndergraduateStudents"" | 16800)
(""University of Burgundy"" | ""hasDoctoralStudents"" | 1299)"
435,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Two Towers, which follows The Fellowship of the Ring was published by George Allen and Unwin.","(The_Fellowship_of_the_Ring | followedBy | The_Two_Towers)
(The_Two_Towers | publisher | George_Allen_&_Unwin)","(""The Two Towers"" | follows | ""The Fellowship of the Ring"")
(""The Two Towers"" | published by | ""George Allen and Unwin"")"
436,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was born on Nov 18, 1923, in New Hampshire, USA, and died in California. Alan Shepard went to school at NWC and graduated with an MA in 1957, became a test pilot, and was the Chief of the Astronaut Office in 1963.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | servedAsChiefOfTheAstronautOfficeIn | 1963)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | almaMater | ""NWC, M.A. 1957"")
(Alan_Shepard | occupation | Test_pilot)","(""Alan Shepard"" | ""birthDate"" | ""Nov 18, 1923"")
(""Alan Shepard"" | ""birthPlace"" | ""New Hampshire, USA"")
(""Alan Shepard"" | ""deathPlace"" | ""California"")
(""Alan Shepard"" | ""almaMater"" | ""NWC"")
(""Alan Shepard"" | ""degree"" | ""MA"")
(""Alan Shepard"" | ""graduationYear"" | ""1957"")
(""Alan Shepard"" | ""occupation"" | ""test pilot"")
(""Alan Shepard"" | ""position"" | ""Chief of the Astronaut Office"")
(""Alan Shepard"" | ""positionStartYear"" | ""1963"")"
437,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The producer of the Turn Me On album is Wharton Tiers.,(Turn_Me_On_(album) | producer | Wharton_Tiers),"(""Turn Me On album"" | ""producer"" | ""Wharton Tiers"")"
438,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Jamie Lawrence played in the club Brentford F.C.,(Jamie_Lawrence | club | Brentford_F.C.),(Jamie Lawrence | played in | Brentford F.C.)
439,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Brandon Carter was born in England on January 1st, 1942. HIs contributions to the field of general relativity were conducted under Dennis William Sciama, his doctoral advisor.","(Brandon_Carter | professionalField | General_relativity)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)
(Brandon_Carter | birthPlace | England)
(Brandon_Carter | birthDate | 1942-01-01)","(Brandon Carter | birthPlace | England)
(Brandon Carter | birthDate | ""January 1st, 1942"")
(Brandon Carter | contribution | general relativity)
(Brandon Carter | doctoralAdvisor | Dennis William Sciama)"
440,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Robert A. M. Stern is the architect for Alan B. Miller Hall which is owned by the College of William and Mary.,"(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""Robert A. M. Stern"" | profession | ""architect"")
(""Robert A. M. Stern"" | isArchitectOf | ""Alan B. Miller Hall"")
(""Alan B. Miller Hall"" | ownedBy | ""College of William and Mary"")
(""College of William and Mary"" | owns | ""Alan B. Miller Hall"")"
441,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan B. Miller Hall, in the United States, was designed by Robert A.M. Stern and is located at 101 Ukrop Way. It is the property of The College of William and Mary and The Mason School of Business are the current tenants.","(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Mason_School_of_Business | country | United_States)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""Alan B. Miller Hall"" | ""location"" | ""United States"")
(""Alan B. Miller Hall"" | ""address"" | ""101 Ukrop Way"")
(""Alan B. Miller Hall"" | ""designer"" | ""Robert A.M. Stern"")
(""Alan B. Miller Hall"" | ""owner"" | ""The College of William and Mary"")
(""The College of William and Mary"" | ""owns"" | ""Alan B. Miller Hall"")
(""Alan B. Miller Hall"" | ""tenant"" | ""The Mason School of Business"")
(""The Mason School of Business"" | ""location"" | ""Alan B. Miller Hall"")"
442,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Jamie Lawrence, player of the football club Ashford Town (Middlesex) F.C composed the music for the movie ""Death on a Factory Farm"", a film broadcasted by HBO.","(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)
(Jamie_Lawrence | club | Ashford_Town_(Middlesex)_F.C.)
(Death_on_a_Factory_Farm | broadcastedBy | HBO)","(""Jamie Lawrence"" | ""occupation"" | ""Football Player"")
(""Jamie Lawrence"" | ""memberOf"" | ""Ashford Town (Middlesex) F.C"")
(""Jamie Lawrence"" | ""composedMusicFor"" | ""Death on a Factory Farm"")
(""Death on a Factory Farm"" | ""broadcastedBy"" | ""HBO"")
(""Ashford Town (Middlesex) F.C"" | ""containsMember"" | ""Jamie Lawrence"")
(""HBO"" | ""broadcasts"" | ""Death on a Factory Farm"")"
443,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 94-minutes movie It's Great to Be Young which released in 1956 was come up with John Mills as the lead, Gilbert Taylor as cinematographer, and Louis Levy as the music composer.","(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor)
(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | musicComposer | Louis_Levy"")","(""It's Great to Be Young"" | dbo:runtime | ""94 minutes"")
(""It's Great to Be Young"" | dbo:releaseYear | ""1956"")
(""It's Great to Be Young"" | dbo:starring | ""John Mills"")
(""John Mills"" | dbo:isPartOf | ""It's Great to Be Young"")
(""It's Great to Be Young"" | dbo:cinematography | ""Gilbert Taylor"")
(""Gilbert Taylor"" | dbo:isPartOf | ""It's Great to Be Young"")
(""It's Great to Be Young"" | dbo:musicComposer | ""Louis Levy"")
(""Louis Levy"" | dbo:isPartOf | ""It's Great to Be Young"")"
444,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Morelos is a state in Mexico.,(Morelos | type | States_of_Mexico),"(""Morelos"" | ""type"" | ""state"")
(""Morelos"" | ""locatedIn"" | ""Mexico"")"
445,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiação Sportiva Arapiraquense's full name is ""Agremiação Sportiva Arapiraquense"". The team are based in Arapiraca at their home ground Estádio Municipal Coaracy da Mata Fonseca and they play in the Campeonato Brasileiro Série C league whose champion is Vila Nova Futebol Clube.","(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)
(Agremiação_Sportiva_Arapiraquense | fullName | ""Agremiação Sportiva Arapiraquense"")","(""Agremiação Sportiva Arapiraquense"" | ""name"" | ""Agremiação Sportiva Arapiraquense"")
(""Agremiação Sportiva Arapiraquense"" | ""based in"" | ""Arapiraca"")
(""Agremiação Sportiva Arapiraquense"" | ""home ground"" | ""Estádio Municipal Coaracy da Mata Fonseca"")
(""Agremiação Sportiva Arapiraquense"" | ""play in"" | ""Campeonato Brasileiro Série C"")
(""Campeonato Brasileiro Série C"" | ""champion"" | ""Vila Nova Futebol Clube"")"
446,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Frederick County Maryland is southwest of Adams County Pennsylvania, the location of the 11th Mississippi Infantry Monument, erected in 2000.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSouthwest | Frederick_County,_Maryland)","(""Frederick County Maryland"" | ""location"" | ""southwest"" )
(""Frederick County Maryland"" | ""relation"" | ""Adams County Pennsylvania"")
(""Adams County Pennsylvania"" | ""location"" | ""11th Mississippi Infantry Monument"")
(""11th Mississippi Infantry Monument"" | ""year of construction"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""located in"" | ""Adams County Pennsylvania"")"
447,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Adolfo Suárez Madrid–Barajas Airport is located in Alcobendas. This airport is operated by ENAIRE, which is located in Madrid, and has a runway length of 3,500.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)","(Adolfo Suárez Madrid–Barajas Airport | is located in | Alcobendas)
(Adolfo Suárez Madrid–Barajas Airport | is operated by | ENAIRE)
(ENAIRE | is located in | Madrid)
(Adolfo Suárez Madrid–Barajas Airport | has runway length of | ""3,500"")"
448,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","MotorSport Vision operates the Bedford Aerodrome. The runway at this aerodrome is made of concrete and is called 08/26, and its length is 1095. The aerodrome is located in Thurleigh, where it serves the Bedford Autodrome. The ICAO location identifier for the Bedford Aerodrome is EGBF.","(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | runwayLength | 1095.0)
(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | location | Thurleigh)
(Bedford_Aerodrome | icaoLocationIdentifier | EGBF)
(Bedford_Aerodrome | runwayName | ""08/26"")
(Bedford_Aerodrome | runwaySurfaceType | Concrete)","(MotorSport Vision | operates | Bedford Aerodrome)
(Bedford Aerodrome | hasRunway | 08/26)
(Runway 08/26 | hasMaterial | concrete)
(Runway 08/26 | length | 1095)
(Bedford Aerodrome | locatedIn | Thurleigh)
(Bedford Aerodrome | serves | Bedford Autodrome)
(Bedford Aerodrome | hasICAOIdentifier | EGBF)"
449,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The headquarters of the BBC is called Broadcasting House. The BBC were the broadcasters of Bananaman starring Bill Oddie, the first airing of which was on the 3rd of October, 1983.","(BBC | city | Broadcasting_House)
(Bananaman | starring | Bill_Oddie)
(Bananaman | broadcastedBy | BBC)
(Bananaman | firstAired | ""1983-10-03"")","(""BBC"" | ""headquarters"" | ""Broadcasting House"")
(""BBC"" | ""broadcasters of"" | ""Bananaman"")
(""Bananaman"" | ""star"" | ""Bill Oddie"")
(""Bananaman"" | ""first air date"" | ""3rd of October, 1983"")"
450,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala is a city with elevation that is 1147.0 above sea level. The government type of Ciudad Ayala is council-manager government and the leader's name is Juan Nolasco.,"(Ciudad_Ayala | type | City)
(Ciudad_Ayala | governmentType | Council-manager_government)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)
(Ciudad_Ayala | leader | Juan_Nolasco)","(""Ciudad Ayala"" | ""elevation"" | 1147.0)
(""Ciudad Ayala"" | ""governmentType"" | ""council-manager government"")
(""Ciudad Ayala"" | ""leader"" | ""Juan Nolasco"")"
451,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The population density of Israel is 387.63 people per square kilometre of land area and the leader title of Israel is Prime Minister. Liselotte Grschebina, born in the German Empire, is an Israeli national.","(Israel | leaderTitle | ""Prime Minister"")
(Liselotte_Grschebina | nationality | Israel)
(Israel | populationDensity | 387.63)
(Liselotte_Grschebina | birthPlace | German_Empire)","(Israel | populationDensity | 387.63)
(Israel | areaMeasure | ""square kilometre"")
(Israel | leaderTitle | ""Prime Minister"")
(Liselotte Grschebina | placeOfBirth | German Empire)
(Liselotte Grschebina | nationality | Israel)"
452,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","George Allen & Unwin published The Fellowship of the Ring, a fantasy novel that was released on July 29, 1954.","(The_Fellowship_of_the_Ring | publisher | George_Allen_&_Unwin)
(The_Fellowship_of_the_Ring | literaryGenre | Fantasy_(genre))
(The_Fellowship_of_the_Ring | releaseDate | 1954-07-29)","(""George Allen & Unwin"" | ""published"" | ""The Fellowship of the Ring""),
(""The Fellowship of the Ring"" | ""type"" | ""fantasy novel""),
(""The Fellowship of the Ring"" | ""releasedOn"" | ""July 29, 1954"")"
453,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Bootleg Series Volume I: The Quine Tapes, preceded by the album Squeeze, is an album produced and created by The Velvet Underground. The 230.05 minute album was recorded in St. Louis, Missouri in the United States.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | United_States)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | St._Louis,_Missouri)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | precededBy | Squeeze_(The_Velvet_Underground_album))","(""The Bootleg Series Volume I: The Quine Tapes"" | ""precededBy"" | ""Squeeze"")
(""The Bootleg Series Volume I: The Quine Tapes"" | ""producer"" | ""The Velvet Underground"") 
(""The Bootleg Series Volume I: The Quine Tapes"" | ""creator"" | ""The Velvet Underground"")
(""The Bootleg Series Volume I: The Quine Tapes"" | ""durationInMinutes"" | 230.05)
(""The Bootleg Series Volume I: The Quine Tapes"" | ""recordedIn"" | ""St. Louis"")
(""St. Louis"" | ""locatedIn"" | ""Missouri"")
(""Missouri"" | ""locatedIn"" | ""United States"")"
454,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The All India Council for Technical Education of Mumbai, India, was proud to give its Technical Campus status to the Acharya Institute of Technology, directed by Dr. G. Prabhukumar. The institute is affiliated with Visvesvaraya Technological University and is located in Bangalore, India at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(All_India_Council_for_Technical_Education | location | Mumbai)
(Acharya_Institute_of_Technology | director | ""Dr. G. P. Prabhukumar"")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | city | Bangalore)
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)","(All India Council for Technical Education | location | Mumbai, India)
(All India Council for Technical Education | grantStatusTo | Acharya Institute of Technology)
(Acharya Institute of Technology | director | Dr. G. Prabhukumar)
(Acharya Institute of Technology | affiliation | Visvesvaraya Technological University)
(Acharya Institute of Technology | location | Bangalore, India)
(Acharya Institute of Technology | location | Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090)
(Acharya Institute of Technology | status | Technical Campus)
"
455,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Grigory Neujmin discovered the asteroid 1147 Stavropolis on June 11th, 1929. The asteroid has an absolute magnitude of 11.5, an orbital period of 1249.6 and a rotation period of 20378.5. The apoapsis of 1147 Stavropolis is 418476000000.0 AU.","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | discoverer | Grigory_Neujmin)
(1147_Stavropolis | absoluteMagnitude | 11.5)
(1147_Stavropolis | discovered | 1929-06-11)
(1147_Stavropolis | rotationPeriod | 20378.5)","(""Grigory Neujmin"" | ""discovered"" | ""1147 Stavropolis"")
(""1147 Stavropolis"" | ""discovery date"" | ""June 11th, 1929"")
(""1147 Stavropolis"" | ""discovery method"" | ""Grigory Neujmin"")
(""1147 Stavropolis"" | ""absolute magnitude"" | 11.5)
(""1147 Stavropolis"" | ""orbital period"" | 1249.6)
(""1147 Stavropolis"" | ""rotation period"" | 20378.5)
(""1147 Stavropolis"" | ""apoapsis"" | 418476000000.0 AU)"
456,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",1147 Stavropolis epoch is 31 July 2016 (Julian Day 2457600.5). Its apoapsis is 418476000000.0; it has a periapsis of 260855000000.0. and the orbital period of the asteroid is 1249.6 days.,"(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)","(""1147 Stavropolis"" | ""hasEpoch"" | ""31 July 2016 (Julian Day 2457600.5)"")
(""1147 Stavropolis"" | ""hasApoapsis"" | 418476000000.0)
(""1147 Stavropolis"" | ""hasPeriapsis"" | 260855000000.0)
(""1147 Stavropolis"" | ""hasOrbitalPeriod"" | ""1249.6 days"")"
457,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",John Mills stars in 1956 movie It's Great to Be Young. It is 94 minutes and directed by Cyril Frankel. The cinematographer is Gilbert Taylor.,"(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor)
(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | director | Cyril_Frankel"")","(""John Mills"" | ""stars in"" | ""It's Great to Be Young"")
(""It's Great to Be Young"" | ""release year"" | ""1956"")
(""It's Great to Be Young"" | ""starring"" | ""John Mills"")
(""It's Great to Be Young"" | ""runtime"" | ""94 minutes"")
(""It's Great to Be Young"" | ""director"" | ""Cyril Frankel"")
(""Cyril Frankel"" | ""directed"" | ""It's Great to Be Young"")
(""It's Great to Be Young"" | ""cinematographer"" | ""Gilbert Taylor"")
(""Gilbert Taylor"" | ""is cinematographer of"" | ""It's Great to Be Young"")
"
458,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Let it Breed which was released by musical act The Honeymoon Killers, was followed by their self-produced album Turn Me On, produced by Wharton Tiers. Turn Me On is an album in the noise rock and punk blues genres and has a total runtime of 35.1 minutes.","(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | artist | The_Honeymoon_Killers_(American_band))
(Turn_Me_On_(album) | genre | Punk_blues)
(Turn_Me_On_(album) | producer | The_Honeymoon_Killers_(American_band))
(Turn_Me_On_(album) | genre | Noise_rock)
(Turn_Me_On_(album) | precededBy | Let_It_Breed)
(Turn_Me_On_(album) | producer | Wharton_Tiers)","(""Let it Breed"" | type | ""album"")
(""The Honeymoon Killers"" | type | ""musical act"")
(""Let it Breed"" | ""released by"" | ""The Honeymoon Killers"")
(""Turn Me On"" | type | ""album"")
(""Turn Me On"" | ""is produced by"" | ""self"")
(""Turn Me On"" | ""is produced by"" | ""Wharton Tiers"")
(""The Honeymoon Killers"" | ""produced"" | ""Turn Me On"")
(""Let it Breed"" | ""followed by"" | ""Turn Me On"")
(""Turn Me On"" | ""genre"" | ""noise rock"")
(""Turn Me On"" | ""genre"" | ""punk blues"")
(""Turn Me On"" | ""total runtime"" | 35.1 minutes)"
459,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy in Dijon has 2900 staff members that educate 16800 undergraduate students, 1299 doctoral students, and 9400 postgraduate students a total of 27400 students combined.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfStudents | 27400)
(University_of_Burgundy | numberOfDoctoralStudents | 1299)
(University_of_Burgundy | campus | Dijon)
(University_of_Burgundy | numberOfPostgraduateStudents | 9400)","(""University of Burgundy"" | ""locatedIn"" | ""Dijon""),
(""University of Burgundy"" | ""hasNumberOfStaff"" | ""2900""),
(""University of Burgundy"" | ""educates"" | ""undergraduate students""),
(""University of Burgundy"" | ""numberOfUndergraduates"" | ""16800""),
(""University of Burgundy"" | ""educates"" | ""doctoral students""),
(""University of Burgundy"" | ""numberOfDoctoralStudents"" | ""1299""),
(""University of Burgundy"" | ""educates"" | ""postgraduate students""),
(""University of Burgundy"" | ""numberOfPostgraduates"" | ""9400""),
(""University of Burgundy"" | ""totalNumberOfStudents"" | ""27400"")"
460,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy, who resides in Tesvikiye, is a recipient of the State Award for Superior Achievement.","(Nurhan_Atasoy | award | State_Award_for_Superior_Achievement)
(Nurhan_Atasoy | residence | Teşvikiye)","(""Nurhan Atasoy"" | ""resides in"" | ""Tesvikiye""),
(""Nurhan Atasoy"" | ""recipient of"" | ""State Award for Superior Achievement"")"
461,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The size of Istanbul metro area is 5,343 square kilometers.",(Istanbul | areaMetro | 5343000000.0),"(Istanbul metro area | size | ""5,343 square kilometers"")"
462,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology campus is located in Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore-560090 India.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | country | ""India"")","(""Acharya Institute of Technology"" | ""location"" | ""Soldevanahalli"")
(""Acharya Institute of Technology"" | ""address"" | ""Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore-560090 India"")
(""Acharya Institute of Technology"" | ""locatedIn"" | ""Bangalore"")
(""Acharya Institute of Technology"" | ""locatedIn"" | ""India"")
(""Acharya Institute of Technology"" | ""postalCode"" | ""560090"")"
463,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Trane is a subsidiary company that was founded on 01-01-1913.,"(Trane | type | Subsidiary)
(Trane | foundingDate | 1913-01-01)","(""Trane"" | ""type"" | ""SubsidiaryCompany"")
(""Trane"" | ""foundingDate"" | ""01-01-1913"")"
464,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The code of the English language is ‘en’ in the ISO 639-1 standard.,(English_language | iso6391Code | en),"(""English language"" | ""hasCode"" | ""en"")
(""en"" | ""isCodeOf"" | ""English language"")
(""ISO 639-1 standard"" | ""includesCode"" | ""en"")
(""en"" | ""isIncludedIn"" | ""ISO 639-1 standard"")"
465,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The album Expect a Miracle of the instrumental music genre with a runtime of 54.56 minutes was a compilation album produced by Brian Kelly.,"(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | type | Compilation_Album)
(Expect_a_Miracle | genre | Instrumental_music)","(""Expect a Miracle"" | rdf:type | Album)
(""Expect a Miracle"" | dbo:genre | ""instrumental music"")
(""Expect a Miracle"" | dbo:runtime | 54.56)
(""Expect a Miracle"" | dbo:producer | ""Brian Kelly"")
(""Expect a Miracle"" | rdf:type | dbo:CompilationAlbum)"
466,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson, whose professional field was Botany, died on the 18th of February 1776.","(Lady_Anne_Monson | deathDate | 1776-02-18)
(Lady_Anne_Monson | professionalField | Botany)","(""Lady Anne Monson"" | ""profession"" | ""Botany"")
(""Lady Anne Monson"" | ""deathDate"" | ""1776-02-18"")"
467,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The University of Cambridge is affiliated with the League of European Research Universities.,(University_of_Cambridge | affiliation | League_of_European_Research_Universities),"(""University of Cambridge"" | ""affiliation"" | ""League of European Research Universities"")"
468,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The film Big Hero 6 features the first appearance of the character Baymax.,"(Baymax | firstAppearanceInFilm | Big_Hero_6_(film))
(Baymax | series | Big_Hero_6_(film))","(""Big Hero 6"" | ""features"" | ""Baymax""),
(""Baymax"" | ""first appearance"" | ""Big Hero 6"")"
469,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Located in King of Prussia, Pennsylvania, AmeriGas provides its energy industry services throughout the United States.","(AmeriGas | regionServed | United_States)
(AmeriGas | city | King_of_Prussia,_Pennsylvania)
(AmeriGas | industry | Energy_industry)","(""AmeriGas"" | ""location"" | ""King of Prussia, Pennsylvania"")
(""AmeriGas"" | ""provides"" | ""energy industry services"")
(""AmeriGas"" | ""serviceArea"" | ""United States"")"
470,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Following their song, ""This'll be my year,"" the musical band, Train, released a 3 minutes and 16 seconds long pop rock song, entitled ""Mermaid,"" which was released on both the Columbia record label and the Sony Music Entertainment record label.","(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)
(""Mermaid_(Train_song) | precededBy | This'll_Be_My_Year"")","(""This'll be my year"" | isPerformedBy | Train)
(Train | releasesSong | ""Mermaid"")
(""Mermaid"" | hasGenre | ""pop rock"")
(""Mermaid"" | hasDuration | ""3 minutes and 16 seconds"")
(""Mermaid"" | isReleasedBy | ""Columbia record label"")
(""Mermaid"" | isReleasedBy | ""Sony Music Entertainment record label"")
(Train | hasSong | ""This'll be my year"")
(Train | hasSong | ""Mermaid"")"
471,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","MotorSport Vision operates the Bedford Aerodrome, which serves the Bedford Autodrome. The Bedford Aerodrome’s elevation above sea level is 83.2104 meters and has a runway length of 1095.","(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | runwayLength | 1095.0)
(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | elevationAboveTheSeaLevel | 83.2104)","(""MotorSport Vision"" | ""operates"" | ""Bedford Aerodrome"")
(""Bedford Aerodrome"" | ""serves"" | ""Bedford Autodrome"")
(""Bedford Aerodrome"" | ""elevationAboveSeaLevel"" | ""83.2104 meters"")
(""Bedford Aerodrome"" | ""hasRunwayLengthOf"" | ""1095"")"
472,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Abraham A. Ribicoff, an American worked as the United States Secretary of Health, Education and Welfare and his wife is Casey Ribicoff.","(Abraham_A._Ribicoff | spouse | Casey_Ribicoff)
(Abraham_A._Ribicoff | nationality | American)
(Abraham_A._Ribicoff | office | ""United States Secretary of Health, Education, and Welfare"")","(""Abraham A. Ribicoff"" | ""type"" | ""Person""),
(""Abraham A. Ribicoff"" | ""nationality"" | ""American""),
(""Abraham A. Ribicoff"" | ""occupation"" | ""United States Secretary of Health, Education and Welfare""),
(""Abraham A. Ribicoff"" | ""spouse"" | ""Casey Ribicoff"")"
473,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Harry Carey was an actor born in 1878 and directed the film ""McVeagh of the South Seas"", which was distributed by Alliance Films Corporation.","(McVeagh_of_the_South_Seas | director | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | distributor | Alliance_Films_Corporation)","(""Harry Carey"" | ""type"" | ""Actor"")
(""Harry Carey"" | ""birthYear"" | ""1878"")
(""Harry Carey"" | ""directed"" | ""McVeagh of the South Seas"")
(""McVeagh of the South Seas"" | ""type"" | ""Film"")
(""McVeagh of the South Seas"" | ""director"" | ""Harry Carey"")
(""Alliance Films Corporation"" | ""type"" | ""Film Corporation"")
(""McVeagh of the South Seas"" | ""distributedBy"" | ""Alliance Films Corporation"")
(""Alliance Films Corporation"" | ""distributed"" | ""McVeagh of the South Seas"")"
474,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology, affiliated with Visvesvaraya Technological University and established in 2000, is located at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | established | 2000)","(""Acharya Institute of Technology"" | ""date of establishment"" | ""2000"")
(""Acharya Institute of Technology"" | ""affiliated with"" | ""Visvesvaraya Technological University"")
(""Acharya Institute of Technology"" | ""located at"" | ""Soldevanahalli"")
(""Acharya Institute of Technology"" | ""address"" | ""Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090"")"
475,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The song ""Mermaid"" by the band Train is from the pop rock genre.","(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))","(""Mermaid"" | songBy | ""Train""),
(""Mermaid"" | genre | ""pop rock""),
(""Train"" | hasSong | ""Mermaid""),
(""Train"" | genre | ""pop rock"")"
476,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina died in Israel.,(Liselotte_Grschebina | deathPlace | Israel),(Liselotte Grschebina | deathPlace | Israel)
477,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Geof Bartz edited 'Death on a Factory Farm', while Tom Simon produced it. The movie was released on HBO.","(Death_on_a_Factory_Farm | producer | Tom_Simon)
(Death_on_a_Factory_Farm | broadcastedBy | HBO)
(Death_on_a_Factory_Farm | editor | Geof_Bartz)","(""Geof Bartz"" | ""edited"" | ""Death on a Factory Farm"")
(""Tom Simon"" | ""produced"" | ""Death on a Factory Farm"")
(""Death on a Factory Farm"" | ""was released on"" | ""HBO"")"
478,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The city Ciudad Ayala is in the Morelos part of Mexico. It is 1147 m above sea level in UTC offset -6. The leader is called the governator.,"(Ciudad_Ayala | type | City)
(Ciudad_Ayala | utcOffset | −6)
(Ciudad_Ayala | leaderTitle | Governator)
(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | country | Mexico)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)","(Ciudad Ayala | location | Morelos)
(Morelos | partOf | Mexico)
(Ciudad Ayala | elevation | 1147 m)
(Ciudad Ayala | timeZone | UTC -6)
(Ciudad Ayala | leaderTitle | governator)"
479,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala (part of Morelos) is a city in Mexico.Ciudad Ayala is 1147m above sea level.,"(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | country | Mexico)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)","(""Ciudad Ayala"" | ""is part of"" | ""Morelos"")
(""Ciudad Ayala"" | ""is in"" | ""Mexico"")
(""Ciudad Ayala"" | ""elevation above sea level"" | ""1147m"")"
480,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1147 Stavropolis has an apoapsis of 418476000000.0 and an orbital period of 1,249.6 days.","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)","(""1147 Stavropolis"" | ""hasApoapsis"" | 418476000000.0)
(""1147 Stavropolis"" | ""hasOrbitalPeriod"" | 1249.6)"
481,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The national anthem of the German Empire was Die Wacht am Rhein.,(German_Empire | anthem | Die_Wacht_am_Rhein),(German Empire | national anthem | Die Wacht am Rhein)
482,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Stargate was Michael Jackson's production team.,(Stargate_(production_team) | associatedBand/associatedMusicalArtist | Michael_Jackson),"(""Stargate"" | ""productionTeamOf"" | ""Michael Jackson""),
(""Michael Jackson"" | ""hasProductionTeam"" | ""Stargate"")"
483,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy was born on January 1, 1934 in Turkey. He is a citizen of Turkey and one of his residence is located in Istanbul.","(Nurhan_Atasoy | birthDate | 1934-01-01)
(Nurhan_Atasoy | residence | Istanbul)
(Nurhan_Atasoy | citizenship | Turkey)
(Nurhan_Atasoy | birthPlace | Turkey)","(""Nurhan Atasoy"" | ""birthDate"" | ""1934-01-01"")
(""Nurhan Atasoy"" | ""birthPlace"" | ""Turkey"")
(""Nurhan Atasoy"" | ""citizenship"" | ""Turkey"")
(""Nurhan Atasoy"" | ""residence"" | ""Istanbul"")"
484,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The nationality of Abraham A. Ribicoff, husband of Casey Ribicoff, was American & his place of birth was Connecticut.","(Abraham_A._Ribicoff | spouse | Casey_Ribicoff)
(Abraham_A._Ribicoff | nationality | American)
(Abraham_A._Ribicoff | birthPlace | Connecticut)","(Abraham A. Ribicoff | nationality | ""American"")
(Abraham A. Ribicoff | place of birth | ""Connecticut"")
(Abraham A. Ribicoff | spouse | Casey Ribicoff)"
485,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The song Mermaid (off the album California 37 by the band Train) written by Pat Monahan and produced by the production team Espionage was distributed in the digital format.,"(Mermaid_(Train_song) | producer | Espionage_(production_team))
(Mermaid_(Train_song) | album | California_37_(Train_album))
(Mermaid_(Train_song) | writer | Pat_Monahan)
(Mermaid_(Train_song) | format | Music_download)","(""Mermaid"" | type | ""song"")
(""Mermaid"" | part of | ""California 37"")
(""California 37"" | type | ""album"")
(""California 37"" | artist | ""Train"")
(""Train"" | type | ""band"")
(""Mermaid"" | writer | ""Pat Monahan"")
(""Pat Monahan"" | type | ""composer"")
(""Mermaid"" | producer | ""Espionage"")
(""Espionage"" | type | ""production team"")
(""Mermaid"" | distribution format | ""digital"")"
486,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Pontiac Rageous is a coupe that was first produced in 1997 and last produced in 1997.,"(Pontiac_Rageous | productionStartYear | 1997)
(Pontiac_Rageous | productionEndYear | 1997)
(Pontiac_Rageous | bodyStyle | Coupe)","(""The Pontiac Rageous"" | type | ""coupe"")
(""The Pontiac Rageous"" | productionStartYear | ""1997"")
(""The Pontiac Rageous"" | productionEndYear | ""1997"")"
487,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The 17068.8 millimetres long ALCO RS-3 has a diesel-electric transmission.,"(ALCO_RS-3 | powerType | Diesel-electric_transmission)
(ALCO_RS-3 | length | 17068.8 (millimetres))","(ALCO RS-3 | length | 17068.8 millimetres)
(ALCO RS-3 | hasTransmission | diesel-electric transmission)"
488,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The United States has a total population of 324,720,797.",(United_States | populationTotal | 324720797),"(United States | total population | ""324,720,797"")"
489,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala is 1147m above sea level.,(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0),"(""Ciudad Ayala"" | ""elevation"" | 1147)"
490,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina, a professional photographer, was born on May 2, 1908.","(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | professionalField | Photographer)","(Liselotte Grschebina | type | professional photographer)
(Liselotte Grschebina | birthDate | ""May 2, 1908"")"
491,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva is a citizen of the United States and resides in New Jersey. The United States has several ethnic groups-one of them being Native Americans-and has a total area of 9,833,520.","(Darinka_Dentcheva | citizenship | United_States)
(United_States | ethnicGroup | Native_American)
(Darinka_Dentcheva | residence | New_Jersey)
(United_States | areaTotal | 9833520000000.0)","(Darinka Dentcheva | citizenship | United States)
(Darinka Dentcheva | residesIn | New Jersey)
(United States | hasCitizen | Darinka Dentcheva)
(United States | hasResident | Darinka Dentcheva)
(United States | hasEthnicGroup | Native Americans)
(United States | totalArea | ""9,833,520"")"
492,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson was born in Darlington, England. Darlington has an area code of 01325 and zip code areas DL1, DL2, and DL3.","(Darlington | areaCode | 01325)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | birthPlace | Darlington)
(Darlington | postalCode | ""DL1, DL2, DL3"")","(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington, England"")
(""Darlington, England"" | ""areaCode"" | ""01325"")
(""Darlington, England"" | ""zipCode"" | ""DL1"")
(""Darlington, England"" | ""zipCode"" | ""DL2"")
(""Darlington, England"" | ""zipCode"" | ""DL3"")"
493,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Turn On Me produced by Wharton Tiers has a runtime of 35.1 minutes and is followed by the album Take It Off.,"(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | producer | Wharton_Tiers)
(Turn_Me_On_(album) | followedBy | Take_It_Off!)","(""Turn On Me"" | ""producer"" | ""Wharton Tiers"")
(""Turn On Me"" | ""runtime"" | 35.1)
(""Turn On Me"" | ""followedBy"" | ""Take It Off"")"
494,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1634: The Bavarian Crisis's author, Eric Flint, was born in Burbank, California.","(Eric_Flint | birthPlace | Burbank,_California)
(1634:_The_Bavarian_Crisis | author | Eric_Flint)","(""1634: The Bavarian Crisis"" | ""author"" | ""Eric Flint"")
(""Eric Flint"" | ""born in"" | ""Burbank, California"")"
495,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Founded on 1959-01-01, AmeriGas earns 211200000 of net income.","(AmeriGas | foundingDate | 1959-01-01)
(AmeriGas | netIncome | 211200000)","(""AmeriGas"" | ""foundingDate"" | ""1959-01-01"")
(""AmeriGas"" | ""netIncome"" | 211200000)"
496,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The song Mermaid by Train is written in the reggae music genre.,(Mermaid_(Train_song) | genre | Reggae),"(""Mermaid"" | type | ""song""),
(""Mermaid"" | writer | ""Train""),
(""Mermaid"" | genre | ""reggae music"")"
497,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",English-born Brandon Carter is known for the invention of the Carter constant and the no-hair theorem.Carter's doctoral advisor was Dennis William Sciama.,"(Brandon_Carter | knownFor | Carter_constant)
(Brandon_Carter | knownFor | No-hair_theorem)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)
(Brandon_Carter | birthPlace | England)","(""Brandon Carter"" | ""birthPlace"" | ""England"")
(""Brandon Carter"" | ""knownFor"" | ""Carter constant"")
(""Brandon Carter"" | ""knownFor"" | ""no-hair theorem"")
(""Dennis William Sciama"" | ""doctoralStudent"" | ""Brandon Carter"")"
498,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The address of the Alan B. Miller Hall is 101 Ukrop Way in the USA and it’s the current home of The Mason School of Business. They started to build the hall on the 30th of March, 2007 after it was designed by Robert A M Stern. The College of William and Mary owns the building.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | tenant | Mason_School_of_Business)
(Mason_School_of_Business | country | United_States)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""Alan B. Miller Hall"" | ""address"" | ""101 Ukrop Way, USA"")
(""Alan B. Miller Hall"" | ""isHomeOf"" | ""The Mason School of Business"")
(""Alan B. Miller Hall"" | ""constructionStartDate"" | ""30th of March, 2007"")
(""Alan B. Miller Hall"" | ""designedBy"" | ""Robert A M Stern"")
(""The College of William and Mary"" | ""owns"" | ""Alan B. Miller Hall"")"
499,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",McVeagh of the South Seas is a film produced by the Progressive Motion Picture Company and distributed by Alliance Films Corporation.,"(McVeagh_of_the_South_Seas | producer | The_Progressive_Motion_Picture_Company)
(McVeagh_of_the_South_Seas | distributor | Alliance_Films_Corporation)","(""McVeagh of the South Seas"" | ""type"" | ""film"")
(""McVeagh of the South Seas"" | ""producer"" | ""Progressive Motion Picture Company"")
(""McVeagh of the South Seas"" | ""distributor"" | ""Alliance Films Corporation"")"
500,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Lady Anne Monson lives in India where the Chief Justice is a leadership title.,"(Lady_Anne_Monson | residence | India)
(India | leaderTitle | Chief Justice)","(""Lady Anne Monson"" | ""livesIn"" | ""India"")
(""Chief Justice"" | ""locatedIn"" | ""India"")
(""Chief Justice"" | ""type"" | ""Leadership Title"")"
501,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Honeymoon Killers is associated with the band Pussy Galore.,(The_Honeymoon_Killers_(American_band) | associatedBand/associatedMusicalArtist | Pussy_Galore_(band)),"(""The Honeymoon Killers"" | ""associatedWith"" | ""Pussy Galore"")"
502,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala falls into UTC offset -6, PDT timezone.","(Ciudad_Ayala | utcOffset | −6)
(Ciudad_Ayala | timeZone | Pacific_Daylight_Time)","(""Ciudad Ayala"" | ""fall into"" | ""UTC offset -6""),
(""Ciudad Ayala"" | ""fall into"" | ""PDT timezone"")"
503,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Expect a Miracle as well as Brian Kelly's album Afterplay album are examples of the instrumental easy listening genre.,"(Expect_a_Miracle | genre | Instrumental_music)
(Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Easy_listening)","(""Expect a Miracle"" | type | ""instrumental easy listening genre"")
(""Expect a Miracle"" | ""is example of"" | ""instrumental easy listening genre"")
(""Afterplay"" | ""author"" | ""Brian Kelly"")
(""Afterplay"" | type | ""album"")
(""Afterplay"" | type | ""instrumental easy listening genre"")
(""Afterplay"" | ""is example of"" | ""instrumental easy listening genre"")
(""Brian Kelly"" | ""has work"" | ""Afterplay"")"
504,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina's was born in the German Empire and their nationality is Israeli. Israel's population density is 387.63 people per square kilometre of land area and its leadership has a title of Prime Minister.,"(Israel | leaderTitle | ""Prime Minister"")
(Liselotte_Grschebina | nationality | Israel)
(Israel | populationDensity | 387.63)
(Liselotte_Grschebina | birthPlace | German_Empire)","(""Liselotte Grschebina"" | ""birthPlace"" | ""German Empire"")
(""Liselotte Grschebina"" | ""nationality"" | ""Israel"")
(""Israel"" | ""populationDensity"" | ""387.63 people per square kilometre of land area"")
(""Israel"" | ""leadershipTitle"" | ""Prime Minister"")"
505,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Brandon Carter (born in England on January 1, 1942) graduated from the University of Cambridge and specialized in General Relativity. Dennis William Sciama was his doctoral advisor.","(Brandon_Carter | professionalField | General_relativity)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)
(Brandon_Carter | birthPlace | England)
(Brandon_Carter | birthDate | 1942-01-01)
(Brandon_Carter | almaMater | University_of_Cambridge)","(""Brandon Carter"" | ""born in"" | ""England"")
(""Brandon Carter"" | ""born on"" | ""January 1, 1942"")
(""Brandon Carter"" | ""graduated from"" | ""University of Cambridge"")
(""Brandon Carter"" | ""specialized in"" | ""General Relativity"")
(""Brandon Carter"" | ""doctoral advisor"" | ""Dennis William Sciama"")"
506,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Tom Simon and Sarah Teale directed Death on a Factory Farm which aired on HBO.,"(Death_on_a_Factory_Farm | director | Tom_Simon)
(Death_on_a_Factory_Farm | broadcastedBy | HBO)
(Death_on_a_Factory_Farm | director | Sarah_Teale)","(""Tom Simon"" | ""directed"" | ""Death on a Factory Farm""),
(""Sarah Teale"" | ""directed"" | ""Death on a Factory Farm""),
(""Death on a Factory Farm"" | ""airedOn"" | ""HBO"")"
507,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","McVeagh of the South Seas is a film starring the movie's writer, Harry Carey. He was born in 1878 and according to the IMDb the ID is 0004319. The company that produced this movie was Progressive Motion Picture Company alongside the work of the director, Cyril Bruce.","(McVeagh_of_the_South_Seas | imdbId | 0004319)
(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | writer | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | producer | The_Progressive_Motion_Picture_Company)
(McVeagh_of_the_South_Seas | director | Cyril_Bruce)","(""McVeagh of the South Seas"" | type | ""film"")
(""McVeagh of the South Seas"" | hasWriter | ""Harry Carey"")
(""McVeagh of the South Seas"" | hasActor | ""Harry Carey"")
(""McVeagh of the South Seas"" | hasProducer | ""Progressive Motion Picture Company"")
(""McVeagh of the South Seas"" | hasDirector | ""Cyril Bruce"")
(""Harry Carey"" | type | ""person"")
(""Harry Carey"" | birthDate | ""1878""^^xsd:year)
(""Harry Carey"" | IMDbID | ""0004319"")
(""Progressive Motion Picture Company"" | type | ""company"")
(""Cyril Bruce"" | type | ""person"")
(""Cyril Bruce"" | jobRole | ""director"")"
508,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The genre of album Nord by Year of No Light, produced by the band, is sludge metal or post-metal.","(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | genre | Post-metal)","(""Nord"" | ""type"" | ""album"")
(""Nord"" | ""albumGenre"" | ""sludge metal"")
(""Nord"" | ""albumGenre"" | ""post-metal"")
(""Nord"" | ""isProducedBy"" | ""Year of No Light"")
(""Nord"" | ""albumArtist"" | ""Year of No Light"")"
509,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The ALCO RS-3 was produced between May 1950 and August 1956 and was built by Montreal Locomotive Works. It has a diesel-electric transmission and is 17068.8 millimetres long.,"(ALCO_RS-3 | buildDate | ""May 1950 - August 1956"")
(ALCO_RS-3 | powerType | Diesel-electric_transmission)
(ALCO_RS-3 | builder | Montreal_Locomotive_Works)
(ALCO_RS-3 | length | 17068.8 (millimetres))","(ALCO RS-3 | date of production start | May 1950)
(ALCO RS-3 | date of production end | August 1956)
(ALCO RS-3 | built by | Montreal Locomotive Works)
(ALCO RS-3 | has transmission type | diesel-electric)
(ALCO RS-3 | length | 17068.8 millimetres)"
510,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",One of the leaders of Turkey is Binali Yildirim.,(Turkey | leader | Binali_Yıldırım),"(""Binali Yildirim"" | ""isLeaderOf"" | ""Turkey"")"
511,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The genres of the album Turn Me On are punk blues and noise rock. An offshoot of noise rock is Industrial rock. Post-hardcore music is also a derivative of noise rock.,"(Turn_Me_On_(album) | genre | Punk_blues)
(Noise_rock | derivative | Industrial_rock)
(Turn_Me_On_(album) | genre | Noise_rock)
(Noise_rock | derivative | Post-hardcore)","(""Turn Me On"" | genre | ""punk blues"")
(""Turn Me On"" | genre | ""noise rock"")
(""Industrial rock"" | subGenreOf | ""noise rock"")
(""Post-hardcore music"" | derivativeOf | ""noise rock"")"
512,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard is an American who was born on Nov 18, 1923 in New Hampshire, which is home to the Purple Finch. Allan Shepard went to school at NWC and graduated with an MA in 1957 and died in California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(New_Hampshire | bird | Purple_finch)
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | almaMater | ""NWC, M.A. 1957"")","(""Alan Shepard"" | ""type"" | ""American"")
(""Alan Shepard"" | ""birthDate"" | ""Nov 18, 1923"")
(""Alan Shepard"" | ""birthPlace"" | ""New Hampshire"")
(""New Hampshire"" | ""isHomeTo"" | ""Purple Finch"")
(""Alan Shepard"" | ""education"" | ""NWC"")
(""Alan Shepard"" | ""almaMater"" | ""NWC"")
(""Alan Shepard"" | ""degree"" | ""MA"")
(""Alan Shepard"" | ""graduationYear"" | ""1957"")
(""Alan Shepard"" | ""deathPlace"" | ""California"")"
513,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva (United states Citizen) lives in New York city, the largest city in the United States as an American.","(Darinka_Dentcheva | residence | United_States)
(United_States | largestCity | New_York_City)
(Darinka_Dentcheva | citizenship | United_States)
(United_States | demonym | American)","(Darinka Dentcheva | type | United States Citizen)
(Darinka Dentcheva | livesIn | New York City)
(New York City | type | City)
(New York City | partOf | United States)
(New York City | label | ""largest city in the United States"")
(Darinka Dentcheva | nationality | American)"
514,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Adolfo Suárez Madrid–Barajas Airport is in Alcobendas, is operated by ENAIRE and has a runway with the length of 3,500.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)","(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""is operated by"" | ""ENAIRE"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""has a runway length of"" | 3500)"
515,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ray Griggs is a director who is born in 1974.,(Ray_Griggs_(director) | birthYear | 1974),"(""Ray Griggs"" | ""type"" | ""director"")
(""Ray Griggs"" | ""birthDate"" | ""1974"")"
516,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Vila Nova Futebol Clube were champions at the Campeonato Brasileiro Série C, a league that contains the 17000 member Agremiacao Sportiva Arapiraquense that competed in the 2015 Campeonato Brasileiro Serie C.","(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Agremiação_Sportiva_Arapiraquense | season | 2015_Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)","(Vila Nova Futebol Clube | were champions at | Campeonato Brasileiro Série C)
(Campeonato Brasileiro Série C | contains | Agremiacao Sportiva Arapiraquense)
(Agremiacao Sportiva Arapiraquense | number of members | 17000)
(Agremiacao Sportiva Arapiraquense | competed in | 2015 Campeonato Brasileiro Serie C)"
517,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Death on a Factory Farm is an 83 minute HBO movie that was edited by Geof Bartz and musically composed by Jamie Lawrence.,"(Death_on_a_Factory_Farm | broadcastedBy | HBO)
(Death_on_a_Factory_Farm | editor | Geof_Bartz)
(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)
(Death_on_a_Factory_Farm | runtime | 83.0)","(""The Death on a Factory Farm"" | type | ""HBO movie"")
(""The Death on a Factory Farm"" | duration | 83 minutes)
(""The Death on a Factory Farm"" | ""was edited by"" | ""Geof Bartz"")
(""The Death on a Factory Farm"" | ""was composed by"" | ""Jamie Lawrence"")"
518,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Anatole de Grunwald produced and wrote the film English Without Tears which was also written by Terence Rattigan.,"(English_Without_Tears | producer | Anatole_de_Grunwald)
(English_Without_Tears | writer | Anatole_de_Grunwald)
(English_Without_Tears | writer | Terence_Rattigan)","(Anatole de Grunwald | type | Person)
(Anatole de Grunwald | produced | English Without Tears)
(Anatole de Grunwald | wrote | English Without Tears)
(English Without Tears | type | Film)
(English Without Tears | wasProducedBy | Anatole de Grunwald)
(English Without Tears | wasWrittenBy | Anatole de Grunwald)
(English Without Tears | wasWrittenBy | Terence Rattigan)
(Terence Rattigan | type | Person)
(Terence Rattigan | wrote | English Without Tears)"
519,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina was born in Karlsruhe and died in Israel. The Arab citizens of Israel is an ethnic group in Israel.,"(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | deathPlace | Israel)
(Israel | ethnicGroup | Arab_citizens_of_Israel)","(""Liselotte Grschebina"" | ""birthPlace"" | ""Karlsruhe"")
(""Liselotte Grschebina"" | ""deathPlace"" | ""Israel"")
(""Arab citizens of Israel"" | ""isEthnicGroupIn"" | ""Israel"")"
520,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina is an Israeli national where ethnic groups include Arabs.,"(Israel | ethnicGroup | Arab_citizens_of_Israel)
(Liselotte_Grschebina | nationality | Israel)","(""Liselotte Grschebina"" | ""nationality"" | ""Israel"")
(""Israel"" | ""includesEthnicGroup"" | ""Arabs"")"
521,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Vica manages Agremiação Sportiva Arapiraquense who play in the Campeonato Brasileiro Série C league.,"(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | manager | Vica)","(""Vica"" | ""manages"" | ""Agremiação Sportiva Arapiraquense"")
(""Agremiação Sportiva Arapiraquense"" | ""member of"" | ""Campeonato Brasileiro Série C"")"
522,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala, led by Juan Nolasco, is a part of Morelos, which is led by Graco Ramirez.","(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | leader | Juan_Nolasco)
(Morelos | leader | Graco_Ramírez)","(""Ciudad Ayala"" | ""leader"" | ""Juan Nolasco"")
(""Ciudad Ayala"" | ""part of"" | ""Morelos"")
(""Morelos"" | ""leader"" | ""Graco Ramirez"")"
523,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Year of No Light album created and produced by Nord with a runtime of 58 minutes and 41 seconds was released on September 6, 2006 on the E-Vinyl and Crucial Blast record label. Live at Roadburn 2008 preceded it.","(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | recordLabel | Crucial_Blast)
(Nord_(Year_of_No_Light_album) | recordLabel | E-Vinyl)
(Nord_(Year_of_No_Light_album) | runtime | 58.41)","(""Year of No Light album"" | ""type"" | ""Album"")
(""Year of No Light album"" | ""createdBy"" | ""Nord"")
(""Year of No Light album"" | ""producedBy"" | ""Nord"")
(""Year of No Light album"" | ""runtime"" | ""58 minutes and 41 seconds"")
(""Year of No Light album"" | ""releaseDate"" | ""September 6, 2006"")
(""Year of No Light album"" | ""label"" | ""E-Vinyl"")
(""Year of No Light album"" | ""label"" | ""Crucial Blast"")
(""Live at Roadburn 2008"" | ""precedes"" | ""Year of No Light album"")"
524,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The campus of the University of Burgundy is located in Dijon and employs 2900 staff members.,"(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | campus | Dijon)","(""University of Burgundy"" | ""location"" | ""Dijon"")
(""University of Burgundy"" | ""employs"" | 2900)"
525,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The 35.1 minute album Turn Me On was followed by the album Take It Off!,"(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | followedBy | Take_It_Off!)","(""Turn Me On"" | duration | ""35.1 minutes"")
(""Turn Me On"" | followed by | ""Take It Off!"")"
526,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Andrzej Piotr Ruszczyński was influenced by Darinka Dentcheva.,(Andrzej_Piotr_Ruszczyński | influencedBy | Darinka_Dentcheva),(Andrzej Piotr Ruszczyński | influencedBy | Darinka Dentcheva)
527,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The founding date of Gdynia in Poland was 1926-02-10 .,"(Gdynia,_Poland | foundingDate | 1926-02-10)","(Gdynia | foundingDate | ""1926-02-10"")
(Gdynia | country | Poland)"
528,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers is a 98-minute film that was distributed by Lionsgate and Roadside Attractions. Its budget was $2,000,000 and the film's editor was Stacy Katzman. The film’s language is English.","(Super_Capers | editing | Stacy_Katzman)
(Super_Capers | language | English_language)
(Super_Capers | runtime | 98.0)
(Super_Capers | distributor | Roadside_Attractions)
(Super_Capers | distributor | Lionsgate)
(Super_Capers | budget | 2000000.0)","(Super Capers | type | Film)
(Super Capers | duration | 98 minutes)
(Super Capers | distributor | Lionsgate)
(Super Capers | distributor | Roadside Attractions)
(Super Capers | budget | $2,000,000)
(Super Capers | editor | Stacy Katzman)
(Super Capers | language | English)"
529,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology campus is located in Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore, Karnataka – 560090 and it is affiliated to Visvesvaraya Technological University.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | city | Bangalore)
(Acharya_Institute_of_Technology | state | Karnataka)","(Acharya Institute of Technology | location | Soldevanahalli)
(Acharya Institute of Technology | location | Acharya Dr. Sarvapalli Radhakrishnan Road)
(Acharya Institute of Technology | location | Hessarghatta Main Road)
(Acharya Institute of Technology | location | Bangalore)
(Acharya Institute of Technology | location | Karnataka)
(Acharya Institute of Technology | location | 560090)
(Acharya Institute of Technology | affiliation | Visvesvaraya Technological University)"
530,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","GMA New Media is located in Quezon City in the Philippines, whose total area is 165.33.","(GMA_New_Media | location | Philippines)
(Quezon_City | areaTotal | 165.33)
(GMA_New_Media | location | Quezon_City)","(GMA New Media | location | Quezon City)
(Quezon City | location | Philippines)
(Philippines | area | 165.33)"
531,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Agremiação Sportiva Arapiraquense competed and play in the 2015 Campeonato Brasileiro Série C league from Brazil on their ground Estádio Municipal Coaracy da Mata Fonseca in Arapiraca..The Vila Nova Futebol Clube were champions.,"(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Agremiação_Sportiva_Arapiraquense | season | 2015_Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | country | Brazil)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(""Agremiação Sportiva Arapiraquense"" | ""competed in"" | ""2015 Campeonato Brasileiro Série C"")
(""Agremiação Sportiva Arapiraquense"" | ""located in country"" | ""Brazil"")
(""Agremiação Sportiva Arapiraquense"" | ""played at"" | ""Estádio Municipal Coaracy da Mata Fonseca"")
(""Estádio Municipal Coaracy da Mata Fonseca"" | ""located in"" | ""Arapiraca"")
(""Vila Nova Futebol Clube"" | ""won"" | ""2015 Campeonato Brasileiro Série C"")"
532,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Polydor Records is located in London.,(Polydor_Records | location | London),"(""Polydor Records"" | ""location"" | ""London"")"
533,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Anatole de Grunwald was the producer of 'English Without Tears', with Harold French, the director and Bernard Knowles, the cinematographer.","(English_Without_Tears | director | Harold_French)
(English_Without_Tears | cinematography | Bernard_Knowles)
(English_Without_Tears | producer | Anatole_de_Grunwald)","(""Anatole de Grunwald"" | ""occupation"" | ""producer"")
(""Anatole de Grunwald"" | ""produced"" | ""'English Without Tears'"")
(""Harold French"" | ""occupation"" | ""director"")
(""'English Without Tears'"" | ""directed by"" | ""Harold French"")
(""Bernard Knowles"" | ""occupation"" | ""cinematographer"")
(""'English Without Tears'"" | ""cinematography by"" | ""Bernard Knowles"")"
534,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bedford Aerodrome has a runway surface made of concrete and serves the Bedford Autodrome. Its runway name is 08/26 and the length of the runway is 1095. The aerodrome is 83.2104 meters above sea level.,"(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | elevationAboveTheSeaLevel | 83.2104)
(Bedford_Aerodrome | runwayLength | 1095.0)
(Bedford_Aerodrome | runwayName | ""08/26"")
(Bedford_Aerodrome | runwaySurfaceType | Concrete)","(Bedford Aerodrome | hasRunwaySurface | Concrete)
(Bedford Aerodrome | serves | Bedford Autodrome)
(Bedford Aerodrome | hasRunwayName | 08/26)
(Bedford Aerodrome | hasRunwayLength | 1095)
(Bedford Aerodrome | isAboveSeaLevel | 83.2104 meters)"
535,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Akeem Ayers made his debut for the Tennessee Titans which is coached by Mike Mularkey.,"(Tennessee_Titans | coach | Mike_Mularkey)
(Akeem_Ayers | debutTeam | Tennessee_Titans)","(""Akeem Ayers"" | ""made debut for"" | ""Tennessee Titans""),
(""Tennessee Titans"" | ""player"" | ""Akeem Ayers""),
(""Tennessee Titans"" | ""is coached by"" | ""Mike Mularkey""),
(""Mike Mularkey"" | ""coach of"" | ""Tennessee Titans"")"
536,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The postal code for the village of Thurleigh is MK44.,(Thurleigh | postalCode | MK44),"(""Thurleigh"" | ""hasPostalCode"" | ""MK44"")"
537,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aaron Turner played and sang with the band Twilight for a living.,"(Aaron_Turner | instrument | Singing)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))","(Aaron Turner | type | Person)
(Aaron Turner | occupation | Musician)
(Aaron Turner | played in | Twilight)
(Aaron Turner | career | Music)
(Twilight | type | Band)
(Aaron Turner | sang in | Twilight)"
538,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Expect a Miracle is a compilation album with a runtime of 54:56.,"(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | type | Compilation_Album)","(""Expect a Miracle"" | type | ""compilation album"")
(""Expect a Miracle"" | hasRuntime | ""54:56"")"
539,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, born Olga Nikolaevna Bondareva, studied at Leningrad State University.","(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")
(Olga_Bondareva | almaMater | Leningrad_State_University)","(Olga Bondareva | birthName | ""Olga Nikolaevna Bondareva"")
(Olga Bondareva | studiedAt | Leningrad State University)"
540,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 1147 Stavropolis discovered by Grigory Neujmin (death date December 17, 1946) with a rotation period of 20378.5 has an apoapsis of 418476000000.0. The orbital period of this asteroid is 1249.6 days.","(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | rotationPeriod | 20378.5)
(1147_Stavropolis | discoverer | Grigory_Neujmin)
(Grigory_Neujmin | deathDate | 1946-12-17)
(1147_Stavropolis | apoapsis | 418476000000.0)","(""1147 Stavropolis"" | ""discoveredBy"" | ""Grigory Neujmin"")
(""Grigory Neujmin"" | ""deathDate"" | ""December 17, 1946"")
(""1147 Stavropolis"" | ""rotationPeriod"" | 20378.5)
(""1147 Stavropolis"" | ""apoapsis"" | 418476000000.0)
(""1147 Stavropolis"" | ""orbitalPeriod"" | 1249.6)"
541,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala is a part of Morelos in the country of Mexico and is 1147.0 above sea level.,"(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | country | Mexico)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)","(""Ciudad Ayala"" | ""part of"" | ""Morelos"")
(""Ciudad Ayala"" | ""located in"" | ""Mexico"")
(""Ciudad Ayala"" | ""elevation"" | 1147.0)"
542,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers is a 98 minute movie directed and written by Ray Griggs. The budget of the film was $2,000,000 and it was edited by Stacy Katzman.","(Super_Capers | editing | Stacy_Katzman)
(Super_Capers | runtime | 98.0)
(Super_Capers | budget | 2000000.0)
(Super_Capers | writer | Ray_Griggs_(director))
(Super_Capers | director | Ray_Griggs_(director))","(""Super Capers"" | ""type"" | ""Movie""),
(""Super Capers"" | ""duration"" | ""98 minutes""),
(""Super Capers"" | ""directedBy"" | ""Ray Griggs""),
(""Super Capers"" | ""writtenBy"" | ""Ray Griggs""),
(""Super Capers"" | ""Budget"" | ""$2,000,000""),
(""Super Capers"" | ""editedBy"" | ""Stacy Katzman""),
(""Ray Griggs"" | ""directs"" | ""Super Capers""),
(""Ray Griggs"" | ""writes"" | ""Super Capers""),
(""Stacy Katzman"" | ""edits"" | ""Super Capers"")"
543,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1147 Stavropolis, discovered by Grigory Neujmin, has an orbital period of 1249.6 and an apoapsis of 418476000000.0 AU.","(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | discoverer | Grigory_Neujmin)
(1147_Stavropolis | apoapsis | 418476000000.0)","(""1147 Stavropolis"" | ""discoverer"" | ""Grigory Neujmin""),
(""1147 Stavropolis"" | ""orbitalPeriod"" | ""1249.6""),
(""1147 Stavropolis"" | ""apoapsis"" | ""418476000000.0 AU"")"
544,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Brandon Carter was born in 1942 on January, 1.",(Brandon_Carter | birthDate | 1942-01-01),"(Brandon Carter | birthDate | 1942)
(Brandon Carter | birthDate | ""January, 1"")"
545,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson, an English national born in Darlington, was a professional botanist. She was married to George Monson and resided in India.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | nationality | Kingdom_of_England)
(Lady_Anne_Monson | residence | India)
(Lady_Anne_Monson | spouse | George_Monson)
(Lady_Anne_Monson | professionalField | Botany)","(Lady Anne Monson | type | English national)
(Lady Anne Monson | birthPlace | Darlington)
(Lady Anne Monson | profession | botanist)
(Lady Anne Monson | spouse | George Monson)
(Lady Anne Monson | residence | India)"
546,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Expect a Miracle, an instrumental music genre, produced by Brian Kelly, was preceded by the album Pools of Light and followed by the album Afterplay.","(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | precededBy | Pools_of_Light_(Brian_Kelly_album))
(Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Instrumental_music)","(""Expect a Miracle"" | type | ""instrumental music genre"")
(""Expect a Miracle"" | ""produced by"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""preceded by"" | ""Pools of Light"")
(""Expect a Miracle"" | ""followed by"" | ""Afterplay"")
(""Brian Kelly"" | ""producer of"" | ""Expect a Miracle"")
(""Pools of Light"" | ""followed by"" | ""Expect a Miracle"")
(""Afterplay"" | ""preceded by"" | ""Expect a Miracle"")"
547,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aaron Turner plays electric guitar in a Post-metal band, Twilight.","(Aaron_Turner | genre | Post-metal)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))
(Aaron_Turner | instrument | Electric_guitar)","(Aaron Turner | playsInstrument | Electric Guitar)
(Aaron Turner | memberOf | Twilight)
(Twilight | genre | Post-metal)
(Electric Guitar | usedBy | Aaron Turner)
(Twilight | hasMember | Aaron Turner)"
548,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Lionsgate is a entertainment company founded by Frank Giustra. Lionsgate and Roadside Attractions distributed the movie Super Capers.,"(Super_Capers | distributor | Roadside_Attractions)
(Lionsgate | industry | Entertainment)
(Super_Capers | distributor | Lionsgate)
(Lionsgate | foundedBy | Frank_Giustra)","(""Lionsgate"" | ""type"" | ""entertainment company"")
(""Lionsgate"" | ""foundedBy"" | ""Frank Giustra"")
(""Lionsgate"" | ""distributed"" | ""Super Capers"") 
(""Roadside Attractions"" | ""distributed"" | ""Super Capers"")"
549,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The main ingredients in the dessert, Bionico, are chopped fruits, sour cream, condensed milk, granola, shredded coconut and raisins.","(Bionico | course | Dessert)
(Bionico | mainIngredient | ""Chopped Fruits, Sour Cream, Condensed Milk, Granola, Shredded Coconut, Raisins"")","(""Bionico"" | ""ingredient"" | ""chopped fruits""),
(""Bionico"" | ""ingredient"" | ""sour cream""),
(""Bionico"" | ""ingredient"" | ""condensed milk""),
(""Bionico"" | ""ingredient"" | ""granola""),
(""Bionico"" | ""ingredient"" | ""shredded coconut""),
(""Bionico"" | ""ingredient"" | ""raisins"")"
550,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The leader of Morelos is Graco Ramírez.,(Morelos | leader | Graco_Ramírez),"(""Morelos"" | ""leader"" | ""Graco Ramírez"")"
551,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Israel has a total area of 20,769 square kilometers.",(Israel | areaTotal | 20769100000.0),"(Israel | hasTotalArea | 20,769 square kilometers)"
552,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","English Without Tears was directed by Harold French, who was born in the United Kingdom.","(English_Without_Tears | director | Harold_French)
(Harold_French | birthPlace | UK)","(""English Without Tears"" | ""director"" | ""Harold French"")
(""Harold French"" | ""birthPlace"" | ""United Kingdom"")"
553,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bionico (a dish served for dessert) is a food found in Mexico varied by using cottage cheese.,"(Bionico | course | Dessert)
(Bionico | country | Mexico)
(Bionico | dishVariation | Cottage_cheese)","(""Bionico"" | ""typeOf"" | ""dish"")
(""Bionico"" | ""course"" | ""dessert"")
(""Bionico"" | ""location"" | ""Mexico"")
(""Bionico"" | ""ingredient"" | ""cottage cheese"")"
554,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Mason School of Business are the current tenants of Alan B Miller Hall, located at ""101 Ukrop Way.""","(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)","(""Mason School of Business"" | ""isTenantOf"" | ""Alan B Miller Hall""),
(""Alan B Miller Hall"" | ""location"" | ""101 Ukrop Way"")"
555,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",McVeagh of the South Seas is a film directed by Cyril Bruce.,(McVeagh_of_the_South_Seas | director | Cyril_Bruce),"(""McVeagh of the South Seas"" | ""type"" | ""Film"")
(""McVeagh of the South Seas"" | ""director"" | ""Cyril Bruce"")"
556,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Train's California 37 album included Mermaid (3.16 minutes), a reggae song penned by Espen Lind and Amund Bjørklund. It resided on the Columbia Records/Sony Music Entertainment label.","(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)
(Mermaid_(Train_song) | writer | Espen_Lind)
(Mermaid_(Train_song) | genre | Reggae)
(Mermaid_(Train_song) | writer | Amund_Bjørklund)
(Mermaid_(Train_song) | album | California_37_(Train_album))","(""Train's California 37 album"" | ""included"" | ""Mermaid (3.16 minutes)"")
(""Mermaid (3.16 minutes)"" | ""type of"" | ""reggae song"")
(""Mermaid (3.16 minutes)"" | ""penned by"" | ""Espen Lind"")
(""Mermaid (3.16 minutes)"" | ""penned by"" | ""Amund Bjørklund"")
(""Train's California 37 album"" | ""resided on"" | ""the Columbia Records/Sony Music Entertainment label"")"
557,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The album Expect a Miracle was produced by Brian Kelly.,(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist)),"(""Expect a Miracle"" | ""producer"" | ""Brian Kelly"")"
558,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Two Towers, the sequel to The Fellowship of the Ring, published by George Allen & Unwin.","(The_Fellowship_of_the_Ring | followedBy | The_Two_Towers)
(The_Two_Towers | publisher | George_Allen_&_Unwin)","(""The Two Towers"" | ""sequel to"" | ""The Fellowship of the Ring"")
(""The Two Towers"" | ""published by"" | ""George Allen & Unwin"")"
559,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The 94 minute movie It's Great to be Young was directed by Cyril Frankel and written by Ted Willis.,"(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | director | Cyril_Frankel)
(""It's_Great_to_Be_Young_(1956_film) | writer | Ted_Willis"")","(""It's Great to be Young"" | runtime | 94)
(""It's Great to be Young"" | director | ""Cyril Frankel"")
(""It's Great to be Young"" | writer | ""Ted Willis"")"
560,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Adolfo Suárez Madrid–Barajas Airport's runway length's 3500. It is operated by ENAIRE and is situated in Alcobendas.,"(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)","(""Adolfo Suárez Madrid–Barajas Airport"" | ""hasRunwayLength"" | ""3500"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""isOperatedBy"" | ""ENAIRE"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""isSituatedIn"" | ""Alcobendas"")"
561,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Super Capers is a film that is distributed by Lionsgate and Roadside Attractions. Frank Giustra founded Lionsgate which is part of the entertainment industry.,"(Super_Capers | distributor | Roadside_Attractions)
(Lionsgate | industry | Entertainment)
(Super_Capers | distributor | Lionsgate)
(Lionsgate | foundedBy | Frank_Giustra)","(Super Capers | type | Film)
(Super Capers | distributedBy | Lionsgate)
(Super Capers | distributedBy | Roadside Attractions)
(Lionsgate | foundedBy | Frank Giustra)
(Lionsgate | industry | Entertainment industry)"
562,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers is a 98 minute movie that was written and directed by Ray Griggs. It starred Michael Rooker and grossed $30,955 with a budget of $2,000,000.","(Super_Capers | starring | Michael_Rooker)
(Super_Capers | budget | 2000000.0)
(Super_Capers | writer | Ray_Griggs_(director))
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | runtime | 98.0)
(Super_Capers | gross | 30955.0)","(""Super Capers"" | ""type"" | ""Movie"")
(""Super Capers"" | ""duration"" | 98)
(""Super Capers"" | ""directedBy"" | ""Ray Griggs"")
(""Ray Griggs"" | ""wrote"" | ""Super Capers"")
(""Ray Griggs"" | ""directed"" | ""Super Capers"")
(""Super Capers"" | ""starring"" | ""Michael Rooker"")
(""Michael Rooker"" | ""starredIn"" | ""Super Capers"")
(""Super Capers"" | ""grossed"" | ""$30,955"")
(""Super Capers"" | ""budget"" | ""$2,000,000"")"
563,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Directed by Harold French, ""English Without Tears"" was a movie written by Anatole de Grunwald. Terence Rattigan was also a writer for the film.","(English_Without_Tears | director | Harold_French)
(English_Without_Tears | writer | Anatole_de_Grunwald)
(English_Without_Tears | writer | Terence_Rattigan)","(""English Without Tears"" | director | ""Harold French"")
(""English Without Tears"" | writer | ""Anatole de Grunwald"")
(""English Without Tears"" | writer | ""Terence Rattigan"")"
564,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Hypermarcas is a S.A. corporation founded on 2001-01-01.,"(Hypermarcas | foundingDate | 2001-01-01)
(Hypermarcas | type | S.A._(corporation))","(""Hypermarcas"" | ""type"" | ""S.A. Corporation"")
(""Hypermarcas"" | ""foundingDate"" | ""2001-01-01"")"
565,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy, located in Dijon, has 2900 staff members, 16800 undergraduate students, and 27400 students.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfStudents | 27400)
(University_of_Burgundy | campus | Dijon)","(""University of Burgundy"" | ""location"" | ""Dijon""),
(""University of Burgundy"" | ""staffMembersCount"" | 2900),
(""University of Burgundy"" | ""undergraduateStudentsCount"" | 16800),
(""University of Burgundy"" | ""studentsCount"" | 27400)"
566,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Abraham A. Ribicoff was born in the United States of America where he was a citizen. He was in office during the presidency of John F. Kennedy and his spouse was Ruth Ribicoff. His successor in office was Anthony J. Celebrezze.,"(Abraham_A._Ribicoff | spouse | ""Ruth Ribicoff"")
(Abraham_A._Ribicoff | inOfficeWhilePresident | John_F._Kennedy)
(Abraham_A._Ribicoff | nationality | American)
(Abraham_A._Ribicoff | successor | Anthony_J._Celebrezze)
(Abraham_A._Ribicoff | birthPlace | United_States)","(Abraham A. Ribicoff | birthPlace | United States of America)
(Abraham A. Ribicoff | nationality | United States of America)
(Abraham A. Ribicoff | officeHolderDuring | John F. Kennedy)
(Abraham A. Ribicoff | spouse | Ruth Ribicoff)
(Abraham A. Ribicoff | successor | Anthony J. Celebrezze)"
567,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brandon Carter is known for the No-hair theorem.,(Brandon_Carter | knownFor | No-hair_theorem),(Brandon Carter | known for | No-hair theorem)
568,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina is an Israeli national who was born on May 2, 1908, did her studies at the School of Applied Arts in Stuttgart and died in Israel on June 14, 1994.","(Liselotte_Grschebina | deathPlace | Israel)
(Liselotte_Grschebina | nationality | Israel)
(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)
(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | birthDate | 1908-05-02)","(Liselotte Grschebina | type | Person)
(Liselotte Grschebina | nationality | Israeli)
(Liselotte Grschebina | birthDate | ""May 2, 1908"")
(Liselotte Grschebina | deathPlace | Israel)
(Liselotte Grschebina | deathDate | ""June 14, 1994"")
(Liselotte Grschebina | almaMater | School of Applied Arts in Stuttgart)"
569,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bionico is a dessert food using cottage cheese and can be found in Mexico.,"(Bionico | course | Dessert)
(Bionico | country | Mexico)
(Bionico | dishVariation | Cottage_cheese)","(""Bionico"" | ""typeOf"" | ""Dessert"")
(""Bionico"" | ""ingredient"" | ""Cottage cheese"")
(""Bionico"" | ""foundIn"" | ""Mexico"")"
570,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers is an English-language film starring Adam West and has a running time of 98 minutes. The budget for the film was 2000000 and the box office is $30,955.","(Super_Capers | language | English_language)
(Super_Capers | starring | Adam_West)
(Super_Capers | budget | 2000000.0)
(Super_Capers | runtime | 98.0)
(Super_Capers | gross | 30955.0)","(""Super Capers"" | ""language"" | ""English"")
(""Super Capers"" | ""starring"" | ""Adam West"")
(""Super Capers"" | ""running time"" | 98)
(""Super Capers"" | ""budget"" | 2000000)
(""Super Capers"" | ""box office"" | 30955)"
571,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Adolfo Suárez Madrid–Barajas Airport is in Alcobendas which is operated by ENAIRE in Madrid and has an elevation of 610.0 metres above sea level.,"(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)","(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""operator"" | ""ENAIRE"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""located in city"" | ""Madrid"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""elevationAboveTheGround"" | ""610.0 metres"")
(""ENAIRE"" | ""operates"" | ""Adolfo Suárez Madrid–Barajas Airport"")
(""Alcobendas"" | ""contains"" | ""Adolfo Suárez Madrid–Barajas Airport"")
(""Madrid"" | ""contains"" | ""Adolfo Suárez Madrid–Barajas Airport"")"
572,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument, which is a contributing property, was established in the year 2000 in Adams County, east of Franklin County, Pennsylvania in the United States. To the southeast of Adams County, Pennsylvania lies Carroll County, Maryland.","(Adams_County,_Pennsylvania | hasToItsWest | Franklin_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)
(11th_Mississippi_Infantry_Monument | country | ""United States"")","(""11th Mississippi Infantry Monument"" | ""type"" | ""contributing property"")
(""11th Mississippi Infantry Monument"" | ""establishmentYear"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Adams County"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""United States"")
(""11th Mississippi Infantry Monument"" | ""eastOf"" | ""Franklin County"")
(""11th Mississippi Infantry Monument"" | ""locatedIn"" | ""Pennsylvania"")
(""Adams County"" | ""locatedIn"" | ""Pennsylvania"")
(""Adams County"" | ""eastOf"" | ""Franklin County"")
(""Adams County"" | ""southeastOf"" | ""Carroll County"")
(""Carroll County"" | ""location"" | ""Maryland"")"
573,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Post-metal singer Aaron Turner is from the U.S. who played with the band Twilight.,"(Aaron_Turner | genre | Post-metal)
(Aaron_Turner | instrument | Singing)
(Aaron_Turner | origin | United_States)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))","(Aaron Turner | type | Post-metal singer)
(Aaron Turner | place of origin | U.S.)
(Aaron Turner | played with | Twilight)"
574,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Year of No light followed their album Nord with the album live at Roadburn 2008. Nord is in the post metal and sludge metal genre.,"(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | genre | Post-metal)","(""Year of No Light"" | ""followed"" | ""Nord"")
(""Year of No Light"" | ""created"" | ""live at Roadburn 2008"")
(""Nord"" | ""in genre"" | ""post metal"")
(""Nord"" | ""in genre"" | ""sludge metal"")"
575,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Mermaid is a song created by Train and was released on Sony Music Entertainment and Columbia Records. It is 3:16 and is in the reggae music genre. The song was preceded by This’ll Be My Year.,"(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)
(""Mermaid_(Train_song) | precededBy | This'll_Be_My_Year)
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | genre | Reggae)","(""Mermaid"" | rdf:type | ""Song"")
(""Mermaid"" | dct:creator | ""Train"")
(""Mermaid"" | dct:issued | ""Sony Music Entertainment"")
(""Mermaid"" | dct:issued | ""Columbia Records"")
(""Mermaid"" | dbo:time | ""3:16"")
(""Mermaid"" | dbo:musicGenre | ""reggae"")
(""Mermaid"" | dbo:precededBy | ""This’ll Be My Year"")"
576,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The asteroid 1147 Stavropolis, discovered by Grigory Neujmin, has an apoapsis of 418476000000.0 and an orbital period of 1249.6 days.","(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | discoverer | Grigory_Neujmin)
(1147_Stavropolis | apoapsis | 418476000000.0)","(""1147 Stavropolis"" | ""discoveredBy"" | ""Grigory Neujmin"")
(""1147 Stavropolis"" | ""hasApoapsis"" | 418476000000.0)
(""1147 Stavropolis"" | ""hasOrbitalPeriod"" | 1249.6)"
577,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Super Capers is a film starring Danielle Harris and is 98.0 minutes in length.,"(Super_Capers | starring | Danielle_Harris)
(Super_Capers | runtime | 98.0)","(""Super Capers"" | ""starring"" | ""Danielle Harris""),
(""Super Capers"" | ""runtime"" | ""98.0 minutes"")"
578,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson, whose nationality is English, was born in 1726 on January, 1.","(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | nationality | Kingdom_of_England)","(Lady Anne Monson | type | Person)
(Lady Anne Monson | nationality | English)
(Lady Anne Monson | birthDate | 1726-01-01)"
579,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aleksandr Prudnikov, formerly played with FC Spartak Moscow at the Otkrytiye Arena. He currently plays for the FC Amkar Perm football club.","(Aleksandr_Prudnikov | club | FC_Amkar_Perm)
(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(Aleksandr_Prudnikov | currentclub | FC_Amkar_Perm)
(FC_Spartak_Moscow | ground | Otkrytiye_Arena)","(Aleksandr Prudnikov | formerly played for | FC Spartak Moscow)
(FC Spartak Moscow | location | Otkrytiye Arena)
(Aleksandr Prudnikov | currently plays for | FC Amkar Perm)
(Aleksandr Prudnikov | type | football player)
(FC Spartak Moscow | type | football club)
(FC Amkar Perm | type | football club)
(Otkrytiye Arena | type | stadium)"
580,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiação Sportiva Arapiraquense, which is the club's full official name, play in the Campeonato Brasileiro Série C league.","(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | fullName | ""Agremiação Sportiva Arapiraquense"")","(""Agremiação Sportiva Arapiraquense"" | ""officialName"" | ""Agremiação Sportiva Arapiraquense"")
(""Agremiação Sportiva Arapiraquense"" | ""playsIn"" | ""Campeonato Brasileiro Série C"")"
581,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Hypermarcas makes $1,800,000,000 a year.",(Hypermarcas | revenue | 1800000000),"(Hypermarcas | makes | $1,800,000,000 a year)"
582,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina died in Petah Tikva after studying at the School of Applied Arts in Stuttgart.,"(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)
(Liselotte_Grschebina | deathPlace | Petah_Tikva)","(""Liselotte Grschebina"" | ""deathPlace"" | ""Petah Tikva"")
(""Liselotte Grschebina"" | ""almaMater"" | ""School of Applied Arts in Stuttgart"")"
583,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Darinka Dentcheva is a citizen of the United States and resides in New Jersey. The United States is composed of several ethnic groups-including Native Americans-and has a total area of 9833520000000.0 km.,"(Darinka_Dentcheva | citizenship | United_States)
(United_States | ethnicGroup | Native_American)
(Darinka_Dentcheva | residence | New_Jersey)
(United_States | areaTotal | 9833520000000.0)","(Darinka Dentcheva | citizenship | United States)
(Darinka Dentcheva | residence | New Jersey)
(United States | hasCitizen | Darinka Dentcheva)
(United States | hasResident | Darinka Dentcheva)
(United States | ethnicGroup | Native Americans)
(United States | areaTotal | 9833520000000.0 km)"
584,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Mason School of Business are the current tenants of Alan B Miller Hall, which was completed on June 1st, 2009 in Virginia.","(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | completionDate | 2009-06-01)
(Alan_B._Miller_Hall | location | Virginia)","(""Mason School of Business"" | ""occupancy status"" | ""current tenant"")
(""Mason School of Business"" | ""location"" | ""Alan B Miller Hall"")
(""Alan B Miller Hall"" | ""date of completion"" | ""June 1st, 2009"")
(""Alan B Miller Hall"" | ""location"" | ""Virginia"")"
585,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was born on May 2, 1908 within the German Empire.","(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | birthPlace | German_Empire)","(Liselotte Grschebina | birthDate | ""May 2, 1908"")
(Liselotte Grschebina | birthPlace | ""German Empire"")"
586,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The anthem of the German Empire is Das Lied der Deutschen.,(German_Empire | anthem | Das_Lied_der_Deutschen),"(""German Empire"" | ""anthem"" | ""Das Lied der Deutschen"")"
587,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy, who resides in Turkey, has a Turkish nationality.","(Nurhan_Atasoy | nationality | Turkish_people)
(Nurhan_Atasoy | residence | Turkey)","(""Nurhan Atasoy"" | ""resides in"" | ""Turkey"")
(""Nurhan Atasoy"" | ""has nationality"" | ""Turkish"")"
588,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Pontiac ended the manufacturing of the Rageous coupe on October 31, 2010.","(Pontiac_Rageous | bodyStyle | Coupe)
(Pontiac_Rageous | manufacturer | Pontiac)
(Pontiac | extinctionDate | 2010-10-31)","(""Pontiac"" | ""endedManufacturingProduct"" | ""Rageous coupe"")
(""Rageous coupe"" | ""endDateOfProduction"" | ""October 31, 2010"")
(""Pontiac"" | ""endDateOfManufacturing"" | ""October 31, 2010"")"
589,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Abraham A. Ribicoff was born in New Britain, Connecticut and was an American citizen who was married to Ruth Ribicoff. He was in office during the presidency of John F. Kennedy and died in the USA.","(Abraham_A._Ribicoff | spouse | ""Ruth Ribicoff"")
(Abraham_A._Ribicoff | inOfficeWhilePresident | John_F._Kennedy)
(Abraham_A._Ribicoff | nationality | American)
(Abraham_A._Ribicoff | deathPlace | United_States)
(Abraham_A._Ribicoff | birthPlace | New_Britain,_Connecticut)","(Abraham A. Ribicoff | birthPlace | New Britain, Connecticut)
(Abraham A. Ribicoff | nationality | American)
(Abraham A. Ribicoff | spouse | Ruth Ribicoff)
(Abraham A. Ribicoff | officeTerm | John F. Kennedy presidency)
(Abraham A. Ribicoff | deathPlace | USA)"
590,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Bootleg Series Volume I: The Quine Tapes was recorded under the record labels Polydor Records and Universal Music Group in San Francisco. It was released in 2001-10-16.,"(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Polydor_Records)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | San_Francisco)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Universal_Music_Group)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | releaseDate | 2001-10-16)","(""The Bootleg Series Volume I: The Quine Tapes"" | ""recordedUnder"" | ""Polydor Records"")
(""The Bootleg Series Volume I: The Quine Tapes"" | ""recordedUnder"" | ""Universal Music Group"")
(""The Bootleg Series Volume I: The Quine Tapes"" | ""recordedIn"" | ""San Francisco"")
(""The Bootleg Series Volume I: The Quine Tapes"" | ""releaseDate"" | ""2001-10-16"")"
591,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Fellowship of the Ring, a work of fantasy literature, was published by George Allen & Unwin on July 29, 1954.","(The_Fellowship_of_the_Ring | publisher | George_Allen_&_Unwin)
(The_Fellowship_of_the_Ring | literaryGenre | Fantasy_(genre))
(The_Fellowship_of_the_Ring | releaseDate | 1954-07-29)","(""The Fellowship of the Ring"" | ""type"" | ""work of fantasy literature"")
(""The Fellowship of the Ring"" | ""publishedBy"" | ""George Allen & Unwin"")
(""The Fellowship of the Ring"" | ""publicationDate"" | ""July 29, 1954"")"
592,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Bedford Aerodrome is located in Thurleigh that has the area code 01234.,"(Bedford_Aerodrome | location | Thurleigh)
(Thurleigh | areaCode | 01234)","(""Bedford Aerodrome"" | ""is located in"" | ""Thurleigh"")
(""Thurleigh"" | ""has area code"" | ""01234"")"
593,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Chopped fruits, sour cream, condensed milk, granola, shredded coconut and raisins are the main ingredients in Bionico (a dessert). Bionico is a food found in Mexico inhabited by the Mexicans. The currency of the Mexico is the peso.","(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Bionico | mainIngredient | ""Chopped Fruits, Sour Cream, Condensed Milk, Granola, Shredded Coconut, Raisins"")
(Bionico | country | Mexico)","(""Chopped fruits"" | ingredientOf | ""Bionico"")
(""Sour cream"" | ingredientOf | ""Bionico"")
(""Condensed milk"" | ingredientOf | ""Bionico"")
(""Granola"" | ingredientOf | ""Bionico"")
(""Shredded coconut"" | ingredientOf | ""Bionico"")
(""Raisins"" | ingredientOf | ""Bionico"")
(""Bionico"" | type | ""Dessert"")
(""Bionico"" | foundInPlace | ""Mexico"")
(""Mexico"" | currency | ""Peso"")
(""Mexico"" | inhabitedBy | ""Mexicans"")"
594,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The total area of the state of Michigan is 250493000000.0.,(Michigan | areaTotal | 250493000000.0),(Michigan | totalArea | 250493000000.0)
595,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Al Asad Airbase is operated by the United States Air Force and has a runway named ''08/26"".","(Al_Asad_Airbase | operatingOrganisation | United_States_Air_Force)
(Al_Asad_Airbase | runwayName | ""08/26"")","(""Al Asad Airbase"" | ""operator"" | ""United States Air Force"")
(""Al Asad Airbase"" | ""hasRunway"" | ""08/26"")"
596,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nie Haisheng, a citizen of the People’s Republic of China, was a crew member on Shenzhou 6.","(Nie_Haisheng | mission | Shenzhou_6)
(""Nie_Haisheng | nationality | People's_Republic_of_China"")","(""Nie Haisheng"" | ""citizenship"" | ""People’s Republic of China""),
(""Nie Haisheng"" | ""occupation"" | ""crew member""),
(""Nie Haisheng"" | ""affiliation"" | ""Shenzhou 6"")"
597,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina is an Israeli citizen and died in Israel where the population density is 387.63 people per square kilometre of land area.,"(Liselotte_Grschebina | deathPlace | Israel)
(Israel | populationDensity | 387.63)
(Liselotte_Grschebina | nationality | Israel)","(""Liselotte Grschebina"" | ""type"" | ""Person"")
(""Liselotte Grschebina"" | ""citizenship"" | ""Israel"")
(""Liselotte Grschebina"" | ""deathPlace"" | ""Israel"")
(""Israel"" | ""type"" | ""Country"")
(""Israel"" | ""populationDensity"" | ""387.63 people per square kilometre"")"
598,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Brandon Carter who was born in England, graduated from the University of Cambridge and developed General Relativity as his profession. His doctoral advisor was Dennis William Sciama.","(Brandon_Carter | professionalField | General_relativity)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)
(Brandon_Carter | birthPlace | England)
(Brandon_Carter | almaMater | University_of_Cambridge)","(""Brandon Carter"" | ""place of birth"" | ""England"")
(""Brandon Carter"" | ""alma mater"" | ""University of Cambridge"")
(""Brandon Carter"" | ""profession"" | ""General Relativity"")
(""Brandon Carter"" | ""doctoral advisor"" | ""Dennis William Sciama"")"
599,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The duration of the movie Super Capers is 98 minutes.,(Super_Capers | runtime | 98.0),"(""Super Capers"" | ""duration"" | ""98 minutes"")"
600,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Piotr Hallmann is 175.26 cm tall and weighs 70.308 kg. He was born August 25, 1987.","(Piotr_Hallmann | birthDate | 1987-08-25)
(Piotr_Hallmann | height | 175.26)
(Piotr_Hallmann | weight | 70.308)","(Piotr Hallmann | height | 175.26)
(Piotr Hallmann | weight | 70.308)
(Piotr Hallmann | birthDate | August 25, 1987)"
601,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nie Haisheng is a fighter pilot who was born on October 13, 1964 in Zaoyang and is a citizen of the People’s Republic of China.","(Nie_Haisheng | birthPlace | Zaoyang)
(""Nie_Haisheng | nationality | People's_Republic_of_China)
(Nie_Haisheng | birthDate | 1964-10-13)
(Nie_Haisheng | occupation | Fighter_pilot)","(""Nie Haisheng"" | ""type"" | ""Person"")
(""Nie Haisheng"" | ""type"" | ""Fighter Pilot"")
(""Nie Haisheng"" | ""birthDate"" | ""October 13, 1964"")
(""Nie Haisheng"" | ""birthPlace"" | ""Zaoyang"")
(""Nie Haisheng"" | ""citizenship"" | ""People’s Republic of China"")"
602,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Born on January 1, 1934, Nurhan Atasoy is Turk and resides in Istanbul.","(Nurhan_Atasoy | birthDate | 1934-01-01)
(Nurhan_Atasoy | residence | Istanbul)
(Nurhan_Atasoy | citizenship | Turkey)
(Nurhan_Atasoy | nationality | Turkish_people)","(Nurhan Atasoy | birthDate | ""January 1, 1934"")
(Nurhan Atasoy | nationality | ""Turkish"")
(Nurhan Atasoy | residence | ""Istanbul"")"
603,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Super Capers was directed by Ray Griggs and stars Justin Whalin.,"(Super_Capers | starring | Justin_Whalin)
(Super_Capers | director | Ray_Griggs_(director))","(""Super Capers"" | ""directedBy"" | ""Ray Griggs"")
(""Super Capers"" | ""stars"" | ""Justin Whalin"")"
604,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy, located in Dijon, has 16,800 undergraduate students, 2900 staff members, and 27400 students.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfStudents | 27400)
(University_of_Burgundy | campus | Dijon)","(University of Burgundy | location | Dijon)
(University of Burgundy | hasUndergraduateStudents | 16800)
(University of Burgundy | hasStaffMembers | 2900)
(University of Burgundy | hasTotalStudents | 27400)"
605,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was an American who was born in New Hampshire on November 18th, 1923. He was selected by NASA in 1959 and was a crew member of Apollo 14. He died in California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | selectedByNasa | 1959)
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | mission | Apollo_14)","(Alan Shepard | type | American)
(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | birthDate | ""November 18th, 1923"")
(Alan Shepard | employer | NASA)
(NASA | dateOfEstablishment | 1959)
(Alan Shepard | participant | Apollo 14)
(Alan Shepard | deathPlace | California)"
606,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Dennis William Sciama was the doctoral advisor of Brandon Carter whose professional field is General Relativity.,"(Brandon_Carter | professionalField | General_relativity)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)","(Dennis William Sciama | doctoral advisor of | Brandon Carter)
(Brandon Carter | professional field | General Relativity)"
607,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Train song Mermaid is a reggae and pop rock genre. Hip hop and Dub music are derivatives of reggae.,"(Mermaid_(Train_song) | genre | Pop_rock)
(Reggae | derivative | Dub_music)
(Mermaid_(Train_song) | genre | Reggae)
(Reggae | derivative | Hip_hop_music)","(""Mermaid"" | type | ""song"")
(""Mermaid"" | performer | ""Train"")
(""Mermaid"" | genre | ""reggae"")
(""Mermaid"" | genre | ""pop rock"")
(""Reggae"" | derivative | ""Hip hop"")
(""Reggae"" | derivative | ""Dub music"")"
608,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Turkish Nurhan Atasoy was born and raised in the country of Turkey, home of the city of Istanbul and the lira currency.","(Turkey | largestCity | Istanbul)
(Nurhan_Atasoy | nationality | Turkish_people)
(Turkey | currency | Turkish_lira)
(Nurhan_Atasoy | birthPlace | Turkey)","(Nurhan Atasoy | birthPlace | Turkey)
(Nurhan Atasoy | nationality | Turkey)
(Turkey | containsCity | Istanbul)
(Turkey | currency | lira)"
609,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adolfo Suárez Madrid–Barajas Airport is located in Madrid, Paracuellos de Jarama, San Sebastián de los Reyes and Alcobendas. This airport has a runway length of 3,500, and is operated by ENAIRE, which is also located in Madrid.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | ""Madrid, Paracuellos de Jarama, San Sebastián de los Reyes and Alcobendas"")","(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""Madrid"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""Paracuellos de Jarama"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""San Sebastián de los Reyes"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""runway length"" | ""3,500"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""operated by"" | ""ENAIRE"")
(""ENAIRE"" | ""location"" | ""Madrid"")"
610,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina attended the school of Applied Arts in Stuttgart.,(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart),"(""Liselotte Grschebina"" | ""attended"" | ""School of Applied Arts in Stuttgart"")"
611,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The language of Israel is Modern Hebrew.,(Israel | language | Modern_Hebrew),(Israel | language | Modern Hebrew)
612,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Expect a Miracle is produced by Brian Kelly, Expect a Miracle was recorded by the artist Brian Kelly, Expect a Miracle is a compilation album, Expect a Miracle is in the instrumental music genre, Expect a Miracle has a runtime of 54:56.","(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | type | Compilation_Album)
(Expect_a_Miracle | genre | Instrumental_music)","(""Expect a Miracle"" | ""producer"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""recordedBy"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""type"" | ""compilation album"")
(""Expect a Miracle"" | ""genre"" | ""instrumental music"")
(""Expect a Miracle"" | ""runtime"" | ""54:56"")"
613,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Abraham A. Ribicoff was an American born in New Britain, Connecticut who was in office while John F. Kennedy was president. He was the spouse of Ruth Ribicoff and later died in the United States.","(Abraham_A._Ribicoff | spouse | ""Ruth Ribicoff"")
(Abraham_A._Ribicoff | inOfficeWhilePresident | John_F._Kennedy)
(Abraham_A._Ribicoff | nationality | American)
(Abraham_A._Ribicoff | deathPlace | United_States)
(Abraham_A._Ribicoff | birthPlace | New_Britain,_Connecticut)","(Abraham A. Ribicoff | type | American)
(Abraham A. Ribicoff | place of birth | New Britain)
(New Britain | is in | Connecticut)
(Abraham A. Ribicoff | hold office during the presidency of | John F. Kennedy)
(Abraham A. Ribicoff | spouse | Ruth Ribicoff)
(Abraham A. Ribicoff | place of death | United States)"
614,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva (given name Olga Nikolaevna Bondareva) was born in Soviet Leningrad on April 27, 1937. She is known for the Bondareva-Shapley theorem.","(Olga_Bondareva | birthPlace | Leningrad,_USSR)
(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")","(Olga Bondareva | birthDate | ""April 27, 1937"")
(Olga Bondareva | birthPlace | ""Soviet Leningrad"")
(Olga Bondareva | givenName | ""Olga Nikolaevna Bondareva"")
(Olga Bondareva | knownFor | ""Bondareva-Shapley theorem"")"
615,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology, affiliated with the Visvesvaraya Technological University and given the 'Technical Campus' status by All India Council for Technical Education, is located at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | city | Bangalore)
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)","(Acharya Institute of Technology | affiliatedWith | Visvesvaraya Technological University)
(Acharya Institute of Technology | givenStatusBy | All India Council for Technical Education)
(Acharya Institute of Technology | status | 'Technical Campus')
(Acharya Institute of Technology | locatedAt | Soldevanahalli)
(Acharya Institute of Technology | locatedAt | Acharya Dr. Sarvapalli Radhakrishnan Road)
(Acharya Institute of Technology | locatedAt | Hessarghatta Main Road)
(Acharya Institute of Technology | locatedAt | Bangalore - 560090)"
616,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aaron Turner was born in the United States and is a post metal musician who played with the band, Twilight.","(Aaron_Turner | genre | Post-metal)
(Aaron_Turner | origin | United_States)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))","(Aaron Turner | was born in | United States)
(Aaron Turner | is a | post metal musician)
(Aaron Turner | played with | Twilight)"
617,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Abraham A. Ribicoff was married to Ruth Ribicoff and was in office at the same time that John F. Kennedy was president. Abraham was a citizen of the United States where he died. In the United States, African Americans are an ethnic group.","(Abraham_A._Ribicoff | spouse | ""Ruth Ribicoff"")
(Abraham_A._Ribicoff | inOfficeWhilePresident | John_F._Kennedy)
(Abraham_A._Ribicoff | nationality | American)
(Abraham_A._Ribicoff | deathPlace | United_States)
(United_States | ethnicGroup | African_Americans)","(Abraham A. Ribicoff | spouse | Ruth Ribicoff)
(Abraham A. Ribicoff | office | John F. Kennedy)
(Abraham A. Ribicoff | citizenship | United States)
(Abraham A. Ribicoff | deathPlace | United States)
(United States | hasEthnicGroup | African Americans)"
618,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Tim Brooke-Taylor was one of the stars of Bananaman which was broadcast by the BBC. The BBC are based at Broadcasting House in London and they last aired the show on 15/04/1986.,"(BBC | city | Broadcasting_House)
(Bananaman | lastAired | ""1986-04-15"")
(Bananaman | broadcastedBy | BBC)
(Bananaman | starring | Tim_Brooke-Taylor)","(""Tim Brooke-Taylor"" | ""starOf"" | ""Bananaman"")
(""Bananaman"" | ""broadcastedBy"" | ""BBC"")
(""BBC"" | ""basedAt"" | ""Broadcasting House"")
(""Broadcasting House"" | ""locatedIn"" | ""London"")
(""Bananaman"" | ""lastAiredOn"" | ""15/04/1986"")
(""BBC"" | ""lastAired"" | ""Bananaman"")"
619,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument was established in the year 2000 in Gettysburg, Pennsylvania in Adams County.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | municipality | Gettysburg,_Pennsylvania)","(""11th Mississippi Infantry Monument"" | ""establishmentYear"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""locatedIn"" | ""Gettysburg"")
(""Gettysburg"" | ""isPartOf"" | ""Pennsylvania"")
(""Gettysburg"" | ""isPartOf"" | ""Adams County"")
(""11th Mississippi Infantry Monument"" | ""locatedIn"" | ""Pennsylvania"")
(""11th Mississippi Infantry Monument"" | ""locatedIn"" | ""Adams County"")"
620,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng born in Zaoyang took part in the Shenzhou 10 mission.,"(Nie_Haisheng | birthPlace | Zaoyang)
(Nie_Haisheng | mission | Shenzhou_10)","(""Nie Haisheng"" | ""birthPlace"" | ""Zaoyang"")
(""Nie Haisheng"" | ""participation"" | ""Shenzhou 10 mission"")"
621,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nurhan Atasoy was born in Turkey which makes him of Turkish citizenship and he resides there also.,"(Nurhan_Atasoy | citizenship | Turkey)
(Nurhan_Atasoy | birthPlace | Turkey)
(Nurhan_Atasoy | nationality | Turkish_people)
(Nurhan_Atasoy | residence | Turkey)","(""Nurhan Atasoy"" | ""birthPlace"" | ""Turkey""),
(""Nurhan Atasoy"" | ""nationality"" | ""Turkish""),
(""Nurhan Atasoy"" | ""residence"" | ""Turkey"")"
622,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Dijon is located in the country of France.,(Dijon | country | France),(Dijon | location | France)
623,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Alan Shepard was born in New Hampshire on November 18th 1923; he graduated from NWC in 1957 with an M.A and was also awarded the Distinguished Service Medal by the United States Navy.,"(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | almaMater | ""NWC, M.A. 1957"")
(Alan_Shepard | award | Distinguished_Service_Medal_(United_States_Navy))","(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | birthDate | November 18th 1923)
(Alan Shepard | graduatedFrom | NWC)
(Alan Shepard | graduationYear | 1957)
(Alan Shepard | degree | M.A)
(Alan Shepard | awarded | Distinguished Service Medal)
(Distinguished Service Medal | awardGivenBy | United States Navy)"
624,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","ALCO RS-3, which is 17068.8 millimetres, has a V12 engine and a diesel-electric transmission.","(ALCO_RS-3 | engine | V12_engine)
(ALCO_RS-3 | powerType | Diesel-electric_transmission)
(ALCO_RS-3 | length | 17068.8 (millimetres))","(""ALCO RS-3"" | ""length"" | ""17068.8 millimetres"")
(""ALCO RS-3"" | ""hasEngine"" | ""V12 engine"")
(""ALCO RS-3"" | ""hasTransmission"" | ""diesel-electric transmission"")"
625,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","J.R.R. Tolkien wrote The Fellowship of the Ring, as well as the sequel, The Two Towers, and the book that preceded it, the Hobbit. The Fellowship of the Ring is in the fantasy genre. It was published by George Allen & Unwin.","(The_Fellowship_of_the_Ring | publisher | George_Allen_&_Unwin)
(The_Fellowship_of_the_Ring | literaryGenre | Fantasy_(genre))
(The_Fellowship_of_the_Ring | followedBy | The_Two_Towers)
(The_Fellowship_of_the_Ring | author | J._R._R._Tolkien)
(The_Fellowship_of_the_Ring | precededBy | The_Hobbit)","(J.R.R. Tolkien | wrote | The Fellowship of the Ring)
(J.R.R. Tolkien | wrote | The Two Towers)
(J.R.R. Tolkien | wrote | The Hobbit)
(The Fellowship of the Ring | sequel | The Two Towers)
(The Two Towers | precededBy | The Hobbit)
(The Fellowship of the Ring | genre | fantasy)
(The Fellowship of the Ring | publisher | George Allen & Unwin)"
626,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The University of Burgundy has 27400 total students with 16800 as undergraduates. It has a staff of 2900 and is located in the city of Dijon.,"(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfStudents | 27400)
(University_of_Burgundy | city | Dijon)","(""University of Burgundy"" | ""totalStudents"" | 27400)
(""University of Burgundy"" | ""undergraduateStudents"" | 16800)
(""University of Burgundy"" | ""staff"" | 2900)
(""University of Burgundy"" | ""location"" | ""Dijon"")"
627,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Adenan Satem succeeded Abdul Taib Mahmud in the Parti Pesaka Bumiputera Bersatu party.,"(Abdul_Taib_Mahmud | successor | Adenan_Satem)
(Abdul_Taib_Mahmud | party | Parti_Pesaka_Bumiputera_Bersatu)","(""Adenan Satem"" | ""successor"" | ""Abdul Taib Mahmud"")
(""Adenan Satem"" | ""memberOf"" | ""Parti Pesaka Bumiputera Bersatu"")
(""Abdul Taib Mahmud"" | ""predecessor"" | ""Adenan Satem"")
(""Abdul Taib Mahmud"" | ""memberOf"" | ""Parti Pesaka Bumiputera Bersatu"")"
628,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Darlington is a town in the United Kingdom.,(Darlington | country | United_Kingdom),"(Darlington | type | Town)
(Darlington | location | United Kingdom)"
629,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The runway at the Bedford Aerodrome, named ""08/26"", is 1095 in length and its surface is concrete. It serves the Bedford Autodrome and is 83.2 meters above sea level.","(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | elevationAboveTheSeaLevel | 83.2104)
(Bedford_Aerodrome | runwayLength | 1095.0)
(Bedford_Aerodrome | runwayName | ""08/26"")
(Bedford_Aerodrome | runwaySurfaceType | Concrete)","(""Bedford Aerodrome"" | ""hasRunway"" | ""08/26"")
(""08/26"" | ""isAt"" | ""Bedford Aerodrome"")
(""08/26"" | ""length"" | 1095)
(""08/26"" | ""hasSurface"" | ""concrete"")
(""08/26"" | ""serves"" | ""Bedford Autodrome"")
(""Bedford Autodrome"" | ""isServedBy"" | ""08/26"")
(""08/26"" | ""elevationAboveSeaLevel"" | 83.2)"
630,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",MotorSport Vision is the operating organisation for Bedford Aerodrome whose ICAO identifier is EGBF.,"(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | icaoLocationIdentifier | EGBF)","(""MotorSport Vision"" | ""type"" | ""operating organisation"")
(""MotorSport Vision"" | ""operates"" | ""Bedford Aerodrome"")
(""Bedford Aerodrome"" | ""ICAO identifier"" | ""EGBF"")"
631,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was born in New Hampshire, in the United States, on November 18th, 1923. In 1957, he graduated from NWC with an M.A. He served as Chief of the Astronaut Office in 1963, and served as a crew member of the Apollo 14. Shepard died in California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | servedAsChiefOfTheAstronautOfficeIn | 1963)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | almaMater | ""NWC, M.A. 1957"")
(Alan_Shepard | mission | Apollo_14)","(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | country | United States)
(Alan Shepard | birthDate | November 18th, 1923)
(Alan Shepard | graduatedFrom | NWC)
(Alan Shepard | education | M.A.)
(Alan Shepard | yearOfGraduation | 1957)
(Alan Shepard | servedIn | Astronaut Office)
(Alan Shepard | role | Chief)
(Alan Shepard | yearOfService | 1963)
(Alan Shepard | crewMemberOf | Apollo 14)
(Alan Shepard | deathPlace | California)"
632,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina Was born within the German Empire which was founded on January 1, 1871.","(Liselotte_Grschebina | birthPlace | German_Empire)
(German_Empire | foundingDate | 1871-01-01)","(""Liselotte Grschebina"" | ""birthPlace"" | ""German Empire"")
(""German Empire"" | ""foundingDate"" | ""January 1, 1871"")"
633,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Year of No Light's ""Live at Roadburn 2008"" album was preceded by their ""Nord"" album.",(Live_at_Roadburn_2008_(Year_of_No_Light_album) | precededBy | Nord_(Year_of_No_Light_album)),"(""Live at Roadburn 2008"" | precededBy | ""Nord"")
(""Nord"" | followedBy | ""Live at Roadburn 2008"")
(""Live at Roadburn 2008"" | artist | ""Year of No Light"")
(""Nord"" | artist | ""Year of No Light"")"
634,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Agremiação Sportiva Arapiraquense nicknamed Asa Gigante play in the Campeonato Brasileiro Série C league from Brazil.,"(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | nickname | ""Asa Gigante \'\'"")
(Campeonato_Brasileiro_Série_C | country | Brazil)","(""Agremiação Sportiva Arapiraquense"" | ""nickname"" | ""Asa Gigante""),
(""Agremiação Sportiva Arapiraquense"" | ""participates in"" | ""Campeonato Brasileiro Série C""),
(""Campeonato Brasileiro Série C"" | ""location"" | ""Brazil""),
(""Agremiação Sportiva Arapiraquense"" | ""location"" | ""Brazil"")"
635,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The location of the Bedford Aerodrome is Thurleigh where the area code is 01234.,"(Bedford_Aerodrome | location | Thurleigh)
(Thurleigh | areaCode | 01234)","(""Bedford Aerodrome"" | ""location"" | ""Thurleigh"")
(""Thurleigh"" | ""area code"" | ""01234"")"
636,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aaron Turner is a singer in the Black Metal band, Twilight.","(Aaron_Turner | instrument | Singing)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))
(Aaron_Turner | genre | Black_metal)","(Aaron Turner | type | Singer)
(Aaron Turner | member of | Twilight)
(Twilight | type | Black Metal band)"
637,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Mason School of Business is located at the Alan B Miller Hall, 101 Ukrop Way in Virginia, USA. The building was designed by Robert A M Stern and construction started on the 30th of March 2007.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | location | Virginia)
(Mason_School_of_Business | country | United_States)","(""Mason School of Business"" | ""location"" | ""Alan B Miller Hall, 101 Ukrop Way, Virginia, USA"")
(""Alan B Miller Hall"" | ""locatedIn"" | ""Virginia, USA"")
(""Alan B Miller Hall"" | ""designer"" | ""Robert A M Stern"")
(""Alan B Miller Hall"" | ""constructionStartDate"" | ""30th of March 2007"")"
638,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala (located in the Pacific Daylight time zone) is part of Morelos. The city has a leader called the Governator, and its population density is 1604 .","(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | leaderTitle | Governator)
(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | timeZone | Pacific_Daylight_Time)","(""Ciudad Ayala"" | ""location"" | ""Morelos"")
(""Ciudad Ayala"" | ""time zone"" | ""Pacific Daylight"")
(""Ciudad Ayala"" | ""title of leader"" | ""Governator"")
(""Ciudad Ayala"" | ""population density"" | 1604)"
639,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aaron Turner, born in the United States, sings for a living with the post-metal band Twilight.","(Aaron_Turner | genre | Post-metal)
(Aaron_Turner | instrument | Singing)
(Aaron_Turner | origin | United_States)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))","(Aaron Turner | birthPlace | United States)
(Aaron Turner | occupation | singer)
(Aaron Turner | memberOf | Twilight)
(Twilight | genre | post-metal)"
640,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nie Haisheng born on October 13, 1964 was part of Shenzhou 10 mission.","(Nie_Haisheng | mission | Shenzhou_10)
(Nie_Haisheng | birthDate | 1964-10-13)","(""Nie Haisheng"" | ""birthDate"" | ""October 13, 1964"")
(""Nie Haisheng"" | ""partOf"" | ""Shenzhou 10 mission"")"
641,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument was established in 2000 in Adams County, Pennsylvania which is northeast to Frederick County, Maryland.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSouthwest | Frederick_County,_Maryland)","(""11th Mississippi Infantry Monument"" | ""established in"" | 2000)
(""11th Mississippi Infantry Monument"" | ""located in"" | ""Adams County"")
(""Adams County"" | ""located in"" | ""Pennsylvania"")
(""Adams County"" | ""northeast to"" | ""Frederick County"")
(""Frederick County"" | ""located in"" | ""Maryland"")"
642,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bananaman, the TV series, last aired on 15th April 1986 and it was shown on the BBC. Tim Brooke-Taylor starred in the series. The BBC headquarters is called Broadcasting House.","(BBC | city | Broadcasting_House)
(Bananaman | lastAired | ""1986-04-15"")
(Bananaman | broadcastedBy | BBC)
(Bananaman | starring | Tim_Brooke-Taylor)","(""Bananaman"" | ""type"" | ""TV series"")
(""Bananaman"" | ""airDateEnd"" | ""1986-04-15"")
(""Bananaman"" | ""broadcaster"" | ""BBC"")
(""Tim Brooke-Taylor"" | ""starredIn"" | ""Bananaman"")
(""BBC"" | ""name"" | ""Broadcasting House"")"
643,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",English Without Tears is a movie written by both Anatole de Grunwald and Terence Rattigan. It was directed by Harold French.,"(English_Without_Tears | director | Harold_French)
(English_Without_Tears | writer | Anatole_de_Grunwald)
(English_Without_Tears | writer | Terence_Rattigan)","(""English Without Tears"" | ""writer"" | ""Anatole de Grunwald"")
(""English Without Tears"" | ""writer"" | ""Terence Rattigan"")
(""English Without Tears"" | ""director"" | ""Harold French"")"
644,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Mexican city of Ciudad Ayala is located in the state of Morelos and falls into the UTC offset -6 time zone. It is partly managed by a City Manager and uses a system of government known as council-manager government.,"(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | governmentType | Council-manager_government)
(Ciudad_Ayala | utcOffset | −6)
(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | country | Mexico)","(""Ciudad Ayala"" | ""country"" | ""Mexico"")
(""Ciudad Ayala"" | ""locatedIn"" | ""Morelos"")
(""Ciudad Ayala"" | ""timeZone"" | ""UTC offset -6"")
(""Ciudad Ayala"" | ""managedBy"" | ""City Manager"")
(""Ciudad Ayala"" | ""governmentType"" | ""council-manager government"")"
645,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",E-Vinyl is the record label for Year of No Light.,(Year_of_No_Light | recordLabel | E-Vinyl),"(""E-Vinyl"" | ""type"" | ""Record Label"")
(""Year of No Light"" | ""type"" | ""Band"")
(""E-Vinyl"" | ""recordLabelFor"" | ""Year of No Light"")"
646,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Asian-American is a United States ethnic grouping.,(United_States | ethnicGroup | Asian_American),"(""Asian-American"" | ""isA"" | ""United States ethnic grouping"")"
647,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Mexico’s citizens are called Mexicans and the currency used there is the peso. In Mexico, you can find a dessert called Bionico which can sometimes be made using cottage cheese.","(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Bionico | country | Mexico)
(Bionico | dishVariation | Cottage_cheese)","(""Mexico"" | nationality | ""Mexicans"")
(""Mexico"" | currency | ""Peso"")
(""Bionico"" | location | ""Mexico"")
(""Bionico"" | ingredient | ""cottage cheese"")"
648,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The asteroid 1147 Stavropolis has an apoapsis of 418476000000.0, a rotation period of 20378.5, a periapsis of 260855000000.0, and an orbital period of 1249.6 days.","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | rotationPeriod | 20378.5)
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)","(1147 Stavropolis | apoapsis | 418476000000.0)
(1147 Stavropolis | rotation period | 20378.5)
(1147 Stavropolis | periapsis | 260855000000.0)
(1147 Stavropolis | orbital period | 1249.6 days)"
649,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy's, born on January 1, 1934, is a Turkish citizen living in Istanbul, Turkey.","(Nurhan_Atasoy | birthDate | 1934-01-01)
(Nurhan_Atasoy | residence | Istanbul)
(Nurhan_Atasoy | citizenship | Turkey)
(Nurhan_Atasoy | residence | Turkey)","(""Nurhan Atasoy"" | ""birthDate"" | ""January 1, 1934"")
(""Nurhan Atasoy"" | ""citizenship"" | ""Turkey"")
(""Nurhan Atasoy"" | ""residence"" | ""Istanbul, Turkey"")
(""Nurhan Atasoy"" | ""birthPlace"" | ""Turkey"")"
650,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Benny Blanco is a musical artist associated with Stargate productions team.,(Stargate_(production_team) | associatedBand/associatedMusicalArtist | Benny_Blanco),"(""Benny Blanco"" | ""type"" | ""musical artist""),
(""Benny Blanco"" | ""associatedWith"" | ""Stargate productions team"")"
651,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bootleg Series Volume 1: The Quine Tapes created and produced by The Velvet Underground is a rock genre and has a runtime of 230.05 minutes.,"(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | genre | Rock_music)","(""Bootleg Series Volume 1: The Quine Tapes"" | creator | ""The Velvet Underground"")
(""Bootleg Series Volume 1: The Quine Tapes"" | producer | ""The Velvet Underground"")
(""Bootleg Series Volume 1: The Quine Tapes"" | genre | ""rock"")
(""Bootleg Series Volume 1: The Quine Tapes"" | runtime | ""230.05 minutes"")"
652,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The founding date of Gdynia, Poland was on February 10, 1926.","(Gdynia,_Poland | foundingDate | 1926-02-10)","(Gdynia | foundingDate | ""February 10, 1926"")
(Gdynia | locationCountry | Poland)"
653,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Trane is a building materials industry that employs 29,000 people.","(Trane | numberOfEmployees | 29000)
(Trane | industry | Building_materials)","(""Trane"" | ""type"" | ""Building Materials Industry""),
(""Trane"" | ""employs"" | ""29,000"")"
654,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Harry Carey was born in 1878 and directed McVeagh of the South Seas alongside Cyril Bruce. Carey also played in the film, which can be found with 0004319 ID in the IMDb.","(McVeagh_of_the_South_Seas | imdbId | 0004319)
(McVeagh_of_the_South_Seas | director | Cyril_Bruce)
(McVeagh_of_the_South_Seas | director | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878))","(Harry Carey | birthDate | 1878)
(Harry Carey | directed | McVeagh of the South Seas)
(Harry Carey | collaboratedWith | Cyril Bruce)
(McVeagh of the South Seas | hasDirector | Harry Carey)
(McVeagh of the South Seas | hasActor | Harry Carey)
(McVeagh of the South Seas | collaboratedWith | Cyril Bruce)
(Cyril Bruce | collaboratedWith | Harry Carey)
(Cyril Bruce | involvedIn | McVeagh of the South Seas)
(Harry Carey | actedIn | McVeagh of the South Seas)
(McVeagh of the South Seas | IMDbID | 0004319)
"
655,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Death on a Factory Farm is produced by Sarah Teale.,(Death_on_a_Factory_Farm | producer | Sarah_Teale),"(""Death on a Factory Farm"" | ""producer"" | ""Sarah Teale"")"
656,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The pharmaceutical and healthcare company, Hypermarcas was founded on January 1, 2001. It also produces cosmetics.","(Hypermarcas | foundingDate | 2001-01-01)
(Hypermarcas | product | Healthcare)
(Hypermarcas | product | Cosmetics)
(Hypermarcas | industry | Pharmaceuticals)","(""Hypermarcas"" | ""type"" | ""Pharmaceutical Company"")
(""Hypermarcas"" | ""type"" | ""Healthcare Company"")
(""Hypermarcas"" | ""foundingDate"" | ""2001-01-01""^^xsd:date)
(""Hypermarcas"" | ""industry"" | ""cosmetics"")"
657,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Expect a Miracle, produced by Brian Kelly, was followed by Afterplay by Brian Kelly.","(Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album))
(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))","(""Expect a Miracle"" | ""producer"" | ""Brian Kelly"")
(""Afterplay"" | ""producer"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""followedBy"" | ""Afterplay"")"
658,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The construction of Alan B. Miller Hall started on March 30th, 2007. Robert A. M. Stern is the architect of the building. Alan B. Miller Hall is located at 101 Ukrop Way, Williamsburg, Virginia, and the current tenant is the Mason School of Business. The College of William and Mary owns the Hall.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | location | Williamsburg,_Virginia)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(Alan B. Miller Hall | startDate | March 30th, 2007)
(Alan B. Miller Hall | architect | Robert A. M. Stern)
(Alan B. Miller Hall | location | 101 Ukrop Way, Williamsburg, Virginia)
(Alan B. Miller Hall | tenant | Mason School of Business)
(Alan B. Miller Hall | owner | College of William and Mary)"
659,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nie Haisheng was a fighter pilot and a citizen of the People’s Republic of China who was born on October 13, 1964. He was a crew member on Shenzhou 6 and took part in the Shenzhou 10 mission.","(Nie_Haisheng | mission | Shenzhou_10)
(Nie_Haisheng | mission | Shenzhou_6)
(""Nie_Haisheng | nationality | People's_Republic_of_China)
(Nie_Haisheng | birthDate | 1964-10-13)
(Nie_Haisheng | occupation | Fighter_pilot)","(Nie Haisheng | type | Fighter Pilot)
(Nie Haisheng | type | Citizen)
(Nie Haisheng | citizenship | People’s Republic of China)
(Nie Haisheng | birthDate | October 13, 1964)
(Nie Haisheng | crewMemberOn | Shenzhou 6)
(Nie Haisheng | participantIn | Shenzhou 10 mission)"
660,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The total area of Turkey is 783,356 sq/km.",(Turkey | areaTotal | 783356.0),(Turkey | totalArea | 783356 sq/km)
661,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Gregory Allen was the director of the movie McVeagh of the South Seas,produced by the Progressive Motion Picture Company.","(McVeagh_of_the_South_Seas | director | Gregory_Allen)
(McVeagh_of_the_South_Seas | producer | The_Progressive_Motion_Picture_Company)","(Gregory Allen | type | Director)
(Gregory Allen | directed | McVeagh of the South Seas)
(McVeagh of the South Seas | directedBy | Gregory Allen)
(McVeagh of the South Seas | producedBy | Progressive Motion Picture Company)
(Progressive Motion Picture Company | type | Production Company)
(Progressive Motion Picture Company | produced | McVeagh of the South Seas)"
662,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Train song Mermaid was written by Espen Lind.,(Mermaid_(Train_song) | writer | Espen_Lind),"(""Mermaid"" | type | ""song"")
(""Mermaid"" | creator | ""Espen Lind"")
(""Mermaid"" | partOf | ""Train"")
(""Espen Lind"" | created | ""Mermaid"")
(""Train"" | containsSong | ""Mermaid"")"
663,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aaron Turner is a singer who played with the band Twilight and began performing in 1995.,"(Aaron_Turner | instrument | Singing)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))
(Aaron_Turner | activeYearsStartYear | 1995)","(Aaron Turner | type | Singer)
(Aaron Turner | playedWith | Twilight)
(Aaron Turner | beganPerforming | 1995)
(Twilight | hadMember | Aaron Turner)"
664,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Alan Shepard is an American born in New Hampshire and who died in California.,"(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)","(Alan Shepard | type | American)
(Alan Shepard | place of birth | New Hampshire)
(Alan Shepard | place of death | California)"
665,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina, a photographer, was an alumni of the School of Applied Arts in Stuttgart.","(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)
(Liselotte_Grschebina | professionalField | Photographer)","(""Liselotte Grschebina"" | ""type"" | ""Photographer"")
(""Liselotte Grschebina"" | ""almaMater"" | ""School of Applied Arts in Stuttgart"")"
666,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy campus, located in Dijon, France, has 16,800 undergraduate and 9,400 postgraduate students.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | campus | Dijon)
(University_of_Burgundy | city | Dijon)
(University_of_Burgundy | numberOfPostgraduateStudents | 9400)
(University_of_Burgundy | country | France)","(""University of Burgundy"" | ""location"" | ""Dijon, France"")
(""University of Burgundy"" | ""has undergraduate students"" | 16800)
(""University of Burgundy"" | ""has postgraduate students"" | 9400)"
667,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers was written and directed by Ray Griggs. Starring Michael Rooker, the movie clocked in at 98 minutes. The budget for Super Capers was 2,000,000 dollars but only grossed $30,955 at the box office.","(Super_Capers | starring | Michael_Rooker)
(Super_Capers | budget | 2000000.0)
(Super_Capers | writer | Ray_Griggs_(director))
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | runtime | 98.0)
(Super_Capers | gross | 30955.0)","(""Super Capers"" | ""writtenBy"" | ""Ray Griggs"")
(""Super Capers"" | ""directedBy"" | ""Ray Griggs"")
(""Super Capers"" | ""starring"" | ""Michael Rooker"")
(""Super Capers"" | ""duration"" | 98)
(""Super Capers"" | ""budget"" | 2000000)
(""Super Capers"" | ""boxOffice"" | 30955)"
668,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Train song Mermaid was written in the reggae music genre by Amund Bjorklund.,"(Mermaid_(Train_song) | genre | Reggae)
(Mermaid_(Train_song) | writer | Amund_Bjørklund)","(""Mermaid"" | type | ""Train song"")
(""Mermaid"" | genre | ""reggae music"")
(""Mermaid"" | writtenBy | ""Amund Bjorklund"")"
669,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers starred Michael Rooker, who was born on April 6th 1955.","(Super_Capers | starring | Michael_Rooker)
(Michael_Rooker | birthDate | 1955-04-06)","(""Super Capers"" | starring | ""Michael Rooker""),
(""Michael Rooker"" | birthDate | ""April 6th 1955"")"
670,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The production team Stargate is associated with the musical artist Benny Blanco.,(Stargate_(production_team) | associatedBand/associatedMusicalArtist | Benny_Blanco),"(""Stargate"" | ""is associated with"" | ""Benny Blanco"")"
671,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","McVeagh of the South Seas IMDb id is 0004319. The film was directed by Cyril Bruce and Harry Carey, who also starred there. The Progressive Motion Picture Company served as a distributor of the film.","(McVeagh_of_the_South_Seas | imdbId | 0004319)
(McVeagh_of_the_South_Seas | director | Cyril_Bruce)
(McVeagh_of_the_South_Seas | director | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | producer | The_Progressive_Motion_Picture_Company)","(""McVeagh of the South Seas"" | ""IMDb id"" | ""0004319"")
(""McVeagh of the South Seas"" | ""director"" | ""Cyril Bruce"")
(""McVeagh of the South Seas"" | ""director"" | ""Harry Carey"")
(""McVeagh of the South Seas"" | ""actor"" | ""Harry Carey"")
(""McVeagh of the South Seas"" | ""distributor"" | ""The Progressive Motion Picture Company"")"
672,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The album Take It Off was followed by the EP titled 'Til Death Do Us Part.,"(""Take_It_Off! | followedBy | 'Til_Death_Do_Us_Part_(EP)"")","(""Take It Off"" | ""followedBy"" | ""'Til Death Do Us Part"")"
673,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala (UTC offset -6 time zone) has a population density of 1604.0. Ciudad Ayala is a part of Morelos.,"(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | utcOffset | −6)
(Ciudad_Ayala | isPartOf | Morelos)","(""Ciudad Ayala"" | ""utcOffset"" | ""-6"")
(""Ciudad Ayala"" | ""isPartOf"" | ""Morelos"")
(""Ciudad Ayala"" | ""populationDensity"" | ""1604.0"")"
674,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bionico is a dessert chopped fruits, sour cream, condensed milk, granola, shredded coconut and raisins as the main ingredients.","(Bionico | course | Dessert)
(Bionico | mainIngredient | ""Chopped Fruits, Sour Cream, Condensed Milk, Granola, Shredded Coconut, Raisins"")","(""Bionico"" | ""type"" | ""dessert"")
(""Bionico"" | ""ingredient"" | ""chopped fruits"")
(""Bionico"" | ""ingredient"" | ""sour cream"")
(""Bionico"" | ""ingredient"" | ""condensed milk"")
(""Bionico"" | ""ingredient"" | ""granola"")
(""Bionico"" | ""ingredient"" | ""shredded coconut"")
(""Bionico"" | ""ingredient"" | ""raisins"")"
675,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology is located in India at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | country | ""India"")","(Acharya Institute of Technology | location | India) 
(Acharya Institute of Technology | address | ""Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090"") 
(Acharya Institute of Technology | city | Bangalore)
(Acharya Institute of Technology | postalCode | 560090)"
676,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson was born 1726-01-01 in Darlington and resided in India before her death on February 18, 1776.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | deathDate | 1776-02-18)
(Lady_Anne_Monson | residence | India)","(""Lady Anne Monson"" | ""birthDate"" | ""1726-01-01"")
(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington"")
(""Lady Anne Monson"" | ""residence"" | ""India"")
(""Lady Anne Monson"" | ""deathDate"" | ""1776-02-18"")"
677,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Turn Me On is a punk blues album preceded by the album Let it Breed which had followed the Love American Style album.,"(Turn_Me_On_(album) | genre | Punk_blues)
(Turn_Me_On_(album) | precededBy | Let_It_Breed)
(Let_It_Breed | precededBy | Love_American_Style_(album))","(""Turn Me On"" | type | ""punk blues album"")
(""Turn Me On"" | preceded by | ""Let it Breed"")
(""Let it Breed"" | type | ""album"")
(""Let it Breed"" | followed | ""Love American Style"")
(""Love American Style"" | type | ""album"")"
678,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",English Without Tears was written by Anatole de Grunwald and Terence Rattigan. Bernard Knowles is the cinematographer and the movie can be found on the IMDb by inputting the Id 0711905.,"(English_Without_Tears | cinematography | Bernard_Knowles)
(Terence_Rattigan | imdbId | 0711905)
(English_Without_Tears | writer | Anatole_de_Grunwald)
(English_Without_Tears | writer | Terence_Rattigan)","(""English Without Tears"" | ""writtenBy"" | ""Anatole de Grunwald"")
(""English Without Tears"" | ""writtenBy"" | ""Terence Rattigan"")
(""English Without Tears"" | ""cinematographer"" | ""Bernard Knowles"")
(""English Without Tears"" | ""IMDbId"" | ""0711905"")"
679,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala has a population density of 1604.0, is 1147.0 above sea level, is in the Pacific Daylight time zone and has a leader which is called the governator.","(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | leaderTitle | Governator)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)
(Ciudad_Ayala | timeZone | Pacific_Daylight_Time)","(""Ciudad Ayala"" | ""populationDensity"" | 1604.0)
(""Ciudad Ayala"" | ""elevation"" | 1147.0)
(""Ciudad Ayala"" | ""timeZone"" | ""Pacific Daylight"")
(""Ciudad Ayala"" | ""leaderTitle"" | ""governator"")"
680,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bananaman the TV series starring Bill Oddie was shown on the BBC and last aired on 15th April 1986.,"(Bananaman | starring | Bill_Oddie)
(Bananaman | lastAired | ""1986-04-15"")
(Bananaman | broadcastedBy | BBC)","(""Bananaman"" | type | ""TV series"")
(""Bananaman"" | ""starring"" | ""Bill Oddie"")
(""Bananaman"" | ""shownOn"" | ""BBC"")
(""Bananaman"" | ""lastAiredOn"" | ""15th April 1986"")"
681,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adolfo Suárez Madrid–Barajas Airport is located in Alcobendas. This airport is operated by ENAIRE, which is located in Madrid, Spain. The runway is named 18L/36R and has a length of 4,349 meters.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 4349.0)
(ENAIRE | city | Madrid)
(Madrid | country | Spain)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayName | ""18L/36R"")","(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""operator"" | ""ENAIRE"")
(""ENAIRE"" | ""location"" | ""Madrid, Spain"")
(""18L/36R"" | ""isPartOf"" | ""Adolfo Suárez Madrid–Barajas Airport"")
(""18L/36R"" | ""length"" | ""4,349 meters"")"
682,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nord is an album by Year of No Light in the sludge genre and post metal genre whose length is 58.41. It was released by the record label Crucial Blast on 6-09-2006.,"(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | genre | Post-metal)
(Nord_(Year_of_No_Light_album) | recordLabel | Crucial_Blast)
(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | runtime | 58.41)","(""Nord"" | rdf:type | dbo:Album)
(""Nord"" | dbo:artist | ""Year of No Light"")
(""Nord"" | dbo:duration | ""58.41"")
(""Nord"" | dct:subject | ""sludge genre"")
(""Nord"" | dct:subject | ""post metal genre"")
(""Nord"" | dbo:recordLabel | ""Crucial Blast"")
(""Nord"" | dbo:releaseDate | ""6-09-2006"")
(""Year of No Light"" | dbo:release | ""Nord"")
(""Crucial Blast"" | dbo:release | ""Nord"")
(""sludge genre"" | dbo:album | ""Nord"")
(""post metal genre"" | dbo:album | ""Nord"")"
683,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy is headquartered in the city of Dijon, France. There are a total of 27,400 students at the University of Burgundy. 16,800 of them are undergraduate students, while 1,299 are doctoral students. There are 2,900 staff members at the university.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfStudents | 27400)
(University_of_Burgundy | numberOfDoctoralStudents | 1299)
(University_of_Burgundy | campus | Dijon)
(University_of_Burgundy | city | Dijon)
(University_of_Burgundy | country | France)","(University of Burgundy | headquarteredIn | Dijon)
(Dijon | country | France)
(University of Burgundy | totalStudents | 27400)
(University of Burgundy | hasStudentType | Undergraduate)
(Undergraduate | numberOfStudents | 16800)
(University of Burgundy | hasStudentType | Doctoral)
(Doctoral | numberOfStudents | 1299)
(University of Burgundy | staffSize | 2900)"
684,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","John Mills stars in the 1956 film, It's Great to be Young. The movie lasts for 94 minutes and was musically composed by Louis Levy. The cinematographer was Gilbert Taylor.","(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor)
(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | musicComposer | Louis_Levy"")","(""John Mills"" | ""stars in"" | ""It's Great to be Young"")
(""It's Great to be Young"" | ""release year"" | ""1956"")
(""It's Great to be Young"" | ""actor"" | ""John Mills"")
(""It's Great to be Young"" | ""duration"" | ""94 minutes"")
(""It's Great to be Young"" | ""music composer"" | ""Louis Levy"")
(""It's Great to be Young"" | ""film cinematographer"" | ""Gilbert Taylor"")
(""Louis Levy"" | ""composed for"" | ""It's Great to be Young"")
(""Gilbert Taylor"" | ""cinematographer for"" | ""It's Great to be Young"")"
685,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","MotorSport Vision, founded in 2004, is the operating organisation for Bedford Aerodrome. The runway surface at the aerodrome is made out of concrete.","(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | runwaySurfaceType | Concrete)
(MotorSport_Vision | foundingYear | 2004)","(""MotorSport Vision"" | ""foundingYear"" | ""2004"")
(""MotorSport Vision"" | ""operates"" | ""Bedford Aerodrome"")
(""Bedford Aerodrome"" | ""hasSurface"" | ""concrete"")"
686,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Fictional film comic superhero Bananaman was created by John Geering and shown by the BBC.,"(Bananaman | creator | John_Geering)
(Bananaman | broadcastedBy | BBC)","(""Bananaman"" | ""type"" | ""Fictional film comic superhero"")
(""Bananaman"" | ""creator"" | ""John Geering"")
(""Bananaman"" | ""broadcastBy"" | ""BBC"")"
687,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The movie Super Capers is starring Tom Sizemore.,(Super_Capers | starring | Tom_Sizemore),"(""Super Capers"" | ""starring"" | ""Tom Sizemore"")"
688,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Expect a Miracle's genre is instrumental music and easy listening, produced as well as recorded by the artist Brian Kelly.","(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | genre | Instrumental_music)
(Expect_a_Miracle | genre | Easy_listening)
(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))","(""Expect a Miracle"" | ""genre"" | ""instrumental music""),
(""Expect a Miracle"" | ""genre"" | ""easy listening""),
(""Expect a Miracle""| ""producer"" | ""Brian Kelly""),
(""Expect a Miracle""| ""recordedBy"" | ""Brian Kelly""),
(""Brian Kelly""| ""produces"" | ""Expect a Miracle""),
(""Brian Kelly""| ""records"" | ""Expect a Miracle"")"
689,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson was born in Darlington, England on January 1, 1726 and died on February 18th, 1776. She held British nationality.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | deathDate | 1776-02-18)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | nationality | Kingdom_of_England)","(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington, England"")
(""Lady Anne Monson"" | ""birthDate"" | ""January 1, 1726"")
(""Lady Anne Monson"" | ""deathDate"" | ""February 18th, 1776"")
(""Lady Anne Monson"" | ""nationality"" | ""British"")"
690,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Louis Levy’s birthdate is on 1894-11-20.,(Louis_Levy | birthDate | 1894-11-20),"(""Louis Levy"" | ""birthdate"" | ""1894-11-20"")"
691,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Death on a Factory Farm includes music composed by Jamie Lawrence, who was born on March 8, 1970. HBO, owned by Time Warner, originally broadcasted the movie.","(Death_on_a_Factory_Farm | broadcastedBy | HBO)
(HBO | owner | Time_Warner)
(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)
(Jamie_Lawrence | birthDate | 1970-03-08)","(""Death on a Factory Farm"" | ""includes"" | ""music composed by Jamie Lawrence"")
(""Jamie Lawrence"" | ""born on"" | ""March 8, 1970"")
(""Jamie Lawrence"" | ""composed music for"" | ""Death on a Factory Farm"")
(""HBO"" | ""owned by"" | ""Time Warner"")
(""Death on a Factory Farm"" | ""originally broadcasted by"" | ""HBO"")
(""HBO"" | ""originally broadcasted"" | ""Death on a Factory Farm"")
(""Time Warner"" | ""owns"" | ""HBO"")"
692,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nie Haisheng (born October 13, 1964) participated in the Shenzhou 6 mission after being a fighter pilot.","(Nie_Haisheng | mission | Shenzhou_6)
(Nie_Haisheng | birthDate | 1964-10-13)
(Nie_Haisheng | occupation | Fighter_pilot)","(""Nie Haisheng"" | ""birthDate"" | ""October 13, 1964"")
(""Nie Haisheng"" | ""participatedIn"" | ""Shenzhou 6"")
(""Nie Haisheng"" | ""occupation"" | ""fighter pilot"")"
693,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Dub music takes its origin in the reggae music.,(Reggae | derivative | Dub_music),"(""Dub music"" | ""origin"" | ""reggae music"")"
694,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",John Mills was born in North Elmham.,(John_Mills | birthPlace | North_Elmham),"(""John Mills"" | ""birthPlace"" | ""North Elmham"")"
695,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Israel’s national language is Modern Hebrew.,(Israel | language | Modern_Hebrew),(Israel | national language | Modern Hebrew)
696,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The pop rock Train song, ""Mermaid"", released on December 27th, 2012, was written by Train band members, including Espen Lind. Runtime for ""Mermaid"" was 3:16 minutes. Train previously had released the song, ""This'll Be My Year"".","(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | releaseDate | 2012-12-27)
(""Mermaid_(Train_song) | precededBy | This'll_Be_My_Year)
(Mermaid_(Train_song) | writer | Espen_Lind)","(""Mermaid"" | type | ""Song"")
(""Mermaid"" | genre | ""Pop rock"")
(""Mermaid"" | creator | ""Train"")
(""Mermaid"" | releaseDate | ""2012-12-27"")
(""Mermaid"" | writer | ""Espen Lind"")
(""Mermaid"" | runtime | ""3:16"")
(""Train"" | type | ""Band"")
(""Train"" | member | ""Espen Lind"")
(""Train"" | previousWork | ""This'll Be My Year"")
(""This'll Be My Year"" | type | ""Song"")
(""This'll Be My Year"" | creator | ""Train"")"
697,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Artist Brian Kelly, composer & pianist, created and produced Expect a Miracle, a 54.56 minute compilation album in an instrumental music genre.","(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | type | Compilation_Album)
(Expect_a_Miracle | genre | Instrumental_music)","(""Brian Kelly"" | ""type"" | ""Artist"")
(""Brian Kelly"" | ""profession"" | ""Composer"")
(""Brian Kelly"" | ""profession"" | ""Pianist"")
(""Brian Kelly"" | ""created"" | ""Expect a Miracle"")
(""Brian Kelly"" | ""produced"" | ""Expect a Miracle"")
(""Expect a Miracle"" | ""type"" | ""Compilation Album"")
(""Expect a Miracle"" | ""lengthInMinutes"" | 54.56)
(""Expect a Miracle"" | ""genre"" | ""Instrumental Music"")"
698,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Nord was produced by the band Year of No Light, a band whose members include a former guitarist for the band Monarch.","(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)
(Year_of_No_Light | associatedBand/associatedMusicalArtist | Monarch_(band))","(""Nord"" | ""producer"" | ""Year of No Light"")
(""Year of No Light"" | ""contributed to production for"" | ""Nord"")
(""Year of No Light"" | ""type"" | ""band"")
(""Year of No Light"" | ""member"" | ""former guitarist for Monarch"")
(""former guitarist for Monarch"" | ""member of"" | ""Year of No Light"")
(""Monarch"" | ""former member"" | ""former guitarist for Monarch"")"
699,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Alan B. Miller Hall is owned by the College of William and Mary and is in the USA. It is currently tenanted by the Mason School of Business and it was designed by architect Robert A.M. Stern.,"(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Mason_School_of_Business | country | United_States)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""Alan B. Miller Hall"" | ""ownedBy"" | ""College of William and Mary"")
(""Alan B. Miller Hall"" | ""locatedIn"" | ""USA"")
(""Alan B. Miller Hall"" | ""tenant"" | ""Mason School of Business"")
(""Alan B. Miller Hall"" | ""designedBy"" | ""Robert A.M. Stern"")"
700,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The All India Council for Technical Education in Mumbai gave Technical Campus status to the Acharya Institute of Technology. Dr. G. P. Prabhukumar is the director of Acharya Institute. The institute, affiliated with Visvesvaraya Technological University, is in Bangalore. Its campus full address is: Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(All_India_Council_for_Technical_Education | location | Mumbai)
(Acharya_Institute_of_Technology | director | ""Dr. G. P. Prabhukumar"")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | city | Bangalore)
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)","(Acharya Institute of Technology | status | Technical Campus)
(All India Council for Technical Education | location | Mumbai)
(All India Council for Technical Education | gaveStatusTo | Acharya Institute of Technology)
(Dr. G. P. Prabhukumar | jobTitle | director)
(Dr. G. P. Prabhukumar | workFor | Acharya Institute of Technology)
(Acharya Institute of Technology | affiliation | Visvesvaraya Technological University)
(Acharya Institute of Technology | location | Bangalore)
(Acharya Institute of Technology | fullAddress | ""Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090"")"
701,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy is in Dijon, France.","(Dijon | country | France)
(University_of_Burgundy | city | Dijon)","(""University of Burgundy"" | ""location"" | ""Dijon, France"")"
702,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Akeem Ayers debuted with the Tennessee Titans team coached by Mike Mularkey.,"(Tennessee_Titans | coach | Mike_Mularkey)
(Akeem_Ayers | debutTeam | Tennessee_Titans)","(Akeem Ayers | debuted with | Tennessee Titans)
(Tennessee Titans | coached by | Mike Mularkey)
(Akeem Ayers | played for coach | Mike Mularkey)"
703,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aleksandr Prudnikov was born on February 24, 1989, and plays for FC Amkar Perm and is also in the FC Terek Grozny club which is managed by Rashid Rakhimov and based at Grozny.","(FC_Terek_Grozny | ground | Grozny)
(Aleksandr_Prudnikov | currentclub | FC_Amkar_Perm)
(Aleksandr_Prudnikov | club | FC_Terek_Grozny)
(Aleksandr_Prudnikov | birthDate | 1989-02-24)
(FC_Terek_Grozny | manager | Rashid_Rakhimov)","(Aleksandr Prudnikov | birthDate | ""February 24, 1989"")
(Aleksandr Prudnikov | playsFor | FC Amkar Perm)
(Aleksandr Prudnikov | memberOf | FC Terek Grozny)
(FC Terek Grozny | managedBy | Rashid Rakhimov)
(FC Terek Grozny | basedIn | Grozny)"
704,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1634:The Bavarian Crisis was written by Eric Flint, followed by Ring of Fire II.","(1634:_The_Bavarian_Crisis | followedBy | Ring_of_Fire_II)
(1634:_The_Bavarian_Crisis | author | Eric_Flint)","(""1634: The Bavarian Crisis"" | author | ""Eric Flint"")
(""1634: The Bavarian Crisis"" | followed by | ""Ring of Fire II"")"
705,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala is a city which is part of Morelos, in Mexico. Morelos is in the UTC-6 time zone.","(Morelos | utcOffset | −6)
(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | country | Mexico)","(""Ciudad Ayala"" | ""is part of"" | ""Morelos"")
(""Ciudad Ayala"" | ""is in"" | ""Mexico"")
(""Morelos"" | ""is in"" | ""Mexico"")
(""Morelos"" | ""is in time zone"" | ""UTC-6"")"
706,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Dennis William Sciama was doctoral advisor for Brandon Carter. Carter is known for the Carter Constant and his contributions to the no-hair theorem. His professional field is General Relativity.,"(Brandon_Carter | professionalField | General_relativity)
(Brandon_Carter | knownFor | Carter_constant)
(Brandon_Carter | knownFor | No-hair_theorem)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)","(Dennis William Sciama | doctoral advisor for | Brandon Carter)
(Brandon Carter | known for | Carter Constant)
(Brandon Carter | contributed to | no-hair theorem)
(Brandon Carter | professional field | General Relativity)"
707,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",John Mills' birth place was North Elmham.,(John_Mills | birthPlace | North_Elmham),(John Mills | birthPlace | North Elmham)
708,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology located in Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore-560090, is affiliated with Visvesvaraya Technological University.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)","(""The Acharya Institute of Technology"" | ""location"" | ""Soldevanahalli"")
(""The Acharya Institute of Technology"" | ""location"" | ""Acharya Dr. Sarvapalli Radhakrishnan Road"")
(""The Acharya Institute of Technology"" | ""location"" | ""Hessarghatta Main Road"")
(""The Acharya Institute of Technology"" | ""location"" | ""Bangalore-560090"")
(""The Acharya Institute of Technology"" | ""affiliation"" | ""Visvesvaraya Technological University"")"
709,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Rageous, a car with a coupe body style, was first and last produced in 1997.","(Pontiac_Rageous | productionStartYear | 1997)
(Pontiac_Rageous | productionEndYear | 1997)
(Pontiac_Rageous | bodyStyle | Coupe)","(""Pontiac Rageous"" | rdf:type | ""Car""),
(""Pontiac Rageous"" | dbo:manufacturer | ""Pontiac""),
(""Pontiac Rageous"" | dbo:bodyStyle | ""Coupe""),
(""Pontiac Rageous"" | dbo:productionYear | ""1997"")"
710,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Andrew Rayel is associated with the musical artist, Bobina and performs within the genre of trance music, He was born in Chisinau, Moldova and began his musical career in 2009.","(Andrew_Rayel | birthPlace | ""Chișinău, Moldova"")
(Andrew_Rayel | associatedBand/associatedMusicalArtist | Bobina)
(Andrew_Rayel | activeYearsStartYear | 2009)
(Andrew_Rayel | genre | Trance_music)","(""Andrew Rayel"" | ""associatedWith"" | ""Bobina""),
(""Andrew Rayel"" | ""performInGenre"" | ""trance music""),
(""Andrew Rayel"" | ""birthPlace"" | ""Chisinau, Moldova""),
(""Andrew Rayel"" | ""startCareerIn"" | ""2009""),
(""Andrew Rayel"" | ""profession"" | ""musical artist"")"
711,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The title of the leader of Istanbul is Mayor.,(Istanbul | leaderTitle | Mayor),"(""Istanbul"" | title | ""Mayor"")"
712,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala, a city led by a City Manager and other leaders, has a population density of 1604.0 with a population of 1,777,539 in the metropolitan area. The UTC offset of Ciudad Ayala is -6.","(Ciudad_Ayala | populationMetro | 1777539)
(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | type | City)
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | utcOffset | −6)","(Ciudad Ayala | type | City)
(Ciudad Ayala | leadership | City Manager)
(Ciudad Ayala | hasPopulationDensity | 1604.0)
(Ciudad Ayala | hasPopulation | 1,777,539)
(Ciudad Ayala | geographicalArea | metropolitan area)
(Ciudad Ayala | utcOffset | -6)"
713,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The long name for the Philippines is the Republic of the Philippines.,"(Philippines | longName | ""Republic of the Philippines"")","(""Philippines"" | ""longName"" | ""Republic of the Philippines"")"
714,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument that falls under the category of Contributing property was established in the year 2000 in the municipality of Gettysburg, Pennsylvania. Adams County Pennsylvania is East of Franklin County, Pennsylvania.","(Adams_County,_Pennsylvania | hasToItsWest | Franklin_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | municipality | Gettysburg,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""11th Mississippi Infantry Monument"" | ""type"" | ""Contributing property"")
(""11th Mississippi Infantry Monument"" | ""establishmentYear"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Gettysburg, Pennsylvania"")
(""Gettysburg"" | ""isLocatedIn"" | ""Pennsylvania"")
(""Adams County Pennsylvania"" | ""locatedEastOf"" | ""Franklin County, Pennsylvania"")"
715,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Train song Mermaid, written by the band Train, belongs to the genre of pop rock.","(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))","(""Mermaid"" | ""writtenBy"" | ""Train"")
(""Mermaid"" | ""type"" | ""Song"")
(""Mermaid"" | ""belongsTo"" | ""pop rock"")
(""Train"" | ""wrote"" | ""Mermaid"")
(""Train"" | ""type"" | ""Band"")
(""pop rock"" | ""song"" | ""Mermaid"")"
716,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The author of The Fellowship of the Ring is J.R.R. Tolkien.,(The_Fellowship_of_the_Ring | author | J._R._R._Tolkien),(The Fellowship of the Ring | author | J.R.R. Tolkien)
717,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The record producing team Stargate has worked with musicians such as Michael Jackson.,(Stargate_(production_team) | associatedBand/associatedMusicalArtist | Michael_Jackson),"(Stargate | type | record producing team)
(Stargate | has worked with | Michael Jackson)
(Michael Jackson | type | musician)"
718,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Adolfo Suárez Madrid–Barajas Airport in Alcobendas, Spain, is operated by ENAIRE. The runway length of the airport is 3,500 and it has an elevation of 610 metres above sea level.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Alcobendas | country | Spain)","(""Adolfo Suárez Madrid–Barajas Airport"" | location | ""Alcobendas, Spain"")
(""Adolfo Suárez Madrid–Barajas Airport"" | operator | ""ENAIRE"")
(""Adolfo Suárez Madrid–Barajas Airport"" | runwayLength | literal:3500)
(""Adolfo Suárez Madrid–Barajas Airport"" | elevation | literal:610)"
719,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","With 700 postgraduate students, the Acharya Institute of Technology is based at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090 and is affiliated with Visvesvaraya Technological University. It was granted Technical Campus status by the Mumbai based All India Council for Technical Education.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(All_India_Council_for_Technical_Education | location | Mumbai)
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)
(Acharya_Institute_of_Technology | numberOfPostgraduateStudents | 700)","(Acharya Institute of Technology | location | Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090)
(Acharya Institute of Technology | studentCount | 700)
(Acharya Institute of Technology | type | Postgraduate)
(Acharya Institute of Technology | affiliation | Visvesvaraya Technological University)
(Acharya Institute of Technology | status | Technical Campus)
(Acharya Institute of Technology | grantedBy | All India Council for Technical Education)
(All India Council for Technical Education | location | Mumbai)"
720,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was a professional photographer who was born in Karlsruhe on May 2nd, 1908 and died in Petah Tikva on June 14, 1994.","(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | deathPlace | Petah_Tikva)
(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | professionalField | Photographer)","(Liselotte Grschebina | type | Professional Photographer)
(Liselotte Grschebina | place of birth | Karlsruhe)
(Liselotte Grschebina | date of birth | May 2nd, 1908)
(Liselotte Grschebina | place of death | Petah Tikva)
(Liselotte Grschebina | date of death | June 14, 1994)"
721,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Train song Mermaid is in the reggae genre.,(Mermaid_(Train_song) | genre | Reggae),"(""Mermaid"" | type | ""Song"")
(""Mermaid"" | creator | ""Train"")
(""Mermaid"" | genre | ""Reggae"")"
722,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala is located in the Pacific Daylight time zone and has a UTC offset of -6.,"(Ciudad_Ayala | utcOffset | −6)
(Ciudad_Ayala | timeZone | Pacific_Daylight_Time)","(""Ciudad Ayala"" | ""location"" | ""Pacific Daylight time zone"")
(""Ciudad Ayala"" | ""UTC offset"" | ""-6"")"
723,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Harry Carey is the actor and director of the movie McVeagh of the South Seas which was distributed by Alliance Films Corporation.,"(McVeagh_of_the_South_Seas | director | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | distributor | Alliance_Films_Corporation)","(""Harry Carey"" | ""type"" | ""Actor"")
(""Harry Carey"" | ""type"" | ""Director"")
(""McVeagh of the South Seas"" | ""type"" | ""Movie"")
(""Harry Carey"" | ""actor"" | ""McVeagh of the South Seas"")
(""Harry Carey"" | ""director"" | ""McVeagh of the South Seas"")
(""McVeagh of the South Seas"" | ""hasActor"" | ""Harry Carey"")
(""McVeagh of the South Seas"" | ""hasDirector"" | ""Harry Carey"")
(""Alliance Films Corporation"" | ""type"" | ""Organization"")
(""Alliance Films Corporation"" | ""distributed"" | ""McVeagh of the South Seas"")
(""McVeagh of the South Seas"" | ""distributedBy"" | ""Alliance Films Corporation"")"
724,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","'It’s Great to Be Young"" was released in 1956, it was 94 minutes long and included John mills as the lead.","(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0"")","(""It's Great to Be Young"" | releaseDate | 1956)
(""It's Great to Be Young"" | duration | 94 minutes)
(""It's Great to Be Young"" | starring | John Mills)"
725,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nurhan Atasoy was born in Turkey and is of Turkish nationality. Istanbul is Turkey's largest city and the national currency is the Turkish Lira.,"(Turkey | largestCity | Istanbul)
(Nurhan_Atasoy | nationality | Turkish_people)
(Turkey | currency | Turkish_lira)
(Nurhan_Atasoy | birthPlace | Turkey)","(""Nurhan Atasoy"" | ""birthPlace"" | ""Turkey"")
(""Nurhan Atasoy"" | ""nationality"" | ""Turkish"")
(""Istanbul"" | ""isPartOf"" | ""Turkey"")
(""Istanbul"" | ""cityType"" | ""largest city"")
(""Turkey"" | ""currency"" | ""Turkish Lira"")"
726,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The birth of Darinka Dentcheva, a professional in the field of mathematical optimization, is January 1, 1958.","(Darinka_Dentcheva | birthDate | 1958-01-01)
(Darinka_Dentcheva | professionalField | Mathematical_optimization)","(Darinka Dentcheva | type | Professional)
(Darinka Dentcheva | field | Mathematical optimization)
(Darinka Dentcheva | birthDate | January 1, 1958)"
727,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Lady Anne Monson was born in England and had British nationality but she resided in India for most of her life. India has a total area of 32875900000000 and Chief Justice is one the leaders here.,"(Lady_Anne_Monson | nationality | Kingdom_of_England)
(India | areaTotal | 3287590000000.0)
(Lady_Anne_Monson | residence | India)
(India | leaderTitle | Chief Justice)","(""Lady Anne Monson"" | ""birthPlace"" | ""England"")
(""Lady Anne Monson"" | ""nationality"" | ""British"")
(""Lady Anne Monson"" | ""residence"" | ""India"")
(""India"" | ""totalArea"" | 32875900000000)
(""Chief Justice"" | ""roleIn"" | ""India"")"
728,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Lionsgate was founded by Frank Giustra.,(Lionsgate | foundedBy | Frank_Giustra),"(""Lionsgate"" | ""founder"" | ""Frank Giustra"")"
729,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Rageous is assembled in Detroit, Michigan.","(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | assembly | Detroit)","(""Pontiac Rageous"" | ""is assembled in"" | ""Detroit, Michigan"")"
730,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Bootleg Series Volume I: The Quine Tapes is released by the record label Polydor Records.,(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Polydor_Records),"(""The Bootleg Series Volume I: The Quine Tapes"" | ""label"" | ""Polydor Records"")
(""Polydor Records"" | ""release"" | ""The Bootleg Series Volume I: The Quine Tapes"")"
731,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The proto-punk band, The Velvet Underground created the album Bootleg Series Volume 1: The Quine Tapes in the rock style.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | genre | Rock_music)
(The_Velvet_Underground | genre | Proto-punk)","(""The Velvet Underground"" | type | ""proto-punk band"")
(""The Velvet Underground"" | created | ""Bootleg Series Volume 1: The Quine Tapes"")
(""Bootleg Series Volume 1: The Quine Tapes"" | type | ""album"")
(""Bootleg Series Volume 1: The Quine Tapes"" | style | ""rock"")"
732,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Anatole de Grunwald and Terence Rattigan writers of English Without Tears whose cinematography was done by Bernard Knowles.,"(English_Without_Tears | writer | Anatole_de_Grunwald)
(English_Without_Tears | cinematography | Bernard_Knowles)
(English_Without_Tears | writer | Terence_Rattigan)","(""Anatole de Grunwald"" | ""profession"" | ""writer"")
(""Terence Rattigan"" | ""profession"" | ""writer"")
(""Anatole de Grunwald"" | ""partner in writing with"" | ""Terence Rattigan"")
(""Terence Rattigan"" | ""partner in writing with"" | ""Anatole de Grunwald"")
(""Anatole de Grunwald"" | ""wrote"" | ""English Without Tears"")
(""Terence Rattigan"" | ""wrote"" | ""English Without Tears"")
(""English Without Tears"" | ""writer"" | ""Anatole de Grunwald"")
(""English Without Tears"" | ""writer"" | ""Terence Rattigan"")
(""Bernard Knowles"" | ""profession"" | ""cinematographer"")
(""English Without Tears"" | ""cinematography by"" | ""Bernard Knowles"")
(""Bernard Knowles"" | ""did cinematography for"" | ""English Without Tears"")"
733,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology, a Visvesvaraya Technological University affiliate, was established in 2000. Its campus is located in India and can be found at Acharya Dr. Sarvapalli Radhakrishnan Road and Hessarghatta Main Road, in the Soldevanahalli neighborhood of Bangalore and its postal code is 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | established | 2000)
(Acharya_Institute_of_Technology | country | ""India"")","(Acharya Institute of Technology | type | University)
(Acharya Institute of Technology | affiliate of | Visvesvaraya Technological University )
(Acharya Institute of Technology | establishment year | 2000)
(Acharya Institute of Technology | location | India)
(Acharya Institute of Technology | located at | Acharya Dr. Sarvapalli Radhakrishnan Road)
(Acharya Institute of Technology | located at | Hessarghatta Main Road)
(Acharya Institute of Technology | neighborhood | Soldevanahalli )
(Acharya Institute of Technology | city | Bangalore)
(Acharya Institute of Technology | postal code | 560090)"
734,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The asteroid 1147 Stavropolis has a rotation period of 20378.5.,(1147_Stavropolis | rotationPeriod | 20378.5),"(""1147 Stavropolis"" | ""type"" | ""asteroid"")
(""1147 Stavropolis"" | ""hasRotationPeriod"" | 20378.5)"
735,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Expect a Miracle was recorded and produced by Brian Kelly. It is a compilation album with a runtime of 54.56 minutes.,"(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | type | Compilation_Album)","(""Expect a Miracle"" | ""recordedBy"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""producedBy"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""type"" | ""compilation album"")
(""Expect a Miracle"" | ""runtime"" | ""54.56 minutes"")"
736,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Bootleg Series Volume 1:The Quine Tapes was recorded by the Universal Music Group record label , and was released on 10-16-2001 with a runtime of 230.05 minutes.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Universal_Music_Group)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | releaseDate | 2001-10-16)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05)","(""The Bootleg Series Volume 1:The Quine Tapes"" | ""recordedBy"" | ""Universal Music Group"")
(""The Bootleg Series Volume 1:The Quine Tapes"" | ""releaseDate"" | ""10-16-2001"")
(""The Bootleg Series Volume 1:The Quine Tapes"" | ""runtime"" | 230.05)"
737,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Hobbit came before The Fellowship of the Ring.,(The_Fellowship_of_the_Ring | precededBy | The_Hobbit),"(""The Hobbit"" | ""cameBefore"" | ""The Fellowship of the Ring"")"
738,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala is a part of Morelos where Graco Ramírez is a leading official, but the leader of Ciudad Ayala is Juan Nolasco.","(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | leader | Juan_Nolasco)
(Morelos | leader | Graco_Ramírez)","(Ciudad Ayala | partOf | Morelos)
(Graco Ramírez | officialIn | Morelos)
(Graco Ramírez | officialIn | Ciudad Ayala)
(Juan Nolasco | leaderOf | Ciudad Ayala)"
739,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aleksandr Prudnikov is currently 185 cm tall and plays for FC Amkar Perm. He is also in the Terek Grozny club, which is managed by Rashid Rakhimov and based at Grozny.","(FC_Terek_Grozny | ground | Grozny)
(Aleksandr_Prudnikov | currentclub | FC_Amkar_Perm)
(Aleksandr_Prudnikov | club | FC_Terek_Grozny)
(Aleksandr_Prudnikov | height | 185.0 (centimetres))
(FC_Terek_Grozny | manager | Rashid_Rakhimov)","(Aleksandr Prudnikov | height | 185cm)
(Aleksandr Prudnikov | playsFor | FC Amkar Perm)
(Aleksandr Prudnikov | memberOf | Terek Grozny club)
(Terek Grozny club | managedBy | Rashid Rakhimov)
(Terek Grozny club | location | Grozny)"
740,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The American band, known as the Honeymoon Killers, self-produced their album, entitled, ""Turn Me On,"" which has a run time of 35.1 minutes. ""Turn Me On"" was preceded by the band's prior album, entitled, ""Let it Breed.""","(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | artist | The_Honeymoon_Killers_(American_band))
(Turn_Me_On_(album) | producer | The_Honeymoon_Killers_(American_band))
(Turn_Me_On_(album) | precededBy | Let_It_Breed)","(""Honeymoon Killers"" | nationality | ""American"")
(""Honeymoon Killers"" | type | ""band"")
(""Honeymoon Killers"" | produced | ""Turn Me On"")
(""Turn Me On"" | type | ""album"")
(""Turn Me On"" | title | ""Turn Me On"")
(""Turn Me On"" | run time | 35.1)
(""Let it Breed"" | type | ""album"")
(""Let it Breed"" | title | ""Let it Breed"")
(""Honeymoon Killers"" | produced | ""Let it Breed"")
(""Turn Me On"" | preceded by | ""Let it Breed"")"
741,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Alan B Miller Hall in Virginia is designed by Robert A.M. Stern.,"(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | location | Virginia)","(Alan B Miller Hall | location | Virginia)
(Alan B Miller Hall | architect | Robert A.M. Stern)"
742,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",John Mills was born on 1 January 1908.,(John_Mills | birthDate | 1908-01-01),"(John Mills | birthDate | ""1 January 1908"")"
743,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The COSPAR ID of Shenzhou 6 was 2005-040A .,(Shenzhou_6 | cosparId | 2005-040A),(Shenzhou 6 | COSPAR ID | 2005-040A)
744,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva (given name Olga Nikolaevna Bondareva), was born in Soviet Leningrad on April 27, 1937. She is known for the Bondareva-Shapley theorem.","(Olga_Bondareva | birthPlace | Leningrad,_USSR)
(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")","(Olga Bondareva | given name | ""Olga Nikolaevna Bondareva"")
(Olga Bondareva | birth date | ""April 27, 1937"")
(Olga Bondareva | birth place | ""Soviet Leningrad"")
(Olga Bondareva | known for | ""Bondareva-Shapley theorem"")"
745,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The apoapsis of the 1147 Stavropolis asteroid is 418476000000.0 A.U., and it is in a rotation period of 20378.5. The periapsis is 260855000000.0, and the epoch of 1147 Stavropolis is on 31 July 2016 (JD2457600.5).","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | rotationPeriod | 20378.5)
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))","(1147 Stavropolis | apoapsis | 418476000000.0 A.U.)
(1147 Stavropolis | rotation period | 20378.5)
(1147 Stavropolis | periapsis | 260855000000.0)
(1147 Stavropolis | epoch | 31 July 2016 (JD2457600.5))"
746,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The campus address for the Acharya Institute of technology, located in Bangalore, India is Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore, 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | city | Bangalore)
(Acharya_Institute_of_Technology | country | ""India"")","(Acharya Institute of Technology | location | Bangalore)
(Acharya Institute of Technology | country | India)
(Acharya Institute of Technology | address | ""Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore, 560090"")"
747,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy (born in Turkey on January 1, 1934) is a Turkish citizen who resides in Istanbul.","(Nurhan_Atasoy | birthDate | 1934-01-01)
(Nurhan_Atasoy | residence | Istanbul)
(Nurhan_Atasoy | citizenship | Turkey)
(Nurhan_Atasoy | birthPlace | Turkey)","(Nurhan Atasoy | birthDate | ""January 1, 1934"")
(Nurhan Atasoy | birthPlace | Turkey)
(Nurhan Atasoy | nationality | Turkish)
(Nurhan Atasoy | residence | Istanbul)"
748,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",With 17000 members the Agremiação Sportiva Arapiraquense club play in the Campeonato Brasileiro Série C league. Their ground is called Estádio Municipal Coaracy da Mata Fonseca and is based in Arapiraca. Previous champions of Campeonato Brasileiro Série C include Vila Nova Futebol Clube.,"(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(Agremiação Sportiva Arapiraquense | hasMembers | 17000)
(Agremiação Sportiva Arapiraquense | playsIn | Campeonato Brasileiro Série C)
(Agremiação Sportiva Arapiraquense | hasGround | Estádio Municipal Coaracy da Mata Fonseca)
(Estádio Municipal Coaracy da Mata Fonseca | isLocatedIn | Arapiraca)
(Campeonato Brasileiro Série C | previousChampion | Vila Nova Futebol Clube)"
749,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Bootleg Series Volume 1: The Quine Tapes was produced by the Velvet Underground and recorded in St. Louis, Missouri in the United States where the most common spoken language is English. The Velvet Underground were originally formed in 1964.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(United_States | language | English_language)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | United_States)
(The_Velvet_Underground | activeYearsStartYear | 1964-01-01)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | St._Louis,_Missouri)","(""Bootleg Series Volume 1: The Quine Tapes"" | ""producer"" | ""The Velvet Underground"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""locationRecorded"" | ""St. Louis, Missouri"")
(""St. Louis, Missouri"" | ""isInCountry"" | ""United States"")
(""United States"" | ""spokenLanguage"" | ""English"")
(""The Velvet Underground"" | ""formationYear"" | ""1964"")"
750,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The genre of the Year of the No Light group is sludge metal.,(Year_of_No_Light | genre | Sludge_metal),"(""Year of the No Light group"" | ""genre"" | ""sludge metal"")"
751,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brandon Carter is known for the Penrose diagram.,(Brandon_Carter | knownFor | Penrose_diagram),(Brandon Carter | knownFor | Penrose diagram)
752,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson, whose professional field of study was botany, died on February 18th, 1776.","(Lady_Anne_Monson | deathDate | 1776-02-18)
(Lady_Anne_Monson | professionalField | Botany)","(""Lady Anne Monson"" | ""type"" | ""Person""),
(""Lady Anne Monson"" | ""field of study"" | ""botany""),
(""Lady Anne Monson"" | ""deathDate"" | ""1776-02-18"")"
753,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nurhan Atasoy was born in Reşadiye and now lives in Istanbul. Istanbul has a metropolitan area of 5343000000.0 and uses the Eastern European Summer Time time zone.,"(Istanbul | areaMetro | 5343000000.0)
(Nurhan_Atasoy | birthPlace | Reşadiye)
(Nurhan_Atasoy | residence | Istanbul)
(Istanbul | timeZone | Eastern_European_Summer_Time)","(Nurhan Atasoy | birthPlace | Reşadiye)
(Nurhan Atasoy | residence | Istanbul)
(Istanbul | area | 5343000000.0)
(Istanbul | timeZone | Eastern European Summer Time)"
754,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1147 Stavropolis apoapsis is 418476000000.0, and the orbital period of the asteroid is 1249.6 days.","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)","(""1147 Stavropolis"" | ""apoapsis"" | 418476000000.0)
(""1147 Stavropolis"" | ""orbital period"" | 1249.6)"
755,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Turn Me On, with a runtime of 35.1 minutes by the Honeymoon Killers is preceded by the album Let it Breed.","(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | artist | The_Honeymoon_Killers_(American_band))
(Turn_Me_On_(album) | producer | The_Honeymoon_Killers_(American_band))
(Turn_Me_On_(album) | precededBy | Let_It_Breed)","(""Turn Me On"" | ""type"" | ""Album"")
(""Turn Me On"" | ""runtime"" | ""35.1 minutes"")
(""Turn Me On"" | ""artist"" | ""Honeymoon Killers"")
(""Turn Me On"" | ""preceded_by"" | ""Let it Breed"")
(""Honeymoon Killers"" | ""type"" | ""Artist"")
(""Let it Breed"" | ""type"" | ""Album"")"
756,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The group Train released the 3.16 minutes pop rock song Mermaid under Sony Music Entertainment on Columbia records on 27th December.,"(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)
(Mermaid_(Train_song) | releaseDate | 2012-12-27)","(""Train"" | ""type"" | ""group"")
(""Train"" | ""released"" | ""Mermaid"")
(""Mermaid"" | ""type"" | ""pop rock song"")
(""Mermaid"" | ""duration"" | ""3.16 minutes"")
(""Mermaid"" | ""creationDate"" | ""27th December"")
(""Mermaid"" | ""recordLabel"" | ""Sony Music Entertainment"")
(""Mermaid"" | ""recordLabel"" | ""Columbia records"")"
757,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Expect a Miracle falls under the instrumental genre and the easy listening genre. It is followed by the album Afterplay.,"(Expect_a_Miracle | genre | Instrumental_music)
(Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Easy_listening)","(""Expect a Miracle"" | type | ""instrumental genre"")
(""Expect a Miracle"" | type | ""easy listening genre"")
(""Expect a Miracle"" | ""is followed by"" | ""Afterplay"")"
758,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Mexico in inhabited by Mexican people and uses the peso as its currency. Bionico is a dessert containing raisins that can be found in the Guadalajara region of Mexico. Sandesh is also a confectionary dish that is served as desert.,"(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Bionico | region | Guadalajara)
(Bionico | ingredient | Raisin)
(Dessert | dishVariation | Sandesh_(confectionery))
(Bionico | country | Mexico)","(""Mexico"" | ""isInhabitedBy"" | ""Mexican people"")
(""Mexico"" | ""usesCurrency"" | ""Peso"")
(""Bionico"" | ""isADessertFrom"" | ""Mexico"")
(""Bionico"" | ""containsIngredient"" | ""Raisins"")
(""Bionico"" | ""isFoundIn"" | ""Guadalajara region"")
(""Sandesh"" | ""isAConfectionaryDish"" | ""literal"")
(""Sandesh"" | ""isServedAs"" | ""Dessert"")"
759,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Karlsruhe is located in Germany.,(Karlsruhe | country | Germany),(Karlsruhe | location | Germany)
760,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Hypermarcas produces medicines.,(Hypermarcas | product | Drugs),"(""Hypermarcas"" | ""produces"" | ""medicines"")"
761,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was born in the German Empire founded on January 1, 1871.","(Liselotte_Grschebina | birthPlace | German_Empire)
(German_Empire | foundingDate | 1871-01-01)","(""Liselotte Grschebina"" | ""birthPlace"" | ""German Empire"")
(""Liselotte Grschebina"" | ""birthDate"" | ""unknown"")
(""German Empire"" | ""foundingDate"" | ""January 1, 1871"")"
762,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Akeem Ayers made his debut for the Tennessee Titans, however he now plays for the Los Angeles Rams.","(Akeem_Ayers | currentteam | ""Los Angeles Rams"")
(Akeem_Ayers | debutTeam | Tennessee_Titans)","(""Akeem Ayers"" | ""made debut for"" | ""Tennessee Titans"")
(""Akeem Ayers"" | ""plays for"" | ""Los Angeles Rams"")"
763,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Louis Levy was born on 20-11-1894.,(Louis_Levy | birthDate | 1894-11-20),"(Louis Levy | birthDate | ""20-11-1894"")"
764,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The ALCO RS-3 which had a four-stroke engine, a cylinder count of 12 and measured 17068.8 (millimetres) in length, was produced between May 1950 and August 1956.","(ALCO_RS-3 | buildDate | ""May 1950 - August 1956"")
(ALCO_RS-3 | engine | Four-stroke_engine)
(ALCO_RS-3 | cylinderCount | 12)
(ALCO_RS-3 | length | 17068.8 (millimetres))","(ALCO RS-3 | hasEngineType | four-stroke engine)
(ALCO RS-3 | hasCylinderCount | 12)
(ALCO RS-3 | hasLength | 17068.8 millimetres)
(ALCO RS-3 | productionStart | May 1950)
(ALCO RS-3 | productionEnd | August 1956)"
765,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",An ethnic group in Israel is the Israeli Jews.,(Israel | ethnicGroup | Israeli_Jews),"(""Israeli Jews"" | ""isEthnicGroupIn"" | ""Israel"")"
766,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Campeonato Brasileiro Serie C league team Agremiacao Sportiva Arapiraquense is managed by Vica.,"(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | manager | Vica)","(""Agremiacao Sportiva Arapiraquense"" | ""type"" | ""Campeonato Brasileiro Serie C team"")
(""Agremiacao Sportiva Arapiraquense"" | ""manager"" | ""Vica"")"
767,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Louis Levy was born in England.,(Louis_Levy | birthPlace | England),"(""Louis Levy"" | ""birthPlace"" | ""England"")"
768,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","American born Abraham A. Ribicoff, who was in office while John F. Kennedy was president and succeeded by Anthony J. Celebrezze, is married to Ruth Ribicoff.","(Abraham_A._Ribicoff | spouse | ""Ruth Ribicoff"")
(Abraham_A._Ribicoff | inOfficeWhilePresident | John_F._Kennedy)
(Abraham_A._Ribicoff | nationality | American)
(Abraham_A._Ribicoff | successor | Anthony_J._Celebrezze)
(Abraham_A._Ribicoff | birthPlace | United_States)","(Abraham A. Ribicoff | birthPlace | ""America"")
(Abraham A. Ribicoff | officePeriod | ""John F. Kennedy"")
(Abraham A. Ribicoff | succeededBy | ""Anthony J. Celebrezze"")
(Abraham A. Ribicoff | spouse | ""Ruth Ribicoff"")"
769,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Vila Nova Futebol Clube are the champions of Campeonato Brasileiro Serie C league played by Agremiacao Sportiva Arapiraquense and whose ground is Estadio Municipal Coaracy da Mata Fonseca located in Arapiraca.,"(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)
(Agremiação_Sportiva_Arapiraquense | fullName | ""Agremiação Sportiva Arapiraquense"")","(""Vila Nova Futebol Clube"" | ""type"" | ""Football Club"")
(""Vila Nova Futebol Clube"" | ""title"" | ""champions of Campeonato Brasileiro Serie C league"")
(""Campeonato Brasileiro Serie C league"" | ""participant"" | ""Vila Nova Futebol Clube"")
(""Campeonato Brasileiro Serie C league"" | ""participant"" | ""Agremiacao Sportiva Arapiraquense"")
(""Agremiacao Sportiva Arapiraquense"" | ""type"" | ""Football Club"")
(""Estadio Municipal Coaracy da Mata Fonseca"" | ""location"" | ""Arapiraca"")
(""Agremiacao Sportiva Arapiraquense"" | ""ground"" | ""Estadio Municipal Coaracy da Mata Fonseca"")"
770,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument, erected in 2000, is categorised as a contributing property. It stands in Adams County, Pennsylvania, USA, in the municipality of Gettysburg. Pennsylvania's Cumberland County is to the north of Adams County.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | municipality | Gettysburg,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)
(Adams_County,_Pennsylvania | hasToItsNorth | Cumberland_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | country | ""United States"")","(""11th Mississippi Infantry Monument"" | ""year of construction"" | 2000)
(""11th Mississippi Infantry Monument"" | ""is a"" | ""contributing property"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Adams County"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Gettysburg"")
(""11th Mississippi Infantry Monument"" | ""location country"" | ""USA"")
(""Adams County"" | ""is in"" | ""Pennsylvania"")
(""Adams County"" | ""is in"" | ""USA"")
(""Gettysburg"" | ""is in"" | ""Adams County"")
(""Gettysburg"" | ""is in"" | ""Pennsylvania"")
(""Gettysburg"" | ""is in"" | ""USA"")
(""Cumberland County"" | ""is in"" | ""Pennsylvania"")
(""Cumberland County"" | ""location relationship"" | ""north of Adams County"")"
771,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","English Without Tears is written by Anatole de Grunwald, who was born in Saint Petersburg.","(Anatole_de_Grunwald | birthPlace | Saint_Petersburg)
(English_Without_Tears | writer | Anatole_de_Grunwald)","(""English Without Tears"" | ""is written by"" | ""Anatole de Grunwald"")
(""Anatole de Grunwald"" | ""was born in"" | ""Saint Petersburg"")"
772,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Jamie Lawrence played football with Ashford Town (Middlesex) F.C.,(Jamie_Lawrence | club | Ashford_Town_(Middlesex)_F.C.),"(Jamie Lawrence | playedFor | Ashford Town (Middlesex) F.C.) 
(Jamie Lawrence | sport | football)
(Ashford Town (Middlesex) F.C. | sport | football)
(Ashford Town (Middlesex) F.C. | player | Jamie Lawrence)"
773,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Year of No Light performs sludge metal.,(Year_of_No_Light | genre | Sludge_metal),"(""Year of No Light"" | ""type"" | ""Band""),
(""Year of No Light"" | ""performs"" | ""sludge metal"")"
774,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng was born in Zaoyang of the Hubei Province.,"(Nie_Haisheng | birthPlace | Zaoyang)
(Nie_Haisheng | birthPlace | Hubei)","(""Nie Haisheng"" | ""birthPlace"" | ""Zaoyang"")
(""Nie Haisheng"" | ""birthPlace"" | ""Hubei Province"")"
775,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Founded on 1913-01-01, the Trane company is a subsidiary.","(Trane | type | Subsidiary)
(Trane | foundingDate | 1913-01-01)","(""Trane company"" | ""date founded"" | ""1913-01-01"")
(""Trane company"" | ""type"" | ""subsidiary"")"
776,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng was born on 10/13/1964 in Hubei Province in Zaoyang. Haisheng is a citizen of the People’s Republic of China and works as a fighter pilot.,"(Nie_Haisheng | birthPlace | Zaoyang)
(Nie_Haisheng | birthPlace | Hubei)
(""Nie_Haisheng | nationality | People's_Republic_of_China)
(Nie_Haisheng | birthDate | 1964-10-13)
(Nie_Haisheng | occupation | Fighter_pilot)","(Nie Haisheng | birthDate | ""10/13/1964"")
(Nie Haisheng | birthPlace | Hubei Province)
(Hubei Province | contains | Zaoyang)
(Nie Haisheng | citizenship | People’s Republic of China)
(Nie Haisheng | occupation | fighter pilot)"
777,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was a professional photographer who was born on May 2, 1908 in Karlsruhe and died in Petah Tikva on June 14, 1994.","(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | deathPlace | Petah_Tikva)
(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | professionalField | Photographer)","(""Liselotte Grschebina"" | ""type"" | ""professional photographer"")
(""Liselotte Grschebina"" | ""birthDate"" | ""1908-05-02"")
(""Liselotte Grschebina"" | ""birthPlace"" | ""Karlsruhe"")
(""Liselotte Grschebina"" | ""deathDate"" | ""1994-06-14"")
(""Liselotte Grschebina"" | ""deathPlace"" | ""Petah Tikva"")"
778,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The album Let it Breed was followed by the album Turn Me On which was itself followed by the album Take It Off!. Take it Off! is an album in the noise rock genre which was produced by Wharton Tiers.,"(Take_It_Off! | genre | Noise_rock)
(Take_It_Off! | producer | Wharton_Tiers)
(Turn_Me_On_(album) | precededBy | Let_It_Breed)
(Turn_Me_On_(album) | followedBy | Take_It_Off!)","(""Let it Breed"" | ""followedBy"" | ""Turn Me On"")
(""Turn Me On"" | ""followedBy"" | ""Take It Off!"")
(""Take It Off!"" | ""type"" | ""album"")
(""Take It Off!"" | ""genre"" | ""noise rock"")
(""Take It Off!"" | ""producer"" | ""Wharton Tiers"")"
779,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Istanbul uses the time zone known as Eastern European Summer Time.,(Istanbul | timeZone | Eastern_European_Summer_Time),"(Istanbul | uses | Eastern European Summer Time)
(Istanbul | time zone | Eastern European Summer Time)"
780,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The University of Burgundy has 27400 students with 1299 doctoral students.,"(University_of_Burgundy | numberOfStudents | 27400)
(University_of_Burgundy | numberOfDoctoralStudents | 1299)","(""University of Burgundy"" | ""number of students"" | 27400)
(""University of Burgundy"" | ""number of doctoral students"" | 1299)"
781,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","African Americans are an ethnic group in the US, where Abraham A. Ribicoff was born.","(Abraham_A._Ribicoff | birthPlace | United_States)
(United_States | ethnicGroup | African_Americans)","(""African Americans"" | ""type"" | ""Ethnic Group"")
(""African Americans"" | ""location"" | ""US"")
(""Abraham A. Ribicoff"" | ""place of birth"" | ""US"")"
782,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Lady Anne Monson was born in the Kingdom of England.,(Lady_Anne_Monson | birthPlace | Kingdom_of_England),"(""Lady Anne Monson"" | ""birthPlace"" | ""Kingdom of England"")"
783,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Turn Me On album was preceded by the Let it Breed album.,(Turn_Me_On_(album) | precededBy | Let_It_Breed),"(""Turn Me On"" album | was preceded by | ""Let it Breed"" album)
(""Let it Breed"" album | precedes | ""Turn Me On"" album)"
784,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aleksandr Prudnikov is 185.0 cm tall and currently plays for FC Amkar Perm. He previously played for FC Terek Grozny which is located in Grozny and managed by Rashid Rakhimov.,"(FC_Terek_Grozny | ground | Grozny)
(Aleksandr_Prudnikov | currentclub | FC_Amkar_Perm)
(Aleksandr_Prudnikov | club | FC_Terek_Grozny)
(Aleksandr_Prudnikov | height | 185.0 (centimetres))
(FC_Terek_Grozny | manager | Rashid_Rakhimov)","(Aleksandr Prudnikov | height | 185.0)
(Aleksandr Prudnikov | playsFor | FC Amkar Perm)
(Aleksandr Prudnikov | previousTeam | FC Terek Grozny)
(FC Terek Grozny | location | Grozny)
(FC Terek Grozny | manager | Rashid Rakhimov)"
785,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Brandon Carter works professionally in the field of general relativity with Dennis William Sciama, who is Brandon’s doctoral advisor. Brandon is known for both the Carter constant and the No-hair theorem.","(Brandon_Carter | professionalField | General_relativity)
(Brandon_Carter | knownFor | Carter_constant)
(Brandon_Carter | knownFor | No-hair_theorem)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)","(Brandon Carter | works professionally in the field of | general relativity)
(Brandon Carter | doctoral advisor | Dennis William Sciama)
(Dennis William Sciama | profession | general relativity)
(Brandon Carter | known for | Carter constant)
(Brandon Carter | known for | No-hair theorem)"
786,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Chinabank was founded on the 16th of August, 1920 to provide banking services to customers.","(Chinabank | foundingDate | 1920-08-16)
(Chinabank | service | Banking)","(""Chinabank"" | ""foundingDate"" | ""16th of August, 1920"")
(""Chinabank"" | ""foundingYear"" | ""1920"")
(""Chinabank"" | ""purpose"" | ""provide banking services to customers"")"
787,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Turn Me On album in the noise rock musical genre was preceded by the Let it Breed album and its total length is 35 minutes 10 seconds.,"(Turn_Me_On_(album) | genre | Noise_rock)
(Turn_Me_On_(album) | precededBy | Let_It_Breed)
(Turn_Me_On_(album) | runtime | 35.1)","(""Turn Me On"" | ""type"" | ""album"")
(""Turn Me On"" | ""genre"" | ""noise rock"")
(""Turn Me On"" | ""precededBy"" | ""Let it Breed"")
(""Turn Me On"" | ""length"" | ""35 minutes 10 seconds"")"
788,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",San Francisco is in the Pacific Time Zone.,(San_Francisco | timeZone | Pacific_Time_Zone),(San Francisco | is in | Pacific Time Zone)
789,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Andrzej Piotr Ruszczyński is influenced by Darinka Dentcheva.,(Andrzej_Piotr_Ruszczyński | influencedBy | Darinka_Dentcheva),(Andrzej Piotr Ruszczyński | influencedBy | Darinka Dentcheva)
790,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The self-produced album by Nord, ""Nord by Year of No Light"" was released on September 6, 2006 and classified under the genre of ""sludge metal"".","(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)","(""Nord by Year of No Light"" | producer | ""Nord"")
(""Nord by Year of No Light"" | releaseDate | ""September 6, 2006"")
(""Nord by Year of No Light"" | genre | ""sludge metal"")"
791,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bedford Aerodrome has served the Bedford Autodrome. The aerodrome is 83.2 meters above sea level and has a runway with the length of 1095.,"(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | elevationAboveTheSeaLevel | 83.2104)
(Bedford_Aerodrome | runwayLength | 1095.0)","(Bedford Aerodrome | served | Bedford Autodrome)
(Bedford Aerodrome | elevationAboveTheSeaLevel | ""83.2 meters"")
(Bedford Aerodrome | hasRunway | Runway)
(Runway | length | ""1095"")"
792,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Train pop rock song Mermaid (length 3 minutes and 16 seconds) was released on December twenty seventh two thousand twelve.,"(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | releaseDate | 2012-12-27)","(""Mermaid"" | ""type"" | ""pop rock song"")
(""Mermaid"" | ""length"" | ""3 minutes and 16 seconds"")
(""Mermaid"" | ""releasedOn"" | ""December twenty seventh two thousand twelve"")
(""Mermaid"" | ""performedBy"" | ""Train"")"
793,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Quine Tapes are recorded in San Francisco, United States, San Francisco is in the Pacific Time Zone, Ed Lee is a leader in San Francisco.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | San_Francisco)
(San_Francisco | leader | Ed_Lee_(politician))
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | United_States)
(San_Francisco | timeZone | Pacific_Time_Zone)","(""The Quine Tapes"" | location | ""San Francisco, United States"")
(""San Francisco"" | locatedIn | ""United States"")
(""San Francisco"" | locatedInTimezone | ""Pacific Time Zone"")
(""Ed Lee"" | leaderIn | ""San Francisco"")"
794,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Max Benedict died in the year of 1986.,(Max_Benedict | deathYear | 1986),(Max Benedict | diedIn | 1986)
795,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Fellowship of the Ring, a fantasy book written by J.R.R. Tolkien, was followed by The Two Towers.","(The_Fellowship_of_the_Ring | literaryGenre | Fantasy_(genre))
(The_Fellowship_of_the_Ring | followedBy | The_Two_Towers)
(The_Fellowship_of_the_Ring | author | J._R._R._Tolkien)","(""The Fellowship of the Ring"" | ""type"" | ""fantasy book"")
(""The Fellowship of the Ring"" | ""author"" | ""J.R.R. Tolkien"")
(""The Fellowship of the Ring"" | ""followedBy"" | ""The Two Towers"")"
796,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Velvet Underground album Squeeze is preceded by Andy Warhol's Velvet Underground Featuring Nico.,"(""Squeeze_(The_Velvet_Underground_album) | precededBy | Andy_Warhol's_Velvet_Underground_Featuring_Nico"")","(""Squeeze"" | ""isPrecededBy"" | ""Andy Warhol's Velvet Underground Featuring Nico"")
(""The Velvet Underground"" | ""hasAlbum"" | ""Squeeze"")
(""Squeeze"" | ""isAlbumOf"" | ""The Velvet Underground"")"
797,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Jamie Lawrence wrote music for the movie of Death on a Factory Farm written by Tom Simon.,"(Death_on_a_Factory_Farm | director | Tom_Simon)
(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)","(""Jamie Lawrence"" | ""wrote music for"" | ""Death on a Factory Farm"")
(""Death on a Factory Farm"" | ""written by"" | ""Tom Simon"")"
798,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The asteroid 1147 Stavropolis has a periapsis of 260855000000 and an orbital period of 1249.6 days.,"(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)","(1147 Stavropolis | hasPeriapsis | 260855000000)
(1147 Stavropolis | hasOrbitalPeriod | 1249.6 days)"
799,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina attended the school of Applied Arts in Stuttgart before dying in Petah Tikva.,"(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)
(Liselotte_Grschebina | deathPlace | Petah_Tikva)","(""Liselotte Grschebina"" | ""attended"" | ""the school of Applied Arts in Stuttgart"")
(""Liselotte Grschebina"" | ""died in"" | ""Petah Tikva"")"
800,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina studied at the School of Applied Arts in Stuttgart before dying in Petah Tikva.,"(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)
(Liselotte_Grschebina | deathPlace | Petah_Tikva)","(""Liselotte Grschebina"" | ""studied at"" | ""the School of Applied Arts in Stuttgart"")
(""Liselotte Grschebina"" | ""died in"" | ""Petah Tikva"")"
801,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Lionsgate served as a distributor for the film Super Capers.,(Super_Capers | distributor | Lionsgate),"(""Lionsgate"" | ""servedAsDistributorFor"" | ""Super Capers"")"
802,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The run time of the album Turn Me On is 35.1 minutes, followed by the Take It Off album.","(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | followedBy | Take_It_Off!)","(""Turn Me On"" | run time | 35.1 minutes)
(""Take It Off"" | preceded by | ""Turn Me On"")"
803,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The leader of Saint Petersburg is known as the Governor.,(Saint_Petersburg | leaderTitle | Governor),(Saint Petersburg | leader | Governor)
804,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Wharton Tiers produced the album titled “Take it Off!” which is in the noise rock genre. The album was followed by the album Let It Breed and preceded by the album Turn Me On.,"(Take_It_Off! | genre | Noise_rock)
(Take_It_Off! | producer | Wharton_Tiers)
(Turn_Me_On_(album) | precededBy | Let_It_Breed)
(Turn_Me_On_(album) | followedBy | Take_It_Off!)","(""Wharton Tiers"" | ""produced"" | ""Take it Off!"")
(""Take it Off!"" | ""type"" | ""Album"")
(""Take it Off!"" | ""genre"" | ""noise rock"")
(""Take it Off!"" | ""followedBy"" | ""Let It Breed"")
(""Take it Off!"" | ""precededBy"" | ""Turn Me On"")
(""Let It Breed"" | ""type"" | ""Album"")
(""Turn Me On"" | ""type"" | ""Album"")"
805,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The city of Ciudad Ayala, located 1147m above sea level, is in the Pacific Daylight time zone and has a population density of 1604. Its leader is known as the Governator.","(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | leaderTitle | Governator)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)
(Ciudad_Ayala | timeZone | Pacific_Daylight_Time)","(""Ciudad Ayala"" | ""isLocatedIn"" | ""Pacific Daylight time zone"")
(""Ciudad Ayala"" | ""hasElevation"" |  ""1147m"")
(""Ciudad Ayala"" | ""hasPopulationDensity"" |  ""1604"")
(""Ciudad Ayala"" | ""hasLeader"" |  ""Governator"")"
806,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Train song Mermaid belongs to the genre of pop rock by the musical band Train which was released on the Columbia Records record label that has a total runtime of three minutes and sixteen seconds which is on the Sony Music Entertainment record label.,"(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)","(""Mermaid"" | type | ""Song"")
(""Mermaid"" | genre | ""Pop Rock"")
(""Mermaid"" | byArtist | ""Train"")
(""Train"" | type | ""Musical Band"")
(""Mermaid"" | recordLabel | ""Columbia Records"")
(""Columbia Records"" | belongsTo | ""Sony Music Entertainment"")
(""Mermaid"" | duration | ""Three minutes and sixteen seconds"")"
807,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson (born in Darlington on January 1, 1726) resides in India. She died on February 18, 1776.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | deathDate | 1776-02-18)
(Lady_Anne_Monson | residence | India)","(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington"")
(""Lady Anne Monson"" | ""birthDate"" | ""January 1, 1726"")
(""Lady Anne Monson"" | ""residence"" | ""India"")
(""Lady Anne Monson"" | ""deathDate"" | ""February 18, 1776"")"
808,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Vice Chancellor of the University of Cambridge is Leszek Borysiewicz.,(University_of_Cambridge | viceChancellor | Leszek_Borysiewicz),"(""Leszek Borysiewicz"" | ""type"" | ""Person"")
(""University of Cambridge"" | ""type"" | ""University"")
(""University of Cambridge"" | ""viceChancellor"" | ""Leszek Borysiewicz"")
(""Leszek Borysiewicz"" | ""positionHeld"" | ""Vice Chancellor of the University of Cambridge"")"
809,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brandon Carter is best known for creating the Penrose diagram.,(Brandon_Carter | knownFor | Penrose_diagram),"(Brandon Carter | knownFor | ""Penrose diagram"")
(Brandon Carter | creates | ""Penrose diagram"")"
810,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Hobbit was published on September 21, 1937.",(The_Hobbit | releaseDate | 1937-09-21),"(""The Hobbit"" | ""publication date"" | ""September 21, 1937"")"
811,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Expect a Miracle, an instrumental music genre album is produced by Brian Kelly, who preceded the album with Pools of Light, and then followed it with Afterplay.","(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | precededBy | Pools_of_Light_(Brian_Kelly_album))
(Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Instrumental_music)","(""Expect a Miracle"" | type | ""instrumental music genre album"")
(""Expect a Miracle"" | producer | ""Brian Kelly"")
(""Brian Kelly"" | produced | ""Expect a Miracle"")
(""Expect a Miracle"" | preceding album | ""Pools of Light"")
(""Pools of Light"" | followed by | ""Expect a Miracle"")
(""Brian Kelly"" | produced | ""Pools of Light"")
(""Pools of Light"" | producer | ""Brian Kelly"")
(""Afterplay"" | producer | ""Brian Kelly"")
(""Brian Kelly"" | produced | ""Afterplay"")
(""Expect a Miracle"" | following album | ""Afterplay"")
(""Afterplay"" | preceded by | ""Expect a Miracle"")"
812,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Grigory Neujmin discovered the 1147 Stavropolis asteroid on 11 June 1929. The asteroid has an apoapsis of 418476000000.0 AU, orbital period of 1249.6, and absolute magnitude of 11.5.","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | discoverer | Grigory_Neujmin)
(1147_Stavropolis | absoluteMagnitude | 11.5)
(1147_Stavropolis | discovered | 1929-06-11)","(""Grigory Neujmin"" | ""discovered"" | ""1147 Stavropolis"")
(""1147 Stavropolis"" | ""discovery date"" | ""11 June 1929"")
(""1147 Stavropolis"" | ""discovered by"" | ""Grigory Neujmin"")
(""1147 Stavropolis"" | ""apoapsis"" | 418476000000.0 AU)
(""1147 Stavropolis"" | ""orbital period"" | 1249.6)
(""1147 Stavropolis"" | ""absolute magnitude"" | 11.5)"
813,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The University of Burgundy with 2900 staff members has its campus in Dijon.,"(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | campus | Dijon)","(University of Burgundy | hasStaff | 2900)
(University of Burgundy | campusLocatedIn | Dijon)"
814,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bionico (a dessert) is a food that contains raisins found in Mexico.,"(Bionico | course | Dessert)
(Bionico | ingredient | Raisin)
(Bionico | country | Mexico)","(""Bionico"" | ""type"" | ""food""),
(""Bionico"" | ""containsIngredient"" | ""raisins""),
(""Bionico"" | ""locationAvailable"" | ""Mexico"")"
815,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Live at Roadburn 2008 album of Year of No Light was preceded by the Nord album.,(Live_at_Roadburn_2008_(Year_of_No_Light_album) | precededBy | Nord_(Year_of_No_Light_album)),"(""Live at Roadburn 2008"" | ""artist"" | ""Year of No Light"")
(""Live at Roadburn 2008"" | ""precededBy"" | ""Nord"")
(""Nord"" | ""artist"" | ""Year of No Light"")"
816,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The song Mermaid, produced by Espionage, is on Columbia Records.","(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | producer | Espionage_(production_team))","(""Mermaid"" | type | ""song"")
(""Mermaid"" | ""produced by"" | ""Espionage"")
(""Mermaid"" | ""record label"" | ""Columbia Records"")"
817,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Harold French was the director of the film English Without Tears, which was written by Anatole de Grunwald and Terence Rattigan.","(English_Without_Tears | director | Harold_French)
(English_Without_Tears | writer | Anatole_de_Grunwald)
(English_Without_Tears | writer | Terence_Rattigan)","(""Harold French"" | ""jobTitle"" | ""director"")
(""Harold French"" | ""directed"" | ""English Without Tears"")
(""English Without Tears"" | ""directedBy"" | ""Harold French"")
(""Anatole de Grunwald"" | ""jobTitle"" | ""writer"")
(""Anatole de Grunwald"" | ""wrote"" | ""English Without Tears"")
(""English Without Tears"" | ""writtenBy"" | ""Anatole de Grunwald"")
(""Terence Rattigan"" | ""jobTitle"" | ""writer"")
(""Terence Rattigan"" | ""wrote"" | ""English Without Tears"")
(""English Without Tears"" | ""writtenBy"" | ""Terence Rattigan"")"
818,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aleksandr Prudnikov was born on 02-24-1989, played for FC Spartak Moscow's youth team but now plays for FC Terek Grozny.","(Aleksandr_Prudnikov | birthDate | 1989-02-24)
(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(Aleksandr_Prudnikov | club | FC_Terek_Grozny)","(""Aleksandr Prudnikov"" | ""birthDate"" | ""02-24-1989"")
(""Aleksandr Prudnikov"" | ""playedFor"" | ""FC Spartak Moscow's youth team"")
(""Aleksandr Prudnikov"" | ""playsFor"" | ""FC Terek Grozny"")"
819,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Year of No Light album Nord, which was followed by the album Live at Roadburn 2008, fits into the genre of sludge metal.","(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)","(""Nord"" | ""type"" | ""album"")
(""Nord"" | ""creator"" | ""Year of No Light"")
(""Nord"" | ""followedBy"" | ""Live at Roadburn 2008"")
(""Nord"" | ""genre"" | ""sludge metal"")
(""Live at Roadburn 2008"" | ""type"" | ""album"")
(""Live at Roadburn 2008"" | ""genre"" | ""sludge metal"")
(""Live at Roadburn 2008"" | ""creator"" | ""Year of No Light"")
(""Year of No Light"" | ""type"" | ""band"")
(""Year of No Light"" | ""created"" | ""Nord"")
(""Year of No Light"" | ""created"" | ""Live at Roadburn 2008"")
(""Year of No Light"" | ""genre"" | ""sludge metal"")"
820,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva was born in Leningrad, USSR on the date April 27, 1937 as ""Olga Nikolaevna Bondareva"" and is known for the Bondareva-Shapley theorem having died in Saint Petersburg.","(Olga_Bondareva | deathPlace | Saint_Petersburg)
(Olga_Bondareva | birthPlace | Leningrad,_USSR)
(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")","(""Olga Bondareva"" | birthPlace | ""Leningrad, USSR"")
(""Olga Bondareva"" | birthDate | ""April 27, 1937"")
(""Olga Bondareva"" | birthName | ""Olga Nikolaevna Bondareva"")
(""Olga Bondareva"" | isKnownFor | ""Bondareva-Shapley theorem"")
(""Olga Bondareva"" | deathPlace | ""Saint Petersburg"")"
821,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Reggae music evolved out of a musical genre called ska.,(Reggae | stylisticOrigin | Ska),"(""Reggae music"" | ""evolved out of"" | ""ska"")"
822,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1147 Stavropolis epoch is 31 July 2016 (Julian Day 2457600.5) has an apoapsis of 418476000000.0., rotation period of 20378.5 while having a periapsis of 260855000000.0.","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | rotationPeriod | 20378.5)
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))","(""1147 Stavropolis"" | ""epoch"" | ""31 July 2016"")
(""1147 Stavropolis"" | ""Julian Day"" | 2457600.5)
(""1147 Stavropolis"" | ""apoapsis"" | 418476000000.0)
(""1147 Stavropolis"" | ""rotation period"" | 20378.5)
(""1147 Stavropolis"" | ""periapsis"" | 260855000000.0)"
823,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adam West, who got his first role in 1954, had a main role in the movie Super Capers.","(Super_Capers | starring | Adam_West)
(Adam_West | activeYearsStartYear | 1954-01-01)","(""Adam West"" | ""hasFirstRole"" | ""1954"")
(""Adam West"" | ""actedIn"" | ""Super Capers"")"
824,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Saint Petersburg, whose leader is known as the Governor, was the death place of Olga Bondareva.","(Olga_Bondareva | deathPlace | Saint_Petersburg)
(Saint_Petersburg | leaderTitle | Governor)","(""Saint Petersburg"" | leader | ""Governor"")
(""Saint Petersburg"" | death place of | ""Olga Bondareva"") 
(""Olga Bondareva"" | place of death | ""Saint Petersburg"")"
825,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Dijon is in the country of France.,(Dijon | country | France),(Dijon | location | France)
826,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The population of Ciudad Ayala's metropolitan area is 1,777,539, and the population density of the city is 1,604. The City Manager is one of the leaders of Ciudad Ayala.","(Ciudad_Ayala | populationMetro | 1777539)
(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | populationDensity | 1604.0)","(""Ciudad Ayala's metropolitan area"" | population | 1,777,539)
(""Ciudad Ayala"" | populationDensity | 1,604)
(""Ciudad Ayala"" | leader | ""City Manager"")"
827,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was born May 2, 1908, in Karlsruhe, and died June 14, 1994, in Israel.","(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | deathPlace | Israel)","(""Liselotte Grschebina"" | ""birthDate"" | ""May 2, 1908"")
(""Liselotte Grschebina"" | ""birthPlace"" | ""Karlsruhe"")
(""Liselotte Grschebina"" | ""deathDate"" | ""June 14, 1994"")
(""Liselotte Grschebina"" | ""deathPlace"" | ""Israel"")"
828,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The population density of Mexico is 61.0.,(Mexico | populationDensity | 61.0),(Mexico | populationDensity | 61.0)
829,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Mermaid is a pop rock song by the band Train that plays for 3 minutes and 16 seconds.,"(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | runtime | 3.16)","(""Mermaid"" | ""type"" | ""pop rock song"")
(""Mermaid"" | ""by"" | ""Train"")
(""Mermaid"" | ""plays for"" | ""3 minutes and 16 seconds"")
(""Mermaid"" | ""type"" | ""song"")
(""Train"" | ""performs"" | ""Mermaid"")"
830,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Expect a Miracle, produced by Brian Kelly, is of the instrumental music and easy listening genre.","(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | genre | Instrumental_music)
(Expect_a_Miracle | genre | Easy_listening)","(""Expect a Miracle"" | type | ""Album"")
(""Expect a Miracle"" | producer | ""Brian Kelly"")
(""Expect a Miracle"" | genre | ""instrumental music"")
(""Expect a Miracle"" | genre | ""easy listening"")"
831,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Fellowship of the Ring, released on July 29, 1954, belongs to the fantasy literary genre.","(The_Fellowship_of_the_Ring | literaryGenre | Fantasy_(genre))
(The_Fellowship_of_the_Ring | releaseDate | 1954-07-29)","(""The Fellowship of the Ring"" | ""release date"" | ""July 29, 1954"")
(""The Fellowship of the Ring"" | ""belongs to"" | ""fantasy literary genre"")"
832,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Cecil Parker was born in 1897.,(Cecil_Parker | birthYear | 1897),(Cecil Parker | birthDate | 1897)
833,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Train pop rock song Mermaid, produced by the Sony Music Entertainment record label and released under the record label Columbia Records is 3 minutes and 16 seconds long.","(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)","(""Mermaid"" | type | ""Train pop rock song"")
(""Mermaid"" | ""produced by"" | ""Sony Music Entertainment record label"")
(""Mermaid"" | ""released under"" | ""Columbia Records"")
(""Mermaid"" | ""length"" | ""3 minutes and 16 seconds"")"
834,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ray Griggs is a director who was born in 1974.,(Ray_Griggs_(director) | birthYear | 1974),"(""Ray Griggs"" | ""type"" | ""Person""),
(""Ray Griggs"" | ""type"" | ""Director""),
(""Ray Griggs"" | ""birthDate"" | ""1974"")"
835,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The runway length of Adolfo Suárez Madrid–Barajas Airport in Alcobendas is 3,500 and the airport is 610 metres above sea level. The airport's runway name is 14L/32R and the airport is operated by ENAIRE.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayName | ""14L/32R"")","(""Adolfo Suárez Madrid–Barajas Airport"" | ""runway length"" | ""3500"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""located in"" | ""Alcobendas"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""altitude"" | ""610 metres"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""runway name"" | ""14L/32R"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""operated by"" | ""ENAIRE"")"
836,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva, known for her work with stochastic programming, was influenced by the work of Andrzej Piotr Ruszczynski. She attended Humboldt University and her professional field is Mathematical optimization.","(Darinka_Dentcheva | influencedBy | Andrzej_Piotr_Ruszczyński)
(Darinka_Dentcheva | professionalField | Mathematical_optimization)
(Darinka_Dentcheva | knownFor | Stochastic_programming)
(Darinka_Dentcheva | almaMater | Humboldt_University)","(Darinka Dentcheva | knownFor | Stochastic programming)
(Darinka Dentcheva | influencedBy | Andrzej Piotr Ruszczynski)
(Darinka Dentcheva | attended | Humboldt University)
(Darinka Dentcheva | professionalField | Mathematical optimization)"
837,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bootleg Series Volume 1: The Quine Tapes has a run time of 230:05.,(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05),"(""Bootleg Series Volume 1: The Quine Tapes"" | ""hasRunTime"" | ""230:05"")"
838,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The title of the leader of Saint Petersburg is Governor.,(Saint_Petersburg | leaderTitle | Governor),"(""Saint Petersburg"" | ""leaderTitle"" | ""Governor"")"
839,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The population in the Ciudad Ayala metropolitan area is 1777539, the population density in Ciudad Ayala is 1604 and the leader title is the city manager.","(Ciudad_Ayala | populationMetro | 1777539)
(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | populationDensity | 1604.0)","(""Ciudad Ayala metropolitan area"" | ""population"" | 1777539)

(""Ciudad Ayala"" | ""populationDensity"" | 1604)

(""Ciudad Ayala"" | ""leaderTitle"" | ""city manager"")"
840,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Frank Giustra founded Lionsgate.,(Lionsgate | foundedBy | Frank_Giustra),"(""Frank Giustra"" | ""founded"" | ""LionsGate"")"
841,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","J.R.R. Tolkien, born January 3, 1892, created Fellowship of the Ring published on July 29, 1954. The Fellowship of the Ring came after the Hobbit.","(The_Fellowship_of_the_Ring | author | J._R._R._Tolkien)
(J._R._R._Tolkien | birthDate | 1892-01-03)
(The_Fellowship_of_the_Ring | releaseDate | 1954-07-29)
(The_Fellowship_of_the_Ring | precededBy | The_Hobbit)","(""J.R.R. Tolkien"" | ""birthDate"" | ""January 3, 1892"")
(""J.R.R. Tolkien"" | ""creator"" | ""Fellowship of the Ring"")
(""Fellowship of the Ring"" | ""datePublished"" | ""July 29, 1954"")
(""Fellowship of the Ring"" | ""follows"" | ""the Hobbit"")"
842,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The total area of Turkey, the birthplace of Nurhan Atasoy, is 783,356 sq/km.","(Turkey | areaTotal | 783356.0)
(Nurhan_Atasoy | birthPlace | Turkey)","(""Turkey"" | ""hasTotalArea"" | ""783,356 sq/km"")
(""Nurhan Atasoy"" | ""hasBirthplace"" | ""Turkey"")"
843,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers, a 98-minute film written and directed by Ray Griggs, starred Michael Rooker and Tom Sizemore, was budgeted at $2,000,000, and made $30,955 at the box office.","(Super_Capers | starring | Michael_Rooker)
(Super_Capers | starring | Tom_Sizemore)
(Super_Capers | budget | 2000000.0)
(Super_Capers | writer | Ray_Griggs_(director))
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | runtime | 98.0)
(Super_Capers | gross | 30955.0)","(""Super Capers"" | ""runtime"" | ""98 minutes"")
(""Super Capers"" | ""writtenBy"" | ""Ray Griggs"")
(""Super Capers"" | ""directedBy"" | ""Ray Griggs"")
(""Super Capers"" | ""starring"" | ""Michael Rooker"")
(""Super Capers"" | ""starring"" | ""Tom Sizemore"")
(""Super Capers"" | ""budget"" | ""$2,000,000"")
(""Super Capers"" | ""boxOffice"" | ""$30,955"")"
844,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Abraham A. Ribicoff is from the United States of America and is married to Casey Ribicoff. In the United States, one of the national ethnic groups is the African Americans.","(Abraham_A._Ribicoff | spouse | Casey_Ribicoff)
(United_States | ethnicGroup | African_Americans)
(Abraham_A._Ribicoff | nationality | United_States)","(""Abraham A. Ribicoff"" | ""is from"" | ""United States of America"")
(""Abraham A. Ribicoff"" | ""is married to"" | ""Casey Ribicoff"")
(""United States"" | ""has national ethnic group"" | ""African Americans"")"
845,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Stargate produced Train song Mermaid of the reggae genre was written by Amund Bjørklund.,"(Mermaid_(Train_song) | genre | Reggae)
(Mermaid_(Train_song) | writer | Amund_Bjørklund)
(Mermaid_(Train_song) | writer | Stargate_(production_team))","(""Stargate"" | ""produced"" | ""Train song Mermaid"")
(""Train song Mermaid"" | ""genre"" | ""reggae"")
(""Amund Bjørklund"" | ""wrote"" | ""Train song Mermaid"")"
846,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Hypermarcas is a pharmaceutical company that makes drugs located in Brazil, whose key person is their CEO.","(Hypermarcas | location | Brazil)
(Hypermarcas | product | Drugs)
(Hypermarcas | industry | Pharmaceuticals)
(Hypermarcas | keyPerson | CEO)","(""Hypermarcas"" | ""type"" | ""pharmaceutical company"")
(""Hypermarcas"" | ""location"" | ""Brazil"")
(""Hypermarcas"" | ""makes"" | ""drugs"")
(""Hypermarcas"" | ""hasRole"" | ""CEO"")"
847,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The University of Burgundy and its campus located in the city of Dijon. It has 16800 undergraduate students and 1299 doctoral students.,"(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | numberOfDoctoralStudents | 1299)
(University_of_Burgundy | campus | Dijon)
(University_of_Burgundy | city | Dijon)","(""University of Burgundy"" | ""location"" | ""Dijon"")
(""University of Burgundy"" | ""hasCampus"" | ""Dijon"")
(""University of Burgundy"" | ""numberOfUndergraduateStudents"" | ""16800"")
(""University of Burgundy"" | ""numberOfDoctoralStudents"" | ""1299"")"
848,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Turn Me On released after Let It Breed, has a run time of 35.1 minutes and a genre of noise rock.","(Turn_Me_On_(album) | genre | Noise_rock)
(Turn_Me_On_(album) | precededBy | Let_It_Breed)
(Turn_Me_On_(album) | runtime | 35.1)","(""Turn Me On"" | ""releaseAfter"" | ""Let It Breed"")
(""Turn Me On"" | ""runtime"" | 35.1)
(""Turn Me On"" | ""genre"" | ""noise rock"")"
849,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","MotorSport Vision is the operating organisation for Bedford Aerodrome and it is located in Fawkham, UK.","(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(MotorSport_Vision | city | Fawkham)","(""MotorSport Vision"" | ""type"" | ""organisation"")
(""MotorSport Vision"" | ""hasOperationalJurisdictionOver"" | ""Bedford Aerodrome"")
(""Bedford Aerodrome"" | ""isOperatedBy"" | ""MotorSport Vision"")
(""MotorSport Vision"" | ""isLocatedIn"" | ""Fawkham, UK"")
(""Fawkham, UK"" | ""isLocationOf"" | ""MotorSport Vision"")"
850,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Chopped fruits, sour cream, condensed milk, granola, shredded coconut and raisins are the main ingredients in bionico. Bionico (a dessert) is a food found in Mexico.","(Bionico | course | Dessert)
(Bionico | mainIngredient | ""Chopped Fruits, Sour Cream, Condensed Milk, Granola, Shredded Coconut, Raisins"")
(Bionico | country | Mexico)","(""Chopped fruits"" | ""ingredientIn"" | ""bionico""),
(""sour cream"" | ""ingredientIn"" | ""bionico""),
(""condensed milk"" | ""ingredientIn"" | ""bionico""),
(""granola"" | ""ingredientIn"" | ""bionico""),
(""shredded coconut"" | ""ingredientIn"" | ""bionico""),
(""raisins"" | ""ingredientIn"" | ""bionico""),
(""bionico"" | ""type"" | ""dessert""),
(""bionico"" | ""foundIn"" | ""Mexico"")"
851,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The runtime of Nord, the Year of No Light album, is 58 minutes and 41 seconds.",(Nord_(Year_of_No_Light_album) | runtime | 58.41),"(""Nord"" | ""type"" | ""album"")
(""Nord"" | ""creator"" | ""Year of No Light"")
(""Nord"" | ""runtime"" | ""58 minutes and 41 seconds"")"
852,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Led by its CEO, Hypermarcas produces healthcare products and is located in Sao Paulo. With a net income of 108,600,000, Hypermarcas has 10,252 employees.","(Hypermarcas | keyPerson | CEO)
(Hypermarcas | netIncome | 108600000)
(Hypermarcas | numberOfEmployees | 10252)
(Hypermarcas | product | Healthcare)
(Hypermarcas | location | São_Paulo)","(""Hypermarcas"" | ""type"" | ""Company"")
(""Hypermarcas"" | ""industry"" | ""Healthcare"")
(""Hypermarcas"" | ""headquarter"" | ""Sao Paulo"")
(""Hypermarcas"" | ""CEO"" | ""unknown"")
(""Hypermarcas"" | ""product"" | ""Healthcare products"")
(""Hypermarcas"" | ""netIncome"" | ""108,600,000"")
(""Hypermarcas"" | ""numberOfEmployees"" | ""10,252"")"
853,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan B. Miller Hall, located in Virginia, was completed on June 1,2009 and is home to the Mason School of Business.","(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | completionDate | 2009-06-01)
(Alan_B._Miller_Hall | location | Virginia)","(Alan B. Miller Hall | location | Virginia)
(Alan B. Miller Hall | completion date | June 1, 2009)
(Alan B. Miller Hall | is home to | Mason School of Business)"
854,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brian Kelly is the author of “Expect a Miracle”.,(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist)),"(Brian Kelly | type | Author)
(Brian Kelly | authorOf | ""Expect a Miracle"")"
855,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","A monument to the 11th Mississippi Infantry was erected in 2000 in the area of Adams County, Pennsylvania, USA. This monument is categorised as a contributing property. To the southeast of Adams County is Carroll County, Maryland.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | state | ""Pennsylvania"")
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)
(11th_Mississippi_Infantry_Monument | country | ""United States"")","(""11th Mississippi Infantry"" | ""date of establishment"" | ""2000"")
(""11th Mississippi Infantry"" | ""location"" | ""Adams County"")
(""11th Mississippi Infantry"" | ""location"" | ""Pennsylvania"")
(""11th Mississippi Infantry"" | ""location"" | ""USA"")
(""11th Mississippi Infantry"" | ""type"" | ""Monument"")
(""Monument to the 11th Mississippi Infantry"" | ""date of establishment"" | ""2000"")
(""Monument to the 11th Mississippi Infantry"" | ""location"" | ""Adams County"")
(""Monument to the 11th Mississippi Infantry"" | ""location"" | ""Pennsylvania"")
(""Monument to the 11th Mississippi Infantry"" | ""location"" | ""USA"")
(""Monument to the 11th Mississippi Infantry"" | ""classification"" | ""contributing property"")
(""Adams County"" | ""is located in the administrative territorial entity"" | ""Pennsylvania"")
(""Adams County"" | ""is located in the administrative territorial entity"" | ""USA"")
(""Adams County"" | ""adjacent administrative territorial entity to the southeast"" | ""Carroll County"")
(""Carroll County"" | ""is located in the administrative territorial entity"" | ""Maryland"")
(""Carroll County"" | ""adjacent administrative territorial entity to the northwest"" | ""Adams County"")"
856,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The total population of Mexico is 119530753.,(Mexico | populationTotal | 119530753),(Mexico | total population | 119530753)
857,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bionico is a dessert food found in Mexico.,"(Bionico | course | Dessert)
(Bionico | country | Mexico)","(""Bionico"" | ""type"" | ""dessert""),
(""Bionico"" | ""location"" | ""Mexico"")"
858,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Jamie Lawrence is the music composer of Death on a Factory Farm.,(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence),"(Jamie Lawrence | type | Music Composer)
(Death on a Factory Farm | type | Work)
(Jamie Lawrence | composer | Death on a Factory Farm)"
859,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson, a botanist born of the Kingdom of England in Darlington married to George Monson, has a residence in India.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | nationality | Kingdom_of_England)
(Lady_Anne_Monson | residence | India)
(Lady_Anne_Monson | spouse | George_Monson)
(Lady_Anne_Monson | professionalField | Botany)","(""Lady Anne Monson"" | ""type"" | ""Botanist""),
(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington""),
(""Darlington"" | ""isLocatedIn"" | ""Kingdom of England""),
(""Lady Anne Monson"" | ""hasNationality"" | ""Kingdom of England""),
(""Lady Anne Monson"" | ""spouse"" | ""George Monson""),
(""Lady Anne Monson"" | ""residence"" | ""India"")."
860,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala is a part of the Pacific Standard Time Zone, and more specifically, the Pacific Daylight time zone.","(Ciudad_Ayala | timeZone | Pacific_Daylight_Time)
(Ciudad_Ayala | timeZone | Pacific_Standard_Time_Zone)","(""Ciudad Ayala"" | ""part of"" | ""Pacific Standard Time Zone"")
(""Ciudad Ayala"" | ""part of"" | ""Pacific Daylight time zone"")"
861,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Lady Anne Monson resided in India for most of her life.,(Lady_Anne_Monson | residence | India),"(""Lady Anne Monson"" | ""resideIn"" | ""India""),
(""Lady Anne Monson"" | ""lifeDuration"" | ""most of her life"")"
862,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng took part in the Shenzhou 6 mission.,(Nie_Haisheng | mission | Shenzhou_6),"(""Nie Haisheng"" | ""took part in"" | ""Shenzhou 6 mission"")"
863,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","BBC show Bananaman last aired on April 15th, 1986. One of its stars was Bill Oddie.","(Bananaman | starring | Bill_Oddie)
(Bananaman | lastAired | ""1986-04-15"")
(Bananaman | broadcastedBy | BBC)","(""Bananaman"" | ""lastAiredOn"" | ""April 15th, 1986"")
(""Bananaman"" | ""type"" | ""Show"")
(""Bananaman"" | ""broadcaster"" | ""BBC"")
(""Bananaman"" | ""star"" | ""Bill Oddie"")"
864,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The ALCO RS-3 was produced between May 1950 and August 1956 and was built by Montreal Locomotive Works. This locomotive has a diesel-electric transmission and is 17068.8 millimetres in length.,"(ALCO_RS-3 | buildDate | ""May 1950 - August 1956"")
(ALCO_RS-3 | powerType | Diesel-electric_transmission)
(ALCO_RS-3 | builder | Montreal_Locomotive_Works)
(ALCO_RS-3 | length | 17068.8 (millimetres))","(ALCO RS-3 | producedStart | May 1950)
(ALCO RS-3 | producedEnd | August 1956)
(ALCO RS-3 | builtBy | Montreal Locomotive Works)
(ALCO RS-3 | hasTransmission | diesel-electric)
(ALCO RS-3 | length | 17068.8 millimetres)"
865,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy was born on January 1, 1934 and is a citizen of Turkey. Nurhan currently resides in Turkey and one of his residences is in Istanbul.","(Nurhan_Atasoy | birthDate | 1934-01-01)
(Nurhan_Atasoy | residence | Istanbul)
(Nurhan_Atasoy | citizenship | Turkey)
(Nurhan_Atasoy | residence | Turkey)","(Nurhan Atasoy | birthDate | ""January 1, 1934"")
(Nurhan Atasoy | citizenship | Turkey)
(Nurhan Atasoy | residence | Turkey)
(Nurhan Atasoy | residence | Istanbul)"
866,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson was born in Darlington in England, which has a population of one hundred and six thousand. She lived in India, which is now known as the Republic of India.","(Lady_Anne_Monson | birthPlace | Darlington)
(India | longName | ""Republic of India"")
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Darlington | populationTotal | 106000)
(Lady_Anne_Monson | residence | India)","(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington"")
(""Lady Anne Monson"" | ""birthPlace"" | ""England"")
(""Darlington"" | ""isPartOf"" | ""England"")
(""Darlington"" | ""population"" | ""one hundred and six thousand"")
(""Lady Anne Monson"" | ""residence"" | ""India"")
(""India"" | ""alsoKnownAs"" | ""Republic of India"")"
867,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Turn Me On, preceded by the album Let it Breed and followed by the album Take It Off!, is an example of the musical genre known as noise rock.","(Turn_Me_On_(album) | genre | Noise_rock)
(Turn_Me_On_(album) | precededBy | Let_It_Breed)
(Turn_Me_On_(album) | followedBy | Take_It_Off!)","(""Turn Me On"" | precedes | ""Take It Off!"")
(""Let it Breed"" | precedes | ""Turn Me On"")
(""Turn Me On"" | follows | ""Let it Breed"")
(""Take It Off!"" | follows | ""Turn Me On"")
(""Turn Me On"" | type | ""album"")
(""Let it Breed"" | type | ""album"")
(""Take It Off!"" | type | ""album"")
(""Turn Me On"" | example of | ""noise rock"")"
868,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson was born in Darlington in the Kingdom of England. Darlington's postal codes are DL1, DL2, and DL3 with the area code as 01325.","(Darlington | areaCode | 01325)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | birthPlace | Darlington)
(Darlington | postalCode | ""DL1, DL2, DL3"")","(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington"")
(""Lady Anne Monson"" | ""birthCountry"" | ""Kingdom of England"")
(""Darlington"" | ""postalCode"" | ""DL1"")
(""Darlington"" | ""postalCode"" | ""DL2"")
(""Darlington"" | ""postalCode"" | ""DL3"")
(""Darlington"" | ""areaCode"" | ""01325"")"
869,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The language of Turkey is Turkish.,(Turkey | language | Turkish_language),(Turkey | language | Turkish)
870,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala, a city with a population density of 1604.0, falls into the UTC offset -6 time zone.","(Ciudad_Ayala | type | City)
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | utcOffset | −6)","(""Ciudad Ayala"" | ""type"" | ""City""),
(""Ciudad Ayala"" | ""populationDensity"" | 1604.0),
(""Ciudad Ayala"" | ""timeZone"" | ""UTC-6"")"
871,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Alan Shepard was born in New Hampshire but died in California.,"(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | status | ""Deceased"")","(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | deathPlace | California)"
872,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was an American who was born on Nov 18, 1923 in New Hampshire and died in California, where Dianne Feinstein is a senator.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)
(California | senators | Dianne_Feinstein)","(""Alan Shepard"" | ""type"" | ""Person"")
(""Alan Shepard"" | ""nationality"" | ""American"")
(""Alan Shepard"" | ""birthDate"" | ""Nov 18, 1923"")
(""Alan Shepard"" | ""birthPlace"" | ""New Hampshire"")
(""Alan Shepard"" | ""deathPlace"" | ""California"")
(""Dianne Feinstein"" | ""type"" | ""Person"")
(""Dianne Feinstein"" | ""jobTitle"" | ""senator"")
(""Dianne Feinstein"" | ""placeOfService"" | ""California"")"
873,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","American Alan Shepard was born in New Hampshire, the native home of the purple finch, on November 18th 1923. Shepard graduated from NWC with an M.A. in 1957; he recently died in California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(New_Hampshire | bird | Purple_finch)
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | almaMater | ""NWC, M.A. 1957"")","(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | birthDate | November 18th 1923)
(Alan Shepard | deathPlace | California)
(Alan Shepard | nationality | American)
(Alan Shepard | almaMater | NWC)
(Alan Shepard | degree | M.A.)
(New Hampshire | species | purple finch)
(NWC | graduationYear | 1957)
(NWC | graduate | Alan Shepard)
(Alan Shepard | deathDate | recent)"
874,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","AmeriGas, located in King of Prussia, Pennsylvania serves the 324,720,797 people and 9,833,516.63 square kilometers of the United States.","(AmeriGas | city | King_of_Prussia,_Pennsylvania)
(United_States | populationTotal | 324720797)
(AmeriGas | country | United_States)
(AmeriGas | regionServed | United_States)
(United_States | areaTotal | 9833516.63  (square kilometres))","(AmeriGas | location | King of Prussia, Pennsylvania)
(AmeriGas | serves | United States)
(United States | population | 324720797)
(United States | area | 9833516.63 square kilometers)"
875,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Agremiação Sportiva Arapiraquense has 17000 members. In 2015 they played in the Campeonato Brasileiro Série C league from Brazil and Vila Nova Futebol Clube were champions at the league. The Estádio Municipal Coaracy da Mata Fonseca is the name of the ground of Agremiação Sportiva Arapiraquense and is in Arapiraca.,"(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Agremiação_Sportiva_Arapiraquense | season | 2015_Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | country | Brazil)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(Agremiação Sportiva Arapiraquense | hasMembers | 17000)
(Agremiação Sportiva Arapiraquense | participatedIn | Campeonato Brasileiro Série C)
(Campeonato Brasileiro Série C | year | 2015)
(Campeonato Brasileiro Série C | locatedIn | Brazil)
(Vila Nova Futebol Clube | isChampionOf | Campeonato Brasileiro Série C)
(Vila Nova Futebol Clube | yearOfChampionship | 2015)
(Estádio Municipal Coaracy da Mata Fonseca | isGroundOf | Agremiação Sportiva Arapiraquense)
(Estádio Municipal Coaracy da Mata Fonseca | locatedIn | Arapiraca)"
876,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Train song Mermaid, was followed by the release of the band’s cover of Imagine by John Lennon, while it was preceded by the song This'll Be My Year. The original song Imagine was released by John Lennon preceded by his song Power to the People and was followed up with his song Happy Xmas (War Is Over).","(""Mermaid_(Train_song) | precededBy | This'll_Be_My_Year)
(Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song))
(Imagine_(John_Lennon_song) | followedBy | Happy_Xmas_(War_Is_Over))
(Imagine_(John_Lennon_song) | precededBy | Power_to_the_People_(song))","(""Mermaid"" | ""creator"" | ""Train"")
(""Mermaid"" | ""followedBy"" | ""Imagine cover by Train"")
(""Mermaid"" | ""preceededBy"" | ""This'll Be My Year"")
(""Imagine cover by Train"" | ""creator"" | ""Train"")
(""Imagine cover by Train"" | ""isCoverOf"" | ""Imagine"")
(""Imagine cover by Train"" | ""preceededBy"" | ""Mermaid"")
(""Imagine cover by Train"" | ""followedBy"" | ""not specified"")
(""This'll Be My Year"" | ""creator"" | ""Train"")
(""This'll Be My Year"" | ""followedBy"" | ""Mermaid"")
(""Imagine"" | ""creator"" | ""John Lennon"")
(""Imagine"" | ""preceededBy"" | ""Power to the People"")
(""Imagine"" | ""followedBy"" | ""Happy Xmas (War Is Over)"")
(""Power to the People"" | ""creator"" | ""John Lennon"")
(""Power to the People"" | ""followedBy"" | ""Imagine"")
(""Happy Xmas (War Is Over)"" | ""creator"" | ""John Lennon"")
(""Happy Xmas (War Is Over)"" | ""preceededBy"" | ""Imagine"")"
877,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Akeem Ayers made his debut for the Tennessee Titans, which is coached by Mike Mularkey.","(Tennessee_Titans | coach | Mike_Mularkey)
(Akeem_Ayers | debutTeam | Tennessee_Titans)","(""Akeem Ayers"" | ""debutFor"" | ""Tennessee Titans"")
(""Tennessee Titans"" | ""coach"" | ""Mike Mularkey"")"
878,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bananaman, created by Steve Bright, is broadcast by the BBC and was first aired on 3rd October 1983.","(Bananaman | creator | Steve_Bright)
(Bananaman | broadcastedBy | BBC)
(Bananaman | firstAired | ""1983-10-03"")","(""Bananaman"" | ""creator"" | ""Steve Bright"")
(""Bananaman"" | ""broadcastedBy"" | ""BBC"")
(""Bananaman"" | ""firstAirDate"" | ""3rd October 1983"")"
879,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The university of Burgundy employs 2900 staff members, 16800 undergraduate students and 1299 doctoral students.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfDoctoralStudents | 1299)","(""University of Burgundy"" | ""employs"" | ""2900 staff members"")
(""University of Burgundy"" | ""has number of"" | ""16800 undergraduate students"")
(""University of Burgundy"" | ""has number of"" | ""1299 doctoral students"")"
880,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The album Nord was released by the artist Year of No Light.,(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light),"(""Nord"" | ""releaseDate"" | literal value if available)
(""Nord"" | ""artist"" | ""Year of No Light"")
(""Year of No Light"" | ""release"" | ""Nord"")"
881,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Cyril Frankel directed the 1956 movie It's Great to be Young which was written by Ted Willis. John Mills played the leading role in this 94 minute movie which received £282,838 and had Gilbert Taylor as its cinematographer.","(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor)
(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | gross | 282838.0)
(""It's_Great_to_Be_Young_(1956_film) | director | Cyril_Frankel)
(""It's_Great_to_Be_Young_(1956_film) | writer | Ted_Willis"")","(""Cyril Frankel"" | ""directed"" | ""It's Great to be Young"")
(""It's Great to be Young"" | ""releaseYear"" | ""1956"")
(""It's Great to be Young"" | ""writtenBy"" | ""Ted Willis"")
(""John Mills"" | ""actedIn"" | ""It's Great to be Young"")
(""John Mills"" | ""roleIn"" | ""leading role"")
(""It's Great to be Young"" | ""durationInMinutes"" | ""94"")
(""It's Great to be Young"" | ""earning"" | ""£282,838"")
(""Gilbert Taylor"" | ""isCinematographerOf"" | ""It's Great to be Young"")"
882,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Bootleg Series Volume 1: The Quine Tapes released in 2001-10-16 has the Universal Music Group record label and it lasts 230:05.,"(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Universal_Music_Group)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | releaseDate | 2001-10-16)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05)","(""The Bootleg Series Volume 1: The Quine Tapes"" | ""release date"" | 2001-10-16)
(""The Bootleg Series Volume 1: The Quine Tapes"" | ""record label"" | ""Universal Music Group"")
(""The Bootleg Series Volume 1: The Quine Tapes"" | ""duration"" | ""230:05"")"
883,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Year of No Light album Nord is in the sludge metal genre which was released on the date 2006-09-06. Live at Roadburn 2008 was preceded by the album Nord.,"(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light)","(""Year of No Light"" | ""type"" | ""Musical Artist"")
(""Year of No Light"" | ""has album"" | ""Nord"")
(""Nord"" | ""type"" | ""Music Album"")
(""Nord"" | ""by artist"" | ""Year of No Light"")
(""Nord"" | ""in genre"" | ""sludge metal"")
(""Nord"" | ""release date"" | ""2006-09-06"")
(""Live at Roadburn 2008"" | ""type"" | ""Music Album"")
(""Live at Roadburn 2008"" | ""preceded by"" | ""Nord"")"
884,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Universal Music Group is located in Santa Monica, California.","(Universal_Music_Group | location | Santa_Monica,_California)","(""Universal Music Group"" | ""location"" | ""Santa Monica, California"")"
885,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The instrumental Brian Kelly album Expect a Miracle was preceded by Pools of Light.,"(Expect_a_Miracle | precededBy | Pools_of_Light_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Instrumental_music)","(Brian Kelly | type | instrumental)
(Expect a Miracle |type | album)
(Brian Kelly | released | Expect a Miracle)
(Pools of Light | precedes | Expect a Miracle)
(Pools of Light | type | album)
(Brian Kelly | released | Pools of Light)"
886,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The song Mermaid was produced by Espionage production team and was released by Columbia Records.,"(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | producer | Espionage_(production_team))","(""Mermaid"" | ""producer"" | ""Espionage production team"")
(""Mermaid"" | ""release record company"" | ""Columbia Records"")"
887,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was born on November the 18th, 1923 in New Hampshire.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | birthPlace | New_Hampshire)","(Alan Shepard | birthDate | ""1923-11-18""^^xsd:date)
(Alan Shepard | birthPlace | ""New Hampshire"")"
888,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Tom Sizemore, who was married to Maeve Quinlan, starred in the movie Super Capers along with Adam West who had a main role.","(Super_Capers | starring | Tom_Sizemore)
(Tom_Sizemore | spouse | Maeve_Quinlan)
(Super_Capers | starring | Adam_West)","(Tom Sizemore | wasMarriedTo | Maeve Quinlan)
(Tom Sizemore | starredIn | Super Capers)
(Adam West | hasRoleIn | Super Capers)
(Adam West | interactedWith | Tom Sizemore)"
889,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva (born January 1, 1958), a United states citizen residing in New Jersey, is a professional in the field of mathematical optimization and was influenced by Andrzej Piotr Ruszczyński.","(Darinka_Dentcheva | influencedBy | Andrzej_Piotr_Ruszczyński)
(Darinka_Dentcheva | citizenship | United_States)
(Darinka_Dentcheva | birthDate | 1958-01-01)
(Darinka_Dentcheva | professionalField | Mathematical_optimization)
(Darinka_Dentcheva | residence | New_Jersey)","(Darinka Dentcheva | birthDate | ""January 1, 1958"")
(Darinka Dentcheva | citizenship | United States)
(Darinka Dentcheva | residence | New Jersey)
(Darinka Dentcheva | occupation | Professional)
(Darinka Dentcheva | fieldOfStudy | Mathematical Optimization)
(Darinka Dentcheva | influencedBy | Andrzej Piotr Ruszczyński)"
890,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The apoapsis of 1147 Stavropolis is 418476000000.0. This astronomical body has an epoch of 31 July 2016, this is julian day 2457600.5. The periapsis of 1147 Stavropolis is 260855000000 which has an orbital period of 1249.6 days.","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)","(1147 Stavropolis | apoapsis | 418476000000.0)
(1147 Stavropolis | epoch | 31 July 2016)
(1147 Stavropolis | epoch | julian day 2457600.5)
(1147 Stavropolis | periapsis | 260855000000)
(260855000000 | has orbital period | 1249.6 days)"
891,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Sour cream, chopped fruits, condensed milk, granola, raisins and shredded coconut are the main ingredients in Bionico (served at the dessert course) is a food found in Mexico. The currency in Mexico is the Mexican peso inhabited by the Mexicans.","(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Bionico | mainIngredient | ""Chopped Fruits, Sour Cream, Condensed Milk, Granola, Shredded Coconut, Raisins"")
(Bionico | country | Mexico)","(""Sour cream"" | ingredientOf | ""Bionico"")

(""chopped fruits"" | ingredientOf | ""Bionico"")

(""condensed milk"" | ingredientOf | ""Bionico"")

(""granola"" | ingredientOf | ""Bionico"")

(""raisins"" | ingredientOf | ""Bionico"")

(""shredded coconut"" | ingredientOf | ""Bionico"")

(""Bionico"" | course | ""dessert"")

(""Bionico"" | cuisine | ""Mexican"")

(""Mexico"" | hasCurrency | ""Mexican peso"") 

(""Mexican peso"" | currencyIn | ""Mexico"")

(""Mexico"" | inhabitedBy | ""Mexicans"")

(""Mexicans"" | inhabit | ""Mexico"")"
892,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The total area of Israel is 20769100000.0.,(Israel | areaTotal | 20769100000.0),(Israel | totalArea | 20769100000.0)
893,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The producer of Death on a Factory Farm was Sarah Teale.,(Death_on_a_Factory_Farm | producer | Sarah_Teale),"(""Death on a Factory Farm"" | ""producer"" | ""Sarah Teale"")"
894,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina is an Israeli national who died in Israel on June 14th, 1994.","(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | deathPlace | Israel)
(Liselotte_Grschebina | nationality | Israel)","(""Liselotte Grschebina"" | ""type"" | ""Person""),
(""Liselotte Grschebina"" | ""nationality"" | ""Israel""),
(""Liselotte Grschebina"" | ""deathDate"" | ""June 14th, 1994""),
(""Liselotte Grschebina"" | ""deathPlace"" | ""Israel"")"
895,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Located in Thurleigh and operated by MotorSport Vision, the Bedford Aerodrome has a runway length of 1095 which is named 08/26. The aerodrome serves the Bedford Autodrome.","(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | runwayLength | 1095.0)
(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | location | Thurleigh)
(Bedford_Aerodrome | runwayName | ""08/26"")","(Bedford Aerodrome | location | Thurleigh)
(Bedford Aerodrome | operator | MotorSport Vision)
(Bedford Aerodrome | hasRunway | 08/26)
(08/26 | length | 1095)
(Bedford Aerodrome | serves | Bedford Autodrome)"
896,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Associated with the band Monarch, the band Year of No Light produced the album Nord.","(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)
(Year_of_No_Light | associatedBand/associatedMusicalArtist | Monarch_(band))","(""Year of No Light"" | ""associatedWith"" | ""Monarch""),
(""Year of No Light"" | ""produced"" | ""Nord"")"
897,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The year of the dissolution of the Kingdom of England was 1707.,(Kingdom_of_England | dissolutionYear | 1707),"(""Kingdom of England"" | ""year of dissolution"" | ""1707"")"
898,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The population of Israel is 387.63 people/square km of land area. It’s formally known as the state of Israel. Liselotte Grschebina died in Petah Tikva and is an Israeli national.,"(Israel | populationDensity | 387.63)
(Liselotte_Grschebina | deathPlace | Petah_Tikva)
(Israel | longName | ""State of Israel"")
(Liselotte_Grschebina | nationality | Israel)","(""Israel"" | ""populationDensity"" | ""387.63 people/square km"")
(""Israel"" | ""formalName"" | ""state of Israel"")
(""Liselotte Grschebina"" | ""deathPlace"" | ""Petah Tikva"")
(""Liselotte Grschebina"" | ""nationality"" | ""Israeli"")"
899,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Turkish people speak the Turkish language.,(Turkish_people | language | Turkish_language),(Turkish people | speak | Turkish language)
900,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aaron Turner, a singer and musician in the post-metal genre in the Lotus Eaters band from Massachusetts, started performing in 1995.","(Aaron_Turner | genre | Post-metal)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Lotus_Eaters_(band))
(Aaron_Turner | instrument | Singing)
(Aaron_Turner | origin | Massachusetts)
(Aaron_Turner | activeYearsStartYear | 1995)","(Aaron Turner | type | Singer)
(Aaron Turner | type | Musician)
(Aaron Turner | genre | Post-metal)
(Aaron Turner | member of | Lotus Eaters Band)
(Aaron Turner | location | Massachusetts)
(Aaron Turner | start year | 1995)
(Lotus Eaters Band | location | Massachusetts)
(Lotus Eaters Band | genre | Post-metal)"
901,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Turkey is a unitary state.,(Turkey | governmentType | Unitary_state),"(""Turkey"" | ""typeOfGovernment"" | ""Unitary state"")"
902,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nurhan Atasoy was born in Reşadiye and made Tesvikiye his primary residence.,"(Nurhan_Atasoy | birthPlace | Reşadiye)
(Nurhan_Atasoy | residence | Teşvikiye)","(""Nurhan Atasoy"" | ""birthPlace"" | ""Reşadiye"")
(""Nurhan Atasoy"" | ""residence"" | ""Tesvikiye"")"
903,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Harry Carey was an actor born in 1878 and was the director of 'McVeagh of the South Seas',(McVeagh_of_the_South_Seas | director | Harry_Carey_(actor_born_1878)),"(""Harry Carey"" | ""type"" | ""Actor""),
(""Harry Carey"" | ""birthYear"" | 1878),
(""Harry Carey"" | ""directorOf"" | ""McVeagh of the South Seas""),
(""McVeagh of the South Seas"" | ""type"" | ""Movie""),
(""McVeagh of the South Seas"" | ""director"" | ""Harry Carey"")"
904,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Abraham A. Ribicoff was born in the United States of America and is an American citizen.,"(Abraham_A._Ribicoff | nationality | American)
(Abraham_A._Ribicoff | birthPlace | United_States)","(Abraham A. Ribicoff | birthPlace | United States of America)
(Abraham A. Ribicoff | nationality | American)"
905,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nord is an album produced by Year of No Light.,(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light),"(""Nord"" | ""type"" | ""Album"")
(""Nord"" | ""producer"" | ""Year of No Light"")"
906,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The university of Burgundy has 16800 undergraduate students, 9400 postgraduate students. It is located in the city of Dijon. It had its campus in Dijon, France.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | campus | Dijon)
(University_of_Burgundy | city | Dijon)
(University_of_Burgundy | numberOfPostgraduateStudents | 9400)
(University_of_Burgundy | country | France)","(""University of Burgundy"" | ""studentTypeCount"" | {""undergraduate"": 16800, ""postgraduate"": 9400})
(""University of Burgundy"" | ""location"" | ""Dijon"")
(""University of Burgundy"" | ""campus"" | ""Dijon, France"")"
907,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Graco Ramírez is a leading official of Morelos.,(Morelos | leader | Graco_Ramírez),"(""Graco Ramírez"" | ""type"" | ""Person""),
(""Graco Ramírez"" | ""occupation"" | ""Official""),
(""Graco Ramírez"" | ""memberOf"" | ""Morelos"")"
908,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Death on a Factory Farm is an 83-minute HBO film edited by Geof Bartz. Jamie Lawrence wrote the music.,"(Death_on_a_Factory_Farm | broadcastedBy | HBO)
(Death_on_a_Factory_Farm | editor | Geof_Bartz)
(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)
(Death_on_a_Factory_Farm | runtime | 83.0)","(""Death on a Factory Farm"" | ""type"" | ""Film"")
(""Death on a Factory Farm"" | ""duration"" | 83)
(""Death on a Factory Farm"" | ""producer"" | ""HBO"")
(""Death on a Factory Farm"" | ""hasEditor"" | ""Geof Bartz"")
(""Death on a Factory Farm"" | ""hasMusicContributor"" | ""Jamie Lawrence"")"
909,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers is a movie starring Justin Whalin and written by the director Ray Griggs. It was distributed by Lionsgate and Roadside Attractions with a gross income of only $30,955.","(Super_Capers | distributor | Roadside_Attractions)
(Super_Capers | distributor | Lionsgate)
(Super_Capers | starring | Justin_Whalin)
(Super_Capers | writer | Ray_Griggs_(director))
(Super_Capers | gross | 30955.0)","(""Super Capers"" | ""starring"" | ""Justin Whalin"")
(""Super Capers"" | ""writtenBy"" | ""Ray Griggs"")
(""Super Capers"" | ""directedBy"" | ""Ray Griggs"")
(""Super Capers"" | ""distributedBy"" | ""Lionsgate"")
(""Super Capers"" | ""distributedBy"" | ""Roadside Attractions"")
(""Super Capers"" | ""grossIncome"" | ""$30,955"")"
910,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","English botanist Lady Anne Monson was born January 1, 1726. She was married to George Monson.","(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | spouse | George_Monson)
(Lady_Anne_Monson | professionalField | Botany)","(Lady Anne Monson | type | English botanist)
(Lady Anne Monson | birthDate | January 1, 1726)
(Lady Anne Monson | spouse | George Monson)"
911,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson was born in Darlington, England, but now lives in India despite having an English nationality.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | nationality | Kingdom_of_England)
(Lady_Anne_Monson | residence | India)","(""Lady Anne Monson"" | ""place of birth"" | ""Darlington, England"")
(""Lady Anne Monson"" | ""current residence"" | ""India"")
(""Lady Anne Monson"" | ""nationality"" | ""English"")"
912,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers is a 98 minute film that was distributed by Lionsgate and Roadside Attractions. It was directed by Ray Griggs and stars Justin Whalin. The budget was $2,000,000 and they only grossed $30,955.","(Super_Capers | distributor | Roadside_Attractions)
(Super_Capers | distributor | Lionsgate)
(Super_Capers | budget | 2000000.0)
(Super_Capers | starring | Justin_Whalin)
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | runtime | 98.0)
(Super_Capers | gross | 30955.0)","(""Super Capers"" | ""runtime"" | ""98 minutes"")
(""Super Capers"" | ""distributor"" | ""Lionsgate"")
(""Super Capers"" | ""distributor"" | ""Roadside Attractions"")
(""Super Capers"" | ""director"" | ""Ray Griggs"")
(""Super Capers"" | ""starring"" | ""Justin Whalin"")
(""Super Capers"" | ""budget"" | ""$2,000,000"")
(""Super Capers"" | ""gross"" | ""$30,955"")"
913,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bedford Aerodrome has served the Bedford Autodrome and has a runway named 08/26 which is made of concrete.,"(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | runwayName | ""08/26"")
(Bedford_Aerodrome | runwaySurfaceType | Concrete)","(""Bedford Aerodrome"" | ""serves"" | ""Bedford Autodrome"")
(""Bedford Aerodrome"" | ""hasRunway"" | ""08/26"")
(""08/26"" | ""isMadeOf"" | ""concrete"")"
914,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiação Sportiva Arapiraquense has 17000 members and played in the 2015 season, as well as in the Campeonato Brasileiro Série C league which The Vila Nova Futebol Clube were champions at.","(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | season | 2015)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)","(""Agremiação Sportiva Arapiraquense"" | ""hasNumberOfMembers"" | ""17000"")
(""Agremiação Sportiva Arapiraquense"" | ""participatedIn"" | ""2015 season"")
(""Agremiação Sportiva Arapiraquense"" | ""participatedIn"" | ""Campeonato Brasileiro Série C"")
(""Vila Nova Futebol Clube"" | ""won"" | ""Campeonato Brasileiro Série C"")"
915,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",ENAIRE is the operating organisation for Adolfo Suarez Madrid-Barajas airport. The airport is elevated 610 metres above sea level and is located at San Sebastian de los Reyes.,"(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | San_Sebastián_de_los_Reyes)","(ENAIRE | operatingOrganisationFor | Adolfo Suarez Madrid-Barajas airport)
(Adolfo Suarez Madrid-Barajas airport | elevation | 610 metres)
(Adolfo Suarez Madrid-Barajas airport | location | San Sebastian de los Reyes)"
916,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Train song Mermaid belongs to the genre of pop rock, which includes the subgenre of indie pop.","(Mermaid_(Train_song) | genre | Pop_rock)
(Pop_rock | musicSubgenre | Indie_pop)","(""Mermaid"" | ""isSongBy"" | ""Train"")
(""Mermaid"" | ""belongsToGenre"" | ""pop rock"")
(""pop rock"" | ""includesSubgenre"" | ""indie pop"")"
917,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy in Dijon has 16,800 undergraduate students.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | campus | Dijon)","(""University of Burgundy"" | ""location"" | ""Dijon""),
(""University of Burgundy"" | ""totalUndergraduateStudents"" | ""16800"")"
918,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva, a United States citizen , born on January 1, 1958 has his residence in New Jersey, United States. A mathematician working in the field of mathematical optimization and stochastic programming, she had her theory influenced by Andrzej Piotr Ruszczyński.","(Darinka_Dentcheva | influencedBy | Andrzej_Piotr_Ruszczyński)
(Darinka_Dentcheva | citizenship | United_States)
(Darinka_Dentcheva | birthDate | 1958-01-01)
(Darinka_Dentcheva | professionalField | Mathematical_optimization)
(Darinka_Dentcheva | knownFor | Stochastic_programming)
(Darinka_Dentcheva | residence | New_Jersey)
(Darinka_Dentcheva | residence | United_States)","(""Darinka Dentcheva"" | ""type"" | ""Person"")
(""Darinka Dentcheva"" | ""citizenship"" | ""United States"")
(""Darinka Dentcheva"" | ""dateOfBirth"" | ""1958-01-01""^^xsd:date)
(""Darinka Dentcheva"" | ""residence"" | ""New Jersey, United States"")
(""Darinka Dentcheva"" | ""occupation"" | ""Mathematician"")
(""Darinka Dentcheva"" | ""fieldOfWork"" | ""Mathematical optimization"")
(""Darinka Dentcheva"" | ""fieldOfWork"" | ""Stochastic programming"")
(""Darinka Dentcheva"" | ""influencedBy"" | ""Andrzej Piotr Ruszczyński"")"
919,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiação Sportiva Arapiraquense (full name ""Agremiação Sportiva Arapiraquense"") play in the Campeonato Brasileiro Série C league, where the Vila Nova Futebol Clube were champions . Estádio Municipal Coaracy da Mata Fonseca in Arapiraca is the name of the ground of Agremiação Sportiva Arapiraquense.","(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)
(Agremiação_Sportiva_Arapiraquense | fullName | ""Agremiação Sportiva Arapiraquense"")","(""Agremiação Sportiva Arapiraquense"" | name | ""Agremiação Sportiva Arapiraquense"")
(""Agremiação Sportiva Arapiraquense"" | league | ""Campeonato Brasileiro Série C"")
(""Vila Nova Futebol Clube"" | title | ""champions"")
(""Vila Nova Futebol Clube"" | league | ""Campeonato Brasileiro Série C"")
(""Estádio Municipal Coaracy da Mata Fonseca"" | location | ""Arapiraca"")
(""Agremiação Sportiva Arapiraquense"" | ground | ""Estádio Municipal Coaracy da Mata Fonseca"")"
920,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","McVeagh of the South Seas is a film starring Harry Carey, who was born in 1878.",(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878)),"(""McVeagh of the South Seas"" | type | ""film"")
(""McVeagh of the South Seas"" | starring | ""Harry Carey"")
(""Harry Carey"" | type | ""actor"")
(""Harry Carey"" | birthDate | ""1878"")"
921,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The film Super Capers, distributed by Lionsgate, had a budget of 2000000 and a running time of 98 minutes.","(Super_Capers | distributor | Lionsgate)
(Super_Capers | budget | 2000000.0)
(Super_Capers | runtime | 98.0)","(""Super Capers"" | ""type"" | ""Film"")
(""Super Capers"" | ""budget"" | ""2000000"")
(""Super Capers"" | ""runningTime"" | ""98 minutes"")
(""Super Capers"" | ""distributedBy"" | ""Lionsgate"")
(""Lionsgate"" | ""distributes"" | ""Super Capers"")"
922,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The United States of America is the foundation place of Pontiac.,(Pontiac | foundationPlace | United_States),"(""United States of America"" | ""isFoundationPlaceOf"" | ""Pontiac"")"
923,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bootleg Series Volume 1: The Quine Tapes is by The Velvet Underground and has a runtime of 230.05 minutes. Bootleg Series Volume 1: The Quine Tapes was recorded in St. Louis, Missouri in the USA., and is preceded by the Velvet Underground album Squeeze..","(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | United_States)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | St._Louis,_Missouri)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | precededBy | Squeeze_(The_Velvet_Underground_album))","(""Bootleg Series Volume 1: The Quine Tapes"" | ""isBy"" | ""The Velvet Underground"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""runtime"" | 230.05)
(""Bootleg Series Volume 1: The Quine Tapes"" | ""recordedIn"" | ""St. Louis"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""locatedIn"" | ""Missouri"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""locatedIn"" | ""USA"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""precededBy"" | ""Squeeze"")
(""Squeeze"" | ""isAnAlbumBy"" | ""The Velvet Underground"")"
924,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers is a film starring Adam West, who has been an actor since 1954.","(Super_Capers | starring | Adam_West)
(Adam_West | activeYearsStartYear | 1954-01-01)","(""Super Capers"" | type | ""film"")
(""Super Capers"" | starring | ""Adam West"")
(""Adam West"" | type | ""actor"")
(""Adam West"" | hasProfessionSince | ""1954"")"
925,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The population density of Ciudad Ayala led by City Manager is 1604.0.,"(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | populationDensity | 1604.0)","(""Ciudad Ayala"" | ""populationDensity"" | ""1604.0"")
(""Ciudad Ayala"" | ""leader"" | ""City Manager"")"
926,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","McVeagh of the South Seas, with the IMDb id of 0004319, was directed by Cyril Bruce and Harry Carey who was born in 1878 and also had a role in the film. The movie was produced by the Progressive Motion Picture Company.","(McVeagh_of_the_South_Seas | imdbId | 0004319)
(McVeagh_of_the_South_Seas | director | Cyril_Bruce)
(McVeagh_of_the_South_Seas | director | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | producer | The_Progressive_Motion_Picture_Company)","(""McVeagh of the South Seas"" | ""IMDb id"" | ""0004319"")
(""McVeagh of the South Seas"" | ""director"" | ""Cyril Bruce"")
(""McVeagh of the South Seas"" | ""director"" | ""Harry Carey"")
(""McVeagh of the South Seas"" | ""actor"" | ""Harry Carey"")
(""McVeagh of the South Seas"" | ""producer"" | ""Progressive Motion Picture Company"")
(""Harry Carey"" | ""birth year"" | 1878)
(""Harry Carey"" | ""role in"" | ""McVeagh of the South Seas"")"
927,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument was established in 2000 in Adams County, Pennsylvania, USA and is categorized as a Contributing Property. Adams County, Pennsylvania has Carroll County, Maryland to its southeast and Franklin County, Pennsylvania to its west.","(Adams_County,_Pennsylvania | hasToItsWest | Franklin_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)
(11th_Mississippi_Infantry_Monument | country | ""United States"")","(""11th Mississippi Infantry Monument"" | ""establishmentYear"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Adams County, Pennsylvania, USA"")
(""11th Mississippi Infantry Monument"" | ""isPartOf"" | ""Contributing Property"")
(""Adams County, Pennsylvania"" | ""neighbourToTheSoutheast"" | ""Carroll County, Maryland"")
(""Adams County, Pennsylvania"" | ""neighbourToTheWest"" | ""Franklin County, Pennsylvania"")"
928,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Istanbul is in the Eastern European Summer time zone.,(Istanbul | timeZone | Eastern_European_Summer_Time),(Istanbul | location | Eastern European Summer time zone)
929,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Bedford Aerodrome is 83.2104 meters above sea level and its runway surface is made of concrete.,"(Bedford_Aerodrome | elevationAboveTheSeaLevel | 83.2104)
(Bedford_Aerodrome | runwaySurfaceType | Concrete)","(""Bedford Aerodrome"" | ""elevation"" | ""83.2104 meters"")
(""Bedford Aerodrome"" | ""runwaySurface"" | ""concrete"")"
930,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy its campus located in Dijon, France, with a total of 9,400 postgraduate students and 2,900 staff members.","(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | campus | Dijon)
(University_of_Burgundy | city | Dijon)
(University_of_Burgundy | numberOfPostgraduateStudents | 9400)
(University_of_Burgundy | country | France)","(""University of Burgundy"" | ""location"" | ""Dijon, France"")
(""University of Burgundy"" | ""number of postgraduate students"" | ""9,400"")
(""University of Burgundy"" | ""number of staff members"" | ""2,900"")"
931,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","American, Abraham A. Ribicoff was born in The United States.","(Abraham_A._Ribicoff | nationality | American)
(Abraham_A._Ribicoff | birthPlace | United_States)","(Abraham A. Ribicoff | nationality | ""American"")
(Abraham A. Ribicoff | place of birth | ""The United States"")"
932,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The film Super Capers starred presenter Justin Whalin and Michael Rooker (born 1955).,"(Super_Capers | starring | Justin_Whalin)
(Justin_Whalin | occupation | Presenter)
(Super_Capers | starring | Michael_Rooker)
(Michael_Rooker | birthYear | 1955-01-01)","(""Super Capers"" | ""starred actor"" | ""Justin Whalin"")
(""Super Capers"" | ""starred actor"" | ""Michael Rooker"")
(""Justin Whalin"" | ""role in"" | ""Super Capers"")
(""Michael Rooker"" | ""role in"" | ""Super Capers"")
(""Justin Whalin"" | ""occupation"" | ""presenter"")
(""Michael Rooker"" | ""birth year"" | 1955)"
933,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Alan Shepard died in California but was born in 1923 in New Hampshire. New Hampshire counts the purple finch amongst its native birds.,"(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | deathPlace | California)
(New_Hampshire | bird | Purple_finch)
(Alan_Shepard | birthPlace | New_Hampshire)","(Alan Shepard | birthYear | 1923)
(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | deathPlace | California)
(New Hampshire | hasNativeBird | purple finch)"
934,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Hobbit came out before The Fellowship of the Rings and the rest of the Lord of the Rings trilogy.,"(The_Fellowship_of_the_Ring | precededBy | The_Hobbit)
(The_Hobbit | followedBy | The_Lord_of_the_Rings)","(""The Hobbit"" | ""releaseDate"" | ""releaseDateLiteral"")
(""The Fellowship of the Rings"" | ""releaseDate"" | ""releaseDateLiteral"")
(""The Lord of the Rings trilogy"" | ""releaseDate"" | ""releaseDateLiteral"")
(""The Hobbit"" | ""precede"" | ""The Fellowship of the Rings"")
(""The Hobbit"" | ""precede"" | ""The Lord of the Rings trilogy"")
(""The Fellowship of the Rings"" | ""part of"" | ""The Lord of the Rings trilogy"")"
935,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Pontiac made an automobile called the Pontiac Rageous.,"(Pontiac_Rageous | manufacturer | Pontiac)
(Pontiac | product | Automobile)","(""Pontiac"" | ""made"" | ""automobile"")
(""automobile"" | ""called"" | ""Pontiac Rageous"")"
936,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The University of Cambridge has 6645 academic staff.,(University_of_Cambridge | academicStaffSize | 6645),(University of Cambridge | hasAcademicStaff | 6645)
937,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The pop rock song Mermaid by the band Train was released under the record labels of Columbia Records and Sony Music Entertainment.,"(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)","(Mermaid | type | pop rock song)
(Mermaid | creator | Train)
(Mermaid | release | Columbia Records)
(Mermaid | release | Sony Music Entertainment)
(Train | type | band)
(Train | produce | Mermaid)
(Columbia Records | type | record label)
(Columbia Records | release | Mermaid)
(Sony Music Entertainment | type | record label)
(Sony Music Entertainment | release | Mermaid)"
938,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Jamie Lawrence wrote music for the HBO film 'Death on a Factory Farm.' Lawrence also played for Ashford Town F.C.,"(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)
(Jamie_Lawrence | club | Ashford_Town_(Middlesex)_F.C.)
(Death_on_a_Factory_Farm | broadcastedBy | HBO)","(""Jamie Lawrence"" | ""wrote music for"" | ""Death on a Factory Farm"")
(""Jamie Lawrence"" | ""occupation"" | ""musician"")
(""Death on a Factory Farm"" | ""type"" | ""HBO film"")
(""Jamie Lawrence"" | ""played for"" | ""Ashford Town F.C."")
(""Ashford Town F.C."" | ""type"" | ""Football Club"")"
939,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bionico is served at the dessert course with main ingredients as sour cream, chopped fruits, condensed milk, granola, raisins and shredded coconut.","(Bionico | course | Dessert)
(Bionico | mainIngredient | ""Chopped Fruits, Sour Cream, Condensed Milk, Granola, Shredded Coconut, Raisins"")","(""Bionico"" | ""isServedAt"" | ""dessert course"")
(""Bionico"" | ""hasIngredient"" | ""sour cream"")
(""Bionico"" | ""hasIngredient"" | ""chopped fruits"")
(""Bionico"" | ""hasIngredient"" | ""condensed milk"")
(""Bionico"" | ""hasIngredient"" | ""granola"")
(""Bionico"" | ""hasIngredient"" | ""raisins"")
(""Bionico"" | ""hasIngredient"" | ""shredded coconut"")"
940,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Beginning in 1997, Pontiac produced the Rageous on its assembly line in Detroit, Michigan.","(Pontiac_Rageous | productionStartYear | 1997)
(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | assembly | Detroit)","(""Pontiac"" | ""productionStartYear"" | 1997)
(""Pontiac"" | ""produced"" | ""Rageous"") 
(""Pontiac"" | ""locatedIn"" | ""Detroit, Michigan"") 
(""Detroit, Michigan"" | ""homeOf"" | ""Pontiac"") 
(""Rageous"" | ""maker"" | ""Pontiac"")
(""Rageous"" | ""productionLocation"" | ""Detroit, Michigan"")
(""Rageous"" | ""productionStartYear"" | 1997)"
941,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva a United states Citizen, born on January 1, 1958 is known for Stochastic programming. She was influenced by Andrzej Piotr Ruszczyński.","(Darinka_Dentcheva | influencedBy | Andrzej_Piotr_Ruszczyński)
(Darinka_Dentcheva | citizenship | United_States)
(Darinka_Dentcheva | birthDate | 1958-01-01)
(Darinka_Dentcheva | knownFor | Stochastic_programming)","(""Darinka Dentcheva"" | ""birthDate"" | ""January 1, 1958"")
(""Darinka Dentcheva"" | ""nationality"" | ""United States"")
(""Darinka Dentcheva"" | ""knownFor"" | ""Stochastic programming"")
(""Darinka Dentcheva"" | ""influencedBy"" | ""Andrzej Piotr Ruszczyński"")"
942,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Robert A.M. Stern is the architect for Alan B. Miller Hall which is at 101 Ukrop Way in Virginia, USA. The Mason School of Business are the current tenants of the Hall which began construction on 30/03/2007.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | location | Virginia)
(Mason_School_of_Business | country | United_States)","(""Robert A.M. Stern"" | ""is the architect for"" | ""Alan B. Miller Hall"")
(""Alan B. Miller Hall"" | ""is located at"" | ""101 Ukrop Way in Virginia, USA"")
(""Mason School of Business"" | ""are the current tenants of"" | ""Alan B. Miller Hall"")
(""Alan B. Miller Hall"" | ""began construction on"" | ""30/03/2007"")"
943,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala is a city in Morelos, Mexico with a UTC offset of -6. It has a council-manager type of government with a leader called City Manager.","(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | governmentType | Council-manager_government)
(Ciudad_Ayala | utcOffset | −6)
(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | country | Mexico)","(""Ciudad Ayala"" | ""type"" | ""City"")
(""Ciudad Ayala"" | ""locatedIn"" | ""Morelos"")
(""Morelos"" | ""locatedIn"" | ""Mexico"")
(""Ciudad Ayala"" | ""utcOffset"" | ""-6"")
(""Ciudad Ayala"" | ""governmentType"" | ""Council-Manager"")
(""Ciudad Ayala"" | ""governmentPosition"" | ""City Manager"")"
944,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard, who served as Chief of the Astronaut Office in 1963, was born in New Hampshire in the United States on November 18, 1923. He graduated from NWC in 1957 with an M.A. Shepard retired on August 1st, 1974, and died in California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | servedAsChiefOfTheAstronautOfficeIn | 1963)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | dateOfRetirement | ""1974-08-01"")
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | almaMater | ""NWC, M.A. 1957"")","(Alan Shepard | birthDate | ""November 18, 1923"")
(Alan Shepard | birthPlace | New Hampshire)
(New Hampshire | country | United States)
(Alan Shepard | almaMater | NWC)
(Alan Shepard | education | ""M.A."")
(Alan Shepard | graduationDate | ""1957"")
(Alan Shepard | jobTitle | Chief of the Astronaut Office)
(Alan Shepard | positionStartDate | ""1963"")
(Alan Shepard | retirementDate | ""August 1, 1974"")
(Alan Shepard | deathPlace | California)"
945,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Botanist Lady Anne Monson was born on January 1, 1726 in Darlington, which is located in the Kingdom of England. Although she did spend time living in the Kingdom of England and was a British national, she resided in India for the majority of her lifetime. She passed away on February 18, 1776.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | deathDate | 1776-02-18)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | nationality | Kingdom_of_England)
(Lady_Anne_Monson | residence | India)
(Lady_Anne_Monson | professionalField | Botany)","(""Lady Anne Monson"" | ""type"" | ""Botanist"")
(""Lady Anne Monson"" | ""birthDate"" | ""January 1, 1726"")
(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington"")
(""Darlington"" | ""isLocatedIn"" | ""Kingdom of England"")
(""Lady Anne Monson"" | ""nationality"" | ""British"")
(""Lady Anne Monson"" | ""residence"" | ""India"")
(""Lady Anne Monson"" | ""deathDate"" | ""February 18, 1776"")"
946,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brandon Carter was born in England and attended the University of Cambridge.,"(Brandon_Carter | birthPlace | England)
(Brandon_Carter | almaMater | University_of_Cambridge)","1. (Brandon Carter | birthPlace | England)
2. (Brandon Carter | almaMater | University of Cambridge)"
947,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was a photographer who was born in Karlsruhe on May 2, 1908 and died in Petah Tikva on June 14, 1994.","(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | deathPlace | Petah_Tikva)
(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | professionalField | Photographer)","(Liselotte Grschebina | type | Photographer)
(Liselotte Grschebina | birthDate | ""May 2, 1908"")
(Liselotte Grschebina | birthPlace | Karlsruhe)
(Liselotte Grschebina | deathDate | ""June 14, 1994"")
(Liselotte Grschebina | deathPlace | Petah Tikva)"
948,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nord, a sludge metal album by Year of No Light, was released on September 6, 2006 and was followed by Live at Roadburn 2008.","(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light)","(""Nord"" | ""type"" | ""sludge metal album"")
(""Nord"" | ""by"" | ""Year of No Light"")
(""Nord"" | ""release date"" | ""September 6, 2006"")
(""Year of No Light"" | ""released"" | ""Nord"")
(""Nord"" | ""followed by"" | ""Live at Roadburn 2008"")
(""Live at Roadburn 2008"" | ""follows"" | ""Nord"")"
949,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Born October 13, 1964, Nie Haisheng participated in both the Shenzhou 6 and Shenzhou 10 missions.","(Nie_Haisheng | mission | Shenzhou_10)
(Nie_Haisheng | mission | Shenzhou_6)
(Nie_Haisheng | birthDate | 1964-10-13)","(""Nie Haisheng"" | ""birthDate"" | ""October 13, 1964"")
(""Nie Haisheng"" | ""participatedIn"" | ""Shenzhou 6"")
(""Nie Haisheng"" | ""participatedIn"" | ""Shenzhou 10"")"
950,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Government type of France is unitary state.,(France | governmentType | Unitary_state),(France | Government type | unitary state)
951,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala is in the Pacific Daylight Time zone and it has a UTC offset of -6.,"(Ciudad_Ayala | utcOffset | −6)
(Ciudad_Ayala | timeZone | Pacific_Daylight_Time)","(""Ciudad Ayala"" | ""is in"" | ""Pacific Daylight Time zone""),
(""Ciudad Ayala"" | ""has UTC offset"" | ""-6"")"
952,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Hypermarcas (located in Sao Paulo) whose key person is the CEO makes healthcare products, employs 10,252 people, has a net income of $108,600,000.","(Hypermarcas | keyPerson | CEO)
(Hypermarcas | netIncome | 108600000)
(Hypermarcas | numberOfEmployees | 10252)
(Hypermarcas | product | Healthcare)
(Hypermarcas | location | São_Paulo)","(""Hypermarcas"" | ""location"" | ""Sao Paulo""),
(""Hypermarcas"" | ""keyPerson"" | ""CEO""),
(""Hypermarcas"" | ""industry"" | ""Healthcare products""),
(""Hypermarcas"" | ""numberOfEmployees"" | 10252),
(""Hypermarcas"" | ""netIncome"" | ""$108,600,000"")"
953,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Akeem Ayers is draft pick 39 for debut team Tennessee Titans.,"(Akeem_Ayers | draftPick | ""39"")
(Akeem_Ayers | debutTeam | Tennessee_Titans)","(""Akeem Ayers"" | ""typeOf"" | ""draftPick"")
(""Akeem Ayers"" | ""draftPickNumber"" | ""39"")
(""Akeem Ayers"" | ""debutTeam"" | ""Tennessee Titans"")
(""Tennessee Titans"" | ""hasPlayer"" | ""Akeem Ayers"")"
954,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala, led by one of its leaders Juan Nolasco, is in the Pacific Standard Time Zone.","(Ciudad_Ayala | timeZone | Pacific_Standard_Time_Zone)
(Ciudad_Ayala | leader | Juan_Nolasco)","(""Ciudad Ayala"" | leader | ""Juan Nolasco"")
(""Ciudad Ayala"" | location | ""Pacific Standard Time Zone"")"
955,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy was born in Turkey, where total area is 783,356 square kilometers.","(Turkey | areaTotal | 783356.0)
(Nurhan_Atasoy | birthPlace | Turkey)","(""Nurhan Atasoy"" | ""place of birth"" | ""Turkey"")
(""Turkey"" | ""total area"" | ""783,356 square kilometers"")"
956,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Mermaid song by Train has a runtime of three minutes and sixteen seconds which is on both Columbia Records and the Sony Music Entertainment record label.,"(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)","(""The Mermaid song"" | ""by"" | ""Train"")
(""The Mermaid song"" | ""hasRuntime"" | ""three minutes and sixteen seconds"")
(""The Mermaid song"" | ""onRecordLabel"" | ""Columbia Records"")
(""The Mermaid song"" | ""onRecordLabel"" | ""Sony Music Entertainment"")"
957,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson, wife of George Monson, was born on January 1, 1726 in Darlington in the Kingdom of England. She lived in India at the time of her death on February 18, 1776.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | deathDate | 1776-02-18)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | residence | India)
(Lady_Anne_Monson | spouse | George_Monson)","(""Lady Anne Monson"" | ""birthDate"" | ""January 1, 1726"")
(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington"")
(""Lady Anne Monson"" | ""birthPlace"" | ""Kingdom of England"")
(""Lady Anne Monson"" | ""spouse"" | ""George Monson"")
(""Lady Anne Monson"" | ""deathDate"" | ""February 18, 1776"")
(""Lady Anne Monson"" | ""deathPlace"" | ""India"")
(""George Monson"" | ""spouse"" | ""Lady Anne Monson"")"
958,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Train song by Mermaid is from the pop rock genre.,(Mermaid_(Train_song) | genre | Pop_rock),"(""The Train song"" | isComposedBy | ""Mermaid"")
(""The Train song"" | isFromGenre | ""pop rock"")"
959,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Rageous went into production in 1997 and was assembled in the Detroit city, which is in Michigan. The Pontiac Rageous was assembled in Detroit.","(Pontiac_Rageous | productionStartYear | 1997)
(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | assembly | Detroit)
(Pontiac_Rageous | productionEndYear | 1997)
(Detroit | type | City_(Michigan))","(""Pontiac Rageous"" | ""productionStartYear"" | 1997)
(""Pontiac Rageous"" | ""placeOfAssembly"" | ""Detroit"")
(""Pontiac Rageous"" | ""affects"" | ""Detroit city"")
(""Detroit city"" | ""isPartOf"" | ""Michigan"")"
960,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The campus of the University of Burgundy is located in Dijon and has 9400 post-graduate students.,"(University_of_Burgundy | campus | Dijon)
(University_of_Burgundy | city | Dijon)
(University_of_Burgundy | numberOfPostgraduateStudents | 9400)","(""University of Burgundy"" | ""location"" | ""Dijon"")
(""University of Burgundy"" | ""has students"" | ""9400 post-graduate students"")"
961,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Velvet Underground created and produced the 230.05 minute rock album Bootleg Series Volume 1: The Quine Tapes in St. Louis, Missouri, USA.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | United_States)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | St._Louis,_Missouri)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | genre | Rock_music)","(""The Velvet Underground"" | ""type"" | ""Band"")
(""The Velvet Underground"" | ""created"" | ""Bootleg Series Volume 1: The Quine Tapes"")
(""The Velvet Underground"" | ""produced"" | ""Bootleg Series Volume 1: The Quine Tapes"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""type"" | ""Rock Album"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""durationInMinutes"" | ""230.05"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""locationCreated"" | ""St. Louis, Missouri, USA"")"
962,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The campus of the Acharya Institute of Technology is located at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090. The Institute is affiliated with Visvesvaraya Technological University. The director of the Institute is Dr. G. P. Prabhukumar. The academic staff total 500 and tennis is one of the sports offered. The All India Council for Technical Education, located in Mumbai, proudly awarded the Technical Campus status to the Acharya Institute of Technology.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(All_India_Council_for_Technical_Education | location | Mumbai)
(Acharya_Institute_of_Technology | director | ""Dr. G. P. Prabhukumar"")
(Acharya_Institute_of_Technology | academicStaffSize | ""~500"")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | sportsOffered | Tennis)
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)","(Acharya Institute of Technology | location | Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090)
(Acharya Institute of Technology | affiliated with | Visvesvaraya Technological University)
(Acharya Institute of Technology | director | Dr. G. P. Prabhukumar)
(Acharya Institute of Technology | academic staff | 500)
(Acharya Institute of Technology | sport offered | Tennis)
(All India Council for Technical Education | location | Mumbai)
(All India Council for Technical Education | awarded | Technical Campus status to Acharya Institute of Technology)"
963,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Train song Mermaid was composed before by the song This'll be my year, but after the John Lennon's hit Imagine which was followed by Happy Xmas (War is Over) and Power to the People.","(""Mermaid_(Train_song) | precededBy | This'll_Be_My_Year)
(Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song))
(Imagine_(John_Lennon_song) | followedBy | Happy_Xmas_(War_Is_Over))
(Imagine_(John_Lennon_song) | precededBy | Power_to_the_People_(song))","(""Mermaid"" | ""type"" | ""song"")
(""Mermaid"" | ""artist"" | ""Train"")
(""Mermaid"" | ""composedBefore"" | ""This'll be my year"")
(""Mermaid"" | ""composedAfter"" | ""Imagine"")
(""Imagine"" | ""type"" | ""song"")
(""Imagine"" | ""artist"" | ""John Lennon"")
(""Imagine"" | ""followedBy"" | ""Happy Xmas (War is Over)"")
(""Imagine"" | ""followedBy"" | ""Power to the People"")
(""Happy Xmas (War is Over)"" | ""type"" | ""song"")
(""Happy Xmas (War is Over)"" | ""artist"" | ""John Lennon"")
(""Power to the People"" | ""type"" | ""song"")
(""Power to the People"" | ""artist"" | ""John Lennon"")
(""This'll be my year"" | ""type"" | ""song"")
(""This'll be my year"" | ""artist"" | ""Train"")
(""This'll be my year"" | ""composedAfter"" | ""Mermaid"")"
964,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","""Death on a Factory Farm"" was a film produced by Tom Simon and included music composed by Jamie Lawrence.","(Death_on_a_Factory_Farm | producer | Tom_Simon)
(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)","(""Death on a Factory Farm"" | type | ""Film"")
(""Death on a Factory Farm"" | producer | ""Tom Simon"")
(""Death on a Factory Farm"" | music composed by | ""Jamie Lawrence"")"
965,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Trance musician Andrew Rayel was born in Chisinau, Moldova. He started his career in 2009, and is associated with Bobina.","(Andrew_Rayel | birthPlace | ""Chișinău, Moldova"")
(Andrew_Rayel | associatedBand/associatedMusicalArtist | Bobina)
(Andrew_Rayel | activeYearsStartYear | 2009)
(Andrew_Rayel | genre | Trance_music)","(Andrew Rayel | type | Trance musician)
(Andrew Rayel | birthPlace | Chisinau)
(Chisinau | partOf | Moldova)
(Andrew Rayel | careerStartYear | 2009)
(Andrew Rayel | associatedWith | Bobina)"
966,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The film Super Capers starred Justin Whalin and was directed by Ray Griggs.,"(Super_Capers | starring | Justin_Whalin)
(Super_Capers | director | Ray_Griggs_(director))","(""Super Capers"" | ""starred"" | ""Justin Whalin""),
(""Super Capers"" | ""directedBy"" | ""Ray Griggs"")"
967,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Agremiacao Sportiva Arapiraquense's ground is the Estadio Municipal Coaracy da Mata Fonseca and it has 17000 members. It plays in the Campeonato Brasileiro Serie C league.,"(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(""Agremiacao Sportiva Arapiraquense"" | ""ground"" | ""Estadio Municipal Coaracy da Mata Fonseca"")
(""Agremiacao Sportiva Arapiraquense"" | ""numberOfMembers"" | ""17000"")
(""Agremiacao Sportiva Arapiraquense"" | ""playsIn"" | ""Campeonato Brasileiro Serie C"")"
968,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Founded on January 1, 2000 GMA New Media offers products such as mobile applications with the key person being Felipe Gozon.","(GMA_New_Media | foundingDate | 2000-01-01)
(GMA_New_Media | product | Mobile_Applications)
(GMA_New_Media | keyPerson | Felipe_Gozon)","(""GMA New Media"" | ""foundingDate"" | ""January 1, 2000"")
(""GMA New Media"" | ""offersProduct"" | ""mobile applications"")
(""GMA New Media"" | ""keyPerson"" | ""Felipe Gozon"")"
969,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","In the United States of America where Abraham A. Ribicoff was born, African Americans are an ethnic group. Abraham is an American citizen and is married to Ruth Ribicoff.","(Abraham_A._Ribicoff | spouse | ""Ruth Ribicoff"")
(Abraham_A._Ribicoff | birthPlace | United_States)
(United_States | ethnicGroup | African_Americans)
(Abraham_A._Ribicoff | nationality | United_States)","(Abraham A. Ribicoff | place of birth | United States of America)
(African Americans | type | ethnic group)
(African Americans | location | United States of America)
(Abraham A. Ribicoff | citizenship | American)
(Abraham A. Ribicoff | spouse | Ruth Ribicoff)"
970,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nurhan Atasoy a Turkish national who was born and is currently residing in Turkey.,"(Nurhan_Atasoy | citizenship | Turkey)
(Nurhan_Atasoy | birthPlace | Turkey)
(Nurhan_Atasoy | nationality | Turkish_people)
(Nurhan_Atasoy | residence | Turkey)","(""Nurhan Atasoy"" | ""type"" | ""Person"")
(""Nurhan Atasoy"" | ""nationality"" | ""Turkey"")
(""Nurhan Atasoy"" | ""birthPlace"" | ""Turkey"")
(""Nurhan Atasoy"" | ""residence"" | ""Turkey"")"
971,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Wharton Tiers is the producer of the album Turn Me On.,(Turn_Me_On_(album) | producer | Wharton_Tiers),"(Wharton Tiers | type | Person)
(Wharton Tiers | occupation | Producer)
(Turn Me On | type | Album)
(Wharton Tiers | producer_of | Turn Me On)"
972,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Expect a Miracle is an instrumental music album followed by the album Afterplay. It was produced by Brian Kelly, and was preceded by his album Pools of Light.","(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | precededBy | Pools_of_Light_(Brian_Kelly_album))
(Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Instrumental_music)","(""Expect a Miracle"" | type | ""instrumental music album"")
(""Expect a Miracle"" | ""followedBy"" | ""Afterplay"")
(""Expect a Miracle"" | ""producer"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""precededBy"" | ""Pools of Light"")
(""Afterplay"" | type | ""album"")
(""Afterplay"" | ""precededBy"" | ""Expect a Miracle"")
(""Brian Kelly"" | ""produced"" | ""Expect a Miracle"")
(""Pools of Light"" | type | ""album"")
(""Pools of Light"" | ""followedBy"" | ""Expect a Miracle"")"
973,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala is a city and has a population density of 1604.0. The UTC offset of Ciudad Ayala is -6.,"(Ciudad_Ayala | type | City)
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | utcOffset | −6)","(""Ciudad Ayala"" | ""type"" | ""City""),
(""Ciudad Ayala"" | ""hasPopulationDensity"" | 1604.0),
(""Ciudad Ayala"" | ""hasUTCOffset"" | -6)"
974,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy, who is Turkish, currently lives in Turkey.","(Nurhan_Atasoy | nationality | Turkish_people)
(Nurhan_Atasoy | residence | Turkey)","(""Nurhan Atasoy"" | ""nationality"" | ""Turkish""),
(""Nurhan Atasoy"" | ""residence"" | ""Turkey"")"
975,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lionsgate, a U.S. company, is the distributor of Super Capers. The English-language film features Michael Rooker as one of the characters.","(Super_Capers | distributor | Lionsgate)
(Lionsgate | location | United_States)
(Super_Capers | starring | Michael_Rooker)
(Super_Capers | language | English_language)","(Lionsgate | type | U.S. Company)
(Lionsgate | distributorOf | Super Capers)
(Super Capers | hasDistributor | Lionsgate)
(Super Capers | language | English)
(Michael Rooker | type | character)
(Michael Rooker | appearsIn | Super Capers)
(Super Capers | hasCharacter | Michael Rooker)"
976,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",It’s Great to be Young is a 1956 movie starring Cecil Parker and Cyril Frankel. John Mills has children by the name of Hayley and Juliet.,"(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(John_Mills | child | Juliet_Mills)
(John_Mills | child | Hayley_Mills)
(""It's_Great_to_Be_Young_(1956_film) | starring | Cecil_Parker)
(""It's_Great_to_Be_Young_(1956_film) | director | Cyril_Frankel"")","(""It's Great to be Young"" | type | ""Movie"")
(""It's Great to be Young"" | date | 1956)
(""It's Great to be Young"" | starring | ""Cecil Parker"")
(""It's Great to be Young"" | starring | ""Cyril Frankel"")
(""John Mills"" | hasChild | ""Hayley"")
(""John Mills"" | hasChild | ""Juliet"")"
977,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Cumberland county, Pennsylvania is north of Adams County, Pennsylvania which is the location of the 11th Mississippi Infantry Monument.","(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsNorth | Cumberland_County,_Pennsylvania)","(""Cumberland county, Pennsylvania"" | ""location"" | ""north of Adams County, Pennsylvania"")
(""Adams County, Pennsylvania"" | ""location"" | ""Cumberland county, Pennsylvania"") 
(""Adams County, Pennsylvania"" | ""location"" | ""11th Mississippi Infantry Monument"") 
(""11th Mississippi Infantry Monument"" | ""location"" | ""Adams County, Pennsylvania"")"
978,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aaron Turner is a singer in the black metal genre who performed with the band Twilight.,"(Aaron_Turner | instrument | Singing)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))
(Aaron_Turner | genre | Black_metal)","(""Aaron Turner"" | ""type"" | ""Person""),
(""Aaron Turner"" | ""profession"" | ""Singer""),
(""Aaron Turner"" | ""genre"" | ""Black metal""),
(""Aaron Turner"" | ""performsWith"" | ""Twilight""),
(""Twilight"" | ""type"" | ""Band""),
(""Black metal"" | ""type"" | ""Music Genre"")"
979,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Hypermarcas earns yearly 1800000000.,(Hypermarcas | revenue | 1800000000),"(""Hypermarcas"" | ""earns"" | ""1800000000"")"
980,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The orbital period of 1147 Stavropolis is 1249.6 with absolute magnitude of 11.5 .,"(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | absoluteMagnitude | 11.5)","(1147 Stavropolis | orbital period | 1249.6)
(1147 Stavropolis | absolute magnitude | 11.5)"
981,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Mermaid is a pop rock song by the band Train and was released under the record label Columbia Records with a runtime of 3 min and 16 seconds. Train's hit Mermaid was put out by the Sony Music Entertainment record label and this'll be my year by Train was followed by Mermaid.,"(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)
(""Mermaid_(Train_song) | precededBy | This'll_Be_My_Year"")","(""Mermaid"" | ""type"" | ""pop rock song"")
(""Mermaid"" | ""by"" | ""Train"")
(""Mermaid"" | ""released under"" | ""Columbia Records"")
(""Mermaid"" | ""runtime"" | ""3 min and 16 seconds"")
(""Mermaid"" | ""put out by"" | ""Sony Music Entertainment record label"")
(""Train"" | ""has song"" | ""Mermaid"")
(""Columbia Records"" | ""has song"" | ""Mermaid"")
(""Sony Music Entertainment record label"" | ""has song"" | ""Mermaid"")
(""this'll be my year"" | ""by"" | ""Train"")
(""this'll be my year"" | ""followed by"" | ""Mermaid"")
(""Train"" | ""has song"" | ""this'll be my year"")
(""Mermaid"" | ""follows"" | ""this'll be my year"")"
982,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","John Mills, born on New Years Day in 1908, plays the lead role in It's Great to Be Young (1956).","(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(John_Mills | birthDate | 1908-01-01)","(John Mills | birthDate | ""1908-01-01"")
(John Mills | birthPlace | ""New Year's Day"")
(John Mills | occupation | ""actor"")
(It's Great to Be Young | releaseDate | ""1956"")
(John Mills | actedIn | It's Great to Be Young)
(It's Great to Be Young | leadActor | John Mills)"
983,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva was born in Leningrad which was then part of the USSR. She later attended Leningrad State University and she died on the 9th of December, 1991, in Saint Petersburg.","(Olga_Bondareva | birthPlace | Leningrad,_USSR)
(Olga_Bondareva | deathPlace | Saint_Petersburg)
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | deathDate | 1991-12-09)","(Olga Bondareva | was born in | Leningrad)
(Olga Bondareva | was born in | USSR)
(Leningrad | was part of | USSR)
(Olga Bondareva | attended | Leningrad State University)
(Olga Bondareva | died on | 9th of December, 1991)
(Olga Bondareva | died in | Saint Petersburg)"
984,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Michael Rooker and Tome Sizemore both starred in Super Capers, which is 98 minutes in duration.","(Super_Capers | starring | Michael_Rooker)
(Super_Capers | starring | Tom_Sizemore)
(Super_Capers | runtime | 98.0)","(Michael Rooker | starredIn | Super Capers)
(Tome Sizemore | starredIn | Super Capers)
(Super Capers | duration | ""98 minutes"")"
985,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","British national Lady Anne Monson was born on January 1, 1726, in Darlington in the Kingdom of England. She continued to live in her home country and married George Monson. She died on February 18th, 1776.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | deathDate | 1776-02-18)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | nationality | Kingdom_of_England)
(Lady_Anne_Monson | spouse | George_Monson)","(""Lady Anne Monson"" | ""birthDate"" | ""1726-01-01"")
(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington, Kingdom of England"")
(""Lady Anne Monson"" | ""nationality"" | ""British"")
(""Lady Anne Monson"" | ""spouse"" | ""George Monson"")
(""Lady Anne Monson"" | ""deathDate"" | ""1776-02-18"")"
986,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Rageous coupe, assembled in Detroit, Michigan, was last produced in 1997.","(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | assembly | Detroit)
(Pontiac_Rageous | productionEndYear | 1997)
(Pontiac_Rageous | bodyStyle | Coupe)","(""Pontiac Rageous"" | type | ""coupe"")
(""Pontiac Rageous"" | location of assembly | ""Detroit, Michigan"")
(""Pontiac Rageous"" | last production year | ""1997"")"
987,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was born on November 18,1923 in New Hampshire and died in senator Dianne Feinstein's state, California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)
(California | senators | Dianne_Feinstein)","(Alan Shepard | birthDate | ""November 18,1923"")
(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | deathPlace | California)
(California | isPartOf | United States)
(Dianne Feinstein | roleIn | senator)
(Dianne Feinstein | territory | California)"
988,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was an American who was born on November 18, 1923 in New Hampshire, which is home to the purple finch. He graduated from NWC in 1957 with an M.A and died in California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(New_Hampshire | bird | Purple_finch)
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | almaMater | ""NWC, M.A. 1957"")","(Alan Shepard | type | ""American"")
(Alan Shepard | birthDate | ""November 18, 1923"")
(Alan Shepard | birthPlace | ""New Hampshire"")
(Alan Shepard | deathPlace | ""California"")
(Alan Shepard | graduatedFrom | ""NWC"")
(Alan Shepard | graduationYear | ""1957"")
(Alan Shepard | degree | ""M.A"")
(New Hampshire | isHomeTo | ""purple finch"")"
989,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Train's song ""Mermaid"", written by Amund Bjorklund but produced by the Stargate team, is an example of the reggae genre.","(Mermaid_(Train_song) | genre | Reggae)
(Mermaid_(Train_song) | writer | Amund_Bjørklund)
(Mermaid_(Train_song) | writer | Stargate_(production_team))","(""Mermaid"" | author | ""Amund Bjorklund"")
(""Mermaid"" | producer | ""Stargate team"")
(""Mermaid"" | singer | ""Train"")
(""Mermaid"" | genre | ""reggae"")"
990,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Turkish Nurhan Atasoy was born and raised in the country of Turkey, home of the city of Istanbul and the lira currency.","(Turkey | largestCity | Istanbul)
(Nurhan_Atasoy | nationality | Turkish_people)
(Turkey | currency | Turkish_lira)
(Nurhan_Atasoy | birthPlace | Turkey)","(""Nurhan Atasoy"" | ""birthPlace"" | ""Turkey"")
(""Nurhan Atasoy"" | ""nationality"" | ""Turkish"")
(""Istanbul"" | ""location"" | ""Turkey"")
(""Turkey"" | ""currency"" | ""lira"")"
991,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","A compilation album called ""Expect a Miracle"" has a runtime of 54.56 minutes.","(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | type | Compilation_Album)","(""Expect a Miracle"" | type | ""Compilation album"")
(""Expect a Miracle"" | runtime | 54.56)"
992,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy, located in the city of Dijon, has 16,800 undergraduate students and 1299 doctoral students.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | numberOfDoctoralStudents | 1299)
(University_of_Burgundy | campus | Dijon)
(University_of_Burgundy | city | Dijon)","(University of Burgundy | location | Dijon)
(University of Burgundy | numberOfStudents | 16800)
(University of Burgundy | numberOfDoctoralStudents | 1299)"
993,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","One of the leaders of Gdynia, Poland is the Vice President.","(Gdynia,_Poland | leaderTitle | ""Vice President"")","(""Gdynia"" | ""leadership"" | ""Vice President""),
(""Vice President"" | ""roleIn"" | ""Gdynia""),
(""Gdynia"" | ""location"" | ""Poland""),
(""Poland"" | ""contains"" | ""Gdynia"")"
994,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 94-minute film It's Great to Be Young (1956) was written by Ted Willis. The film stars Cecil Parker, and its music was composed by Louis Levy.","(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | musicComposer | Louis_Levy)
(""It's_Great_to_Be_Young_(1956_film) | starring | Cecil_Parker)
(""It's_Great_to_Be_Young_(1956_film) | writer | Ted_Willis"")","(""It's Great to Be Young (1956)"" | ""duration"" | ""94 minutes"")
(""It's Great to Be Young (1956)"" | ""writer"" | ""Ted Willis"")
(""It's Great to Be Young (1956)"" | ""star"" | ""Cecil Parker"")
(""It's Great to Be Young (1956)"" | ""musicComposer"" | ""Louis Levy"")"
995,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy located in Dijon with a postal code of 21000 has 2900 staff members that educate 16,800 undergraduate students and 9,400 post graduate students.","(University_of_Burgundy | city | Dijon)
(Dijon | postalCode | 21000)
(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfPostgraduateStudents | 9400)","(""University of Burgundy"" | ""location"" | ""Dijon"")
(""University of Burgundy"" | ""postal code"" | ""21000"")
(""University of Burgundy"" | ""staff members"" | ""2900"")
(""University of Burgundy"" | ""educate: undergraduate students"" | ""16800"")
(""University of Burgundy"" | ""educate: post graduate students"" | ""9400"")"
996,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","English Without Tears is an 89 minute movie that was released on July 7th, 1944. It was directed by Harold French and written by Anatole de Grunwald. Nicholas Brodszky wrote the music score for the film.","(English_Without_Tears | runtime | 89.0)
(English_Without_Tears | musicComposer | Nicholas_Brodszky)
(English_Without_Tears | releaseDate | 1944-07-28)
(English_Without_Tears | director | Harold_French)
(English_Without_Tears | writer | Anatole_de_Grunwald)","(""English Without Tears"" | ""type"" | ""movie""),
(""English Without Tears"" | ""durationInMinutes"" | 89),
(""English Without Tears"" | ""releaseDate"" | ""1944-07-07""), 
(""English Without Tears"" | ""director"" | ""Harold French""),
(""English Without Tears"" | ""screenWriter"" | ""Anatole de Grunwald""),
(""Nicholas Brodszky"" | ""composedMusicFor"" | ""English Without Tears"")"
997,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","English without tears was released on 1944-07-28, directed by Harold French and edited by Alan Jaggs.","(English_Without_Tears | releaseDate | 1944-07-28)
(English_Without_Tears | director | Harold_French)
(English_Without_Tears | editing | Alan_Jaggs)","(""English without tears"" | ""releaseDate"" | ""1944-07-28"")
(""English without tears"" | ""director"" | ""Harold French"")
(""English without tears"" | ""editor"" | ""Alan Jaggs"")"
998,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy, a Turkish national residing in Istanbul was born on 1934-01-01 in Turkey.","(Nurhan_Atasoy | birthDate | 1934-01-01)
(Nurhan_Atasoy | residence | Istanbul)
(Nurhan_Atasoy | citizenship | Turkey)
(Nurhan_Atasoy | birthPlace | Turkey)","(Nurhan Atasoy | type | Person)
(Nurhan Atasoy | nationality | Turkey)
(Nurhan Atasoy | residence | Istanbul)
(Nurhan Atasoy | birthDate | 1934-01-01)
(Nurhan Atasoy | birthPlace | Turkey)"
999,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The pop rock band Train released a song called Mermaid on the 12th Dec 2012, which preceded the song This'll be my year. The song, Mermaid, was written by Espen Lind and has a total run time of three minutes and sixteen seconds.","(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | releaseDate | 2012-12-27)
(""Mermaid_(Train_song) | precededBy | This'll_Be_My_Year)
(Mermaid_(Train_song) | writer | Espen_Lind)","(""Train"" | ""type"" | ""Pop rock band"")
(""Train"" | ""release"" | ""Mermaid"")
(""Mermaid"" | ""releaseDate"" | ""12th Dec 2012"")
(""Train"" | ""precede"" | ""This'll be my year"")
(""Mermaid"" | ""precededBy"" | ""This'll be my year"")
(""Mermaid"" | ""writtenBy"" | ""Espen Lind"")
(""Mermaid"" | ""totalRuntime"" | ""Three minutes and sixteen seconds"")"
1000,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Year Of No Light album Nord which was preceded by the album Live at Roadburn 2008 was released on 06-09-2006 and produced by Year of No Light themselves.,"(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)","(""Nord"" | ""type"" | ""Album"")
(""Nord"" | ""creator"" | ""Year Of No Light"")
(""Nord"" | ""dateOfRelease"" | ""06-09-2006"")
(""Nord"" | ""producer"" | ""Year Of No Light"")
(""Nord"" | ""precededBy"" | ""Live at Roadburn 2008"")
(""Live at Roadburn 2008"" | ""type"" | ""Album"")
(""Live at Roadburn 2008"" | ""succeedBy"" | ""Nord"")
(""Year Of No Light"" | ""produced"" | ""Nord"")
(""Year Of No Light"" | ""create"" | ""Nord"")"
1001,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Istanbul has a metropolitan area of 5343000000.0.,(Istanbul | areaMetro | 5343000000.0),(Istanbul | area | 5343000000.0)
1002,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was an American who was born on Nov 18, 1923 in New Hampshire, was selected by NASA in 1959 and died in California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | selectedByNasa | 1959)
(Alan_Shepard | birthPlace | New_Hampshire)","(Alan Shepard | type | American)
(Alan Shepard | birthDate | Nov 18, 1923)
(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | selection | NASA)
(Alan Shepard | selectionDate | 1959)
(Alan Shepard | deathPlace | California)"
1003,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Darinka Dentcheva resides in the United States.,(Darinka_Dentcheva | residence | United_States),"(""Darinka Dentcheva"" | ""residesIn"" | ""United States"")"
1004,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1147 Stavropolis epoch is 31 July 2016. It has an apoapsis of 418476000000.0., a rotation period of 20378.5 as well as a periapsis of 260855000000.","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | rotationPeriod | 20378.5)
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))","(""1147 Stavropolis"" | ""epoch"" | ""31 July 2016""),
(""1147 Stavropolis"" | ""hasApoapsis"" | 418476000000.0),
(""1147 Stavropolis"" | ""hasRotationPeriod"" | 20378.5),
(""1147 Stavropolis"" | ""hasPeriapsis"" | 260855000000.0)"
1005,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The city Ciudad Ayala is in the Morelos part of Mexico. It is 1147 m above sea level in UTC offset -6. The leader is called the Governator.,"(Ciudad_Ayala | type | City)
(Ciudad_Ayala | utcOffset | −6)
(Ciudad_Ayala | leaderTitle | Governator)
(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | country | Mexico)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)","(Ciudad Ayala | location | Morelos)
(Ciudad Ayala | country | Mexico)
(Ciudad Ayala | elevation | 1147 m)
(Ciudad Ayala | UTC offset | -6)
(Ciudad Ayala | leader title | Governator)"
1006,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Al Asad Airbase in Iraq is operated by the United States Air Force.,"(Al_Asad_Airbase | operatingOrganisation | United_States_Air_Force)
(Al_Asad_Airbase | location | Iraq)","(""Al Asad Airbase"" | ""location"" | ""Iraq""),
(""Al Asad Airbase"" | ""isOperatedBy"" | ""United States Air Force"")"
1007,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Darinka Dentcheva's current residence is in the United States.,(Darinka_Dentcheva | residence | United_States),(Darinka Dentcheva | residence | United States)
1008,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Super Capers is a film starring Danielle Harris.,(Super_Capers | starring | Danielle_Harris),"(""Super Capers"" | ""type"" | ""film""),
(""Super Capers"" | ""starring"" | ""Danielle Harris""),
(""Danielle Harris"" | ""is a star in"" | ""Super Capers"")"
1009,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bionico is served as a dessert course in Mexico and it contains raisins.,"(Bionico | course | Dessert)
(Bionico | ingredient | Raisin)
(Bionico | country | Mexico)","(""Bionico"" | ""isServedIn"" | ""Mexico"")
(""Bionico"" | ""courseType"" | ""dessert"")
(""Bionico"" | ""contains"" | ""raisins"")"
1010,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva was born in Leningrad, USSR. She died in Saint Petersburg now in Russia where the leader is called Governor.","(Olga_Bondareva | birthPlace | Leningrad,_USSR)
(Saint_Petersburg | country | Russia)
(Olga_Bondareva | deathPlace | Saint_Petersburg)
(Saint_Petersburg | leaderTitle | Governor)","(Olga Bondareva | was born in | Leningrad, USSR)
(Olga Bondareva | died in | Saint Petersburg)
(Saint Petersburg | is in | Russia)
(Saint Petersburg | leader title | Governor)"
1011,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Sony Music Entertainment is owned by the Sony Corporation.,(Sony_Music_Entertainment | owner | Sony_Corporation),(Sony Music Entertainment | owned by | Sony Corporation)
1012,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Agremiação Sportiva Arapiraquense is a team of 17000 members managed by Vica that play in the Brazilian based Campeonato Brasileiro Série C league.,"(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | country | Brazil)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | manager | Vica)","(Agremiação Sportiva Arapiraquense | type | team)
(Agremiação Sportiva Arapiraquense | memberCount | literal:17000)
(Agremiação Sportiva Arapiraquense | managedBy | Vica)
(Agremiação Sportiva Arapiraquense | playIn | Campeonato Brasileiro Série C)
(Campeonato Brasileiro Série C | basedIn | literal:Brazil)
(Vica | manages | Agremiação Sportiva Arapiraquense)"
1013,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The College of William and Mary is the owner of the Alan B. Miller Hall at 101 Ukrop Way, which was designed by architect Robert A.M. Stern. The building was started on 30/03/2007 and is currently tenanted by The Mason School of Business.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""The College of William and Mary"" | ownership | ""Alan B. Miller Hall"")
(""Alan B. Miller Hall"" | location | ""101 Ukrop Way"")
(""Alan B. Miller Hall"" | architect | ""Robert A.M. Stern"")
(""Alan B. Miller Hall"" | constructionStartDate | 30/03/2007)
(""Alan B. Miller Hall"" | tenant | ""The Mason School of Business"")"
1014,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Espionage is the production team behind Mermaid.,(Mermaid_(Train_song) | producer | Espionage_(production_team)),"(""Espionage"" | ""typeOf"" | ""production team"")
(""Espionage"" | ""behind"" | ""Mermaid"")"
1015,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The city of Ciudad Ayala is led by the City Manager and runs under the council-manager government type. Its UTC offset is -6 and it has a population density of 1604.,"(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | governmentType | Council-manager_government)
(Ciudad_Ayala | utcOffset | −6)","(Ciudad Ayala | type | City)
(Ciudad Ayala | leadership | City Manager)
(Ciudad Ayala | governmentType | council-manager government)
(Ciudad Ayala | utcOffset | -6)
(Ciudad Ayala | populationDensity | 1604)"
1016,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","McVeagh of the South Seas is a movie directed by Gregory Allen, produced by the Progressive Motion Picture Company, with Alliance Films Corporation as the distributor.","(McVeagh_of_the_South_Seas | director | Gregory_Allen)
(McVeagh_of_the_South_Seas | producer | The_Progressive_Motion_Picture_Company)
(McVeagh_of_the_South_Seas | distributor | Alliance_Films_Corporation)","(""McVeagh of the South Seas"" | ""type"" | ""movie"")
(""McVeagh of the South Seas"" | ""director"" | ""Gregory Allen"")
(""McVeagh of the South Seas"" | ""producer"" | ""Progressive Motion Picture Company"")
(""McVeagh of the South Seas"" | ""distributor"" | ""Alliance Films Corporation"")"
1017,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala is a city ruled by a council-manager government and by Juan Nolasco. The city is 1147m above sea level.,"(Ciudad_Ayala | type | City)
(Ciudad_Ayala | governmentType | Council-manager_government)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)
(Ciudad_Ayala | leader | Juan_Nolasco)","(""Ciudad Ayala"" | ""type"" | ""City"")
(""Ciudad Ayala"" | ""governmentType"" | ""Council-manager government"")
(""Ciudad Ayala"" | ""leader"" | ""Juan Nolasco"")
(""Ciudad Ayala"" | ""elevation"" | ""1147m"")"
1018,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",With a population density of 1604 the city of Ciudad Ayala is a part of Morelos. Its leader is called the governator and it is in the PDT time zone.,"(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | leaderTitle | Governator)
(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | timeZone | Pacific_Daylight_Time)","(Ciudad Ayala | populationDensity | 1604)
(Ciudad Ayala | partOf | Morelos)
(Ciudad Ayala | leader | Governator)
(Ciudad Ayala | timeZone | PDT)"
1019,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Mermaid is a pop rock song by the musical band Train.,"(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))","(""Mermaid"" | ""type"" | ""pop rock song"")
(""Mermaid"" | ""performer"" | ""Train"")"
1020,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument, a contributing property erected in 2000 located in Adams County, Pennsylvania, United States is in the municipality of Gettysburg. Pennsylvania's Cumberland County and Franklin County are to the north and west of the Adams County respectively.","(Adams_County,_Pennsylvania | hasToItsWest | Franklin_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | municipality | Gettysburg,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)
(Adams_County,_Pennsylvania | hasToItsNorth | Cumberland_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | country | ""United States"")","(""11th Mississippi Infantry Monument"" | ""type"" | ""contributing property"")
(""11th Mississippi Infantry Monument"" | ""year of construction"" | 2000)
(""11th Mississippi Infantry Monument"" | ""location"" | ""Adams County"")
(""Adams County"" | ""within country"" | ""United States"")
(""11th Mississippi Infantry Monument"" | ""locatedInArea"" | ""Gettysburg"")
(""Gettysburg"" | ""is within"" | ""Pennsylvania"")
(""Cumberland County"" | ""positioned at"" | ""north of Adams County"")
(""Franklin County"" | ""positioned at"" | ""west of Adams County"")"
1021,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The asteroid 1147 Stavropolis, discovered by Grigory Neujmin, has an orbital period of 1249.6 days.","(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | discoverer | Grigory_Neujmin)","(1147 Stavropolis | discoveredBy | Grigory Neujmin)
(1147 Stavropolis | hasOrbitalPeriod | 1249.6 days)"
1022,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Andrzej Piotr Ruszczyński has been influenced by Darinka Dentcheva.,(Andrzej_Piotr_Ruszczyński | influencedBy | Darinka_Dentcheva),(Andrzej Piotr Ruszczyński | influencedBy | Darinka Dentcheva)
1023,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Year of Light album Nord was released on 09-06-2006 in the sludge metal genre.,"(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)","(""Nord"" | ""type"" | ""album"")
(""Nord"" | ""title"" | ""Year of Light"")
(""Nord"" | ""release date"" | ""09-06-2006"")
(""Nord"" | ""genre"" | ""sludge metal"")"
1024,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Expect a Miracle produced by Brian Kelly belongs to instrumental music and easy listening genre.,"(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | genre | Instrumental_music)
(Expect_a_Miracle | genre | Easy_listening)","(""Expect a Miracle"" | produced by | ""Brian Kelly"")
(""Expect a Miracle"" | belongs to genre | ""instrumental music"")
(""Expect a Miracle"" | belongs to genre | ""easy listening"")"
1025,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Michael Rooker, who starred in the film Super Capers, was born on April 6, 1955.","(Super_Capers | starring | Michael_Rooker)
(Michael_Rooker | birthDate | 1955-04-06)","(Michael Rooker | starred in | Super Capers)
(Michael Rooker | birthDate | ""April 6, 1955"")"
1026,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Piotr Hallmann was born in Gdynia, Poland.","(Piotr_Hallmann | birthPlace | Gdynia,_Poland)","(Piotr Hallmann | birthPlace | Gdynia)
(Piotr Hallmann | birthPlace | Poland)"
1027,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Morelos is a state of Mexico.,(Morelos | type | States_of_Mexico),"(Morelos | type | state)
(Morelos | isPartOf | Mexico)"
1028,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology campus is located in Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090 and is affiliated to Visvesvaraya Technological University.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)","(Acharya Institute of Technology | location | Soldevanahalli)
(Acharya Institute of Technology | address | Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090)
(Acharya Institute of Technology | affiliation | Visvesvaraya Technological University)"
1029,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","English Without Tears is an 89 minute movie directed by Harold French that was released on July 28th, 1944. Alan Jaggs was an editor while Bernard Knowles was the cinematographer. Nicholas Brodszky wrote the music score for the film.","(English_Without_Tears | runtime | 89.0)
(English_Without_Tears | musicComposer | Nicholas_Brodszky)
(English_Without_Tears | releaseDate | 1944-07-28)
(English_Without_Tears | director | Harold_French)
(English_Without_Tears | editing | Alan_Jaggs)
(English_Without_Tears | cinematography | Bernard_Knowles)","(""English Without Tears"" | ""type"" | ""Movie"")
(""English Without Tears"" | ""duration"" | ""89 minutes"")
(""English Without Tears"" | ""director"" | ""Harold French"")
(""English Without Tears"" | ""releaseDate"" | ""July 28th, 1944"")
(""English Without Tears"" | ""editor"" | ""Alan Jaggs"")
(""English Without Tears"" | ""cinematographer"" | ""Bernard Knowles"")
(""English Without Tears"" | ""musicScore"" | ""Nicholas Brodszky"")
(""Harold French"" | ""directed"" | ""English Without Tears"")
(""Alan Jaggs"" | ""edited"" | ""English Without Tears"")
(""Bernard Knowles"" | ""didCinematographyFor"" | ""English Without Tears"")
(""Nicholas Brodszky"" | ""composedScoreFor"" | ""English Without Tears"")"
1030,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Turkey, which uses the lira as its national currency, was the birthplace of Nurhan Atasoy who is a Turkish citizen. The largest city in Turkey is Istanbul.","(Turkey | largestCity | Istanbul)
(Nurhan_Atasoy | nationality | Turkish_people)
(Turkey | currency | Turkish_lira)
(Nurhan_Atasoy | birthPlace | Turkey)","(""Turkey"" | ""currency"" | ""lira"")
(""Turkey"" | ""birthPlace"" | ""Nurhan Atasoy"")
(""Nurhan Atasoy"" | ""nationality"" | ""Turkish"")
(""Turkey"" | ""hasLargestCity"" | ""Istanbul"")"
1031,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The address of the Alan B. Miller Hall, which began construction on the 30th of March 2007, is 101 Ukrop Way, Williamsburg, Virginia, USA. The Mason School of Business are the current tenants of the building which was designed by Robert A M Stern and is owned by The College of William and Mary.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | location | Williamsburg,_Virginia)
(Mason_School_of_Business | country | United_States)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""Alan B. Miller Hall"" | ""address"" | ""101 Ukrop Way, Williamsburg, Virginia, USA"")
(""Alan B. Miller Hall"" | ""constructionStartDate"" | ""30 March 2007"")
(""Alan B. Miller Hall"" | ""tenant"" | ""Mason School of Business"")
(""Alan B. Miller Hall"" | ""architect"" | ""Robert A M Stern"")
(""Alan B. Miller Hall"" | ""owner"" | ""The College of William and Mary"")"
1032,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Hypermarcas, a company that sells cosmetics, is located in Sao Paulo, Brazil.","(Hypermarcas | location | Brazil)
(Hypermarcas | location | São_Paulo)
(Hypermarcas | product | Cosmetics)","(""Hypermarcas"" | ""type"" | ""Company""),
(""Hypermarcas"" | ""sells"" | ""cosmetics""),
(""Hypermarcas"" | ""location"" | ""Sao Paulo""),
(""Sao Paulo"" | ""isIn"" | ""Brazil"")"
1033,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument is located in Adams County, Pennsylvania, in the municipality of Gettysburg, and is categorised as a contributing property. The monument was established in 2000. Pennsylvania's Cumberland County is to the north of the Adams County, but Carroll County Maryland is southeast of Adams County Pennsylvania, while Frederick County Maryland is southwest of Adams County Pennsylvania.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSouthwest | Frederick_County,_Maryland)
(11th_Mississippi_Infantry_Monument | municipality | Gettysburg,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)
(Adams_County,_Pennsylvania | hasToItsNorth | Cumberland_County,_Pennsylvania)","(11th Mississippi Infantry Monument | location | Adams County)
(11th Mississippi Infantry Monument | location | Pennsylvania)
(11th Mississippi Infantry Monument | location | Gettysburg)
(11th Mississippi Infantry Monument | category | contributing property)
(11th Mississippi Infantry Monument | establishmentDate | 2000)

(Adams County | partOf | Pennsylvania)
(Gettysburg | partOf | Adams County)

(Cumberland County | location | Pennsylvania)
(Cumberland County | relativeLocation | north of Adams County)

(Carroll County | location | Maryland)
(Carroll County | relativeLocation | southeast of Adams County)

(Frederick County | location | Maryland)
(Frederick County | relativeLocation | southwest of Adams County)"
1034,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology which is affiliated to Visvesvaraya Technological University was given the Technical Campus status by the All India Council for Technical Education, which is located in Mumbai. The director of the institute is Dr. G.P. Prabhukumar and employs about 500 academic staff and offers Tennis as a sport. The address of the campus is Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(All_India_Council_for_Technical_Education | location | Mumbai)
(Acharya_Institute_of_Technology | director | ""Dr. G. P. Prabhukumar"")
(Acharya_Institute_of_Technology | academicStaffSize | ""~500"")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | sportsOffered | Tennis)
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)","(Acharya Institute of Technology | affiliation | Visvesvaraya Technological University)
(Acharya Institute of Technology | status | ""Technical Campus"")
(Acharya Institute of Technology | given status by | All India Council for Technical Education)
(All India Council for Technical Education | location | ""Mumbai"")
(Acharya Institute of Technology | director | Dr. G.P. Prabhukumar)
(Acharya Institute of Technology | employs | 500 academic staff)
(Acharya Institute of Technology | offers | ""Tennis"")
(Acharya Institute of Technology | address | ""Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090"")"
1035,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","A former NWC graduate (MA, 1957), Alan Shepard was born in New Hampshire on Nov 18, 1923.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | almaMater | ""NWC, M.A. 1957"")","(Alan Shepard | type | NWC graduate)
(Alan Shepard | year of graduation | 1957)
(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | birthDate | Nov 18, 1923)"
1036,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Rageous is a coupe that is manufactured by Pontiac, which brand became extinct on October 31, 2010.","(Pontiac_Rageous | bodyStyle | Coupe)
(Pontiac_Rageous | manufacturer | Pontiac)
(Pontiac | extinctionDate | 2010-10-31)","(""Pontiac Rageous"" | ""type"" | ""coupe"")
(""Pontiac Rageous"" | ""isManufacturedBy"" | ""Pontiac"")
(""Pontiac"" | ""brandBecameExtinctOn"" | ""October 31, 2010"")"
1037,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","AmeriGas, located in King of Prussia, Pennsylvania, serves the United States and is classified as being a part of the energy industry.","(AmeriGas | regionServed | United_States)
(AmeriGas | city | King_of_Prussia,_Pennsylvania)
(AmeriGas | industry | Energy_industry)","(AmeriGas | location | King of Prussia, Pennsylvania)
(AmeriGas | serves | United States)
(AmeriGas | industry | energy)"
1038,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The University of Burgundy in Dijon has 16800 undergraduate students.,"(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | campus | Dijon)","(University of Burgundy | location | Dijon)
(University of Burgundy | numberOfStudents | literal:16800)"
1039,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Tom Sizemore’s occupation is being an actor.,(Tom_Sizemore | occupation | Actor),"(Tom Sizemore | occupation | ""actor"")"
1040,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The postal codes of Karlsruhe range from 76131 to 76229.,(Karlsruhe | postalCode | 76131–76229),"(""Karlsruhe"" | ""hasPostalCode"" | ""76131"")
(""Karlsruhe"" | ""hasPostalCode"" | ""76229"")"
1041,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The creator of Bananaman, broadcast by the BBC, is Steve Bright. One of its stars is Graeme Garden.","(Bananaman | creator | Steve_Bright)
(Bananaman | broadcastedBy | BBC)
(Bananaman | starring | Graeme_Garden)","(""Bananaman"" | ""creator"" | ""Steve Bright""),
(""Bananaman"" | ""broadcastedBy"" | ""BBC""),
(""Bananaman"" | ""stars"" | ""Graeme Garden""),
(""Steve Bright"" | ""created"" | ""Bananaman""),
(""BBC"" | ""broadcasts"" | ""Bananaman""),
(""Graeme Garden"" | ""starsIn"" | ""Bananaman"")"
1042,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, who was a professional in the field of Economics, was a student at Leningrad State University.","(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | professionalField | Economics)","(Olga Bondareva | type | Person)
(Olga Bondareva | profession | Economics)
(Olga Bondareva | was a student at | Leningrad State University)"
1043,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Acharya Institute of Technology is directed by Dr. G. P. Prabhukumar, was given the 'Technical Campus' status by All India Council for Technical Education and is affiliated with the Visvesvaraya Technological University. All India Council for Technical Education is located in Mumbai and the campus of the Acharya Institute of Technology is located at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(All_India_Council_for_Technical_Education | location | Mumbai)
(Acharya_Institute_of_Technology | director | ""Dr. G. P. Prabhukumar"")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)","(Acharya Institute of Technology | directed by | Dr. G. P. Prabhukumar)
(Acharya Institute of Technology | status | 'Technical Campus')
(Acharya Institute of Technology | given status by | All India Council for Technical Education)
(Acharya Institute of Technology | affiliated with | Visvesvaraya Technological University)
(All India Council for Technical Education | located in | Mumbai)
(Acharya Institute of Technology | campus located at | Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090)"
1044,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, born ""Olga Nikolaevna Bondareva"", graduated from Leningrad State University and currently works in the fields of Economics and Mathematics.","(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | professionalField | Economics)
(Olga_Bondareva | professionalField | Mathematics)","(""Olga Bondareva"" | ""birthName"" | ""Olga Nikolaevna Bondareva"")
(""Olga Bondareva"" | ""almaMater"" | ""Leningrad State University"")
(""Olga Bondareva"" | ""profession"" | ""Economics"")
(""Olga Bondareva"" | ""profession"" | ""Mathematics"")"
1045,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala, a city with density of 1604.0 in the time zone of Pacific Daylight Time is ruled by governator. This city is a part of Morelos.","(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | leaderTitle | Governator)
(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | timeZone | Pacific_Daylight_Time)","(""Ciudad Ayala"" | ""type"" | ""City"")
(""Ciudad Ayala"" | ""populationDensity"" | 1604.0)
(""Ciudad Ayala"" | ""timeZone"" | ""Pacific Daylight Time"")
(""Ciudad Ayala"" | ""leaderTitle"" | ""Governator"")
(""Ciudad Ayala"" | ""isPartOf"" | ""Morelos"")"
1046,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Grigory Neujmin discovered the asteroid 1147 Stavropolis. It has an orbital period of 1249.6 days with absolute magnitude of 11.5, and the apoapsis is 418476000000.0.","(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | discoverer | Grigory_Neujmin)
(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | absoluteMagnitude | 11.5)","(""Grigory Neujmin"" | ""discovered"" | ""1147 Stavropolis"")
(""1147 Stavropolis"" | ""discoveredBy"" | ""Grigory Neujmin"")
(""1147 Stavropolis"" | ""orbitalPeriod"" | ""1249.6 days"")
(""1147 Stavropolis"" | ""absoluteMagnitude"" | ""11.5"")
(""1147 Stavropolis"" | ""apoapsis"" | ""418476000000.0"")"
1047,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bootleg Series Volume 1: The Quine Tapes was produced by The Velvet Underground in St. Louis Missouri, USA, where the primary spoken language is English. The band formed in 1964.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(United_States | language | English_language)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | United_States)
(The_Velvet_Underground | activeYearsStartYear | 1964-01-01)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | St._Louis,_Missouri)","(""Bootleg Series Volume 1: The Quine Tapes"" | ""producer"" | ""The Velvet Underground"")

(""The Velvet Underground"" | ""formation year"" | ""1964"")

(""Bootleg Series Volume 1: The Quine Tapes"" | ""production location"" | ""St. Louis Missouri, USA"")

(""St. Louis Missouri, USA"" | ""has primary language"" | ""English"")
"
1048,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiacao Sportiva Arapiraquense (nickname: Asa Gigante) plays in the Campeonato Brasileiro Serie C league, based in Brazil.","(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | nickname | ""Asa Gigante \'\'"")
(Campeonato_Brasileiro_Série_C | country | Brazil)","(""Agremiacao Sportiva Arapiraquense"" | ""rdf:type"" | ""SoccerTeam"")
(""Agremiacao Sportiva Arapiraquense"" | ""nickname"" | ""Asa Gigante"")
(""Agremiacao Sportiva Arapiraquense"" | ""playsIn"" | ""Campeonato Brasileiro Serie C"")
(""Campeonato Brasileiro Serie C"" | ""rdf:type"" | ""SoccerLeague"")
(""Campeonato Brasileiro Serie C"" | ""basedIn"" | ""Brazil"")
(""Agremiacao Sportiva Arapiraquense"" | ""basedIn"" | ""Brazil"")"
1049,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","J.R.R. Tolkien, who was born on January 3, 1892, wrote The Fellowship of the Ring.","(The_Fellowship_of_the_Ring | author | J._R._R._Tolkien)
(J._R._R._Tolkien | birthDate | 1892-01-03)","(""J.R.R. Tolkien"" | ""birthDate"" | ""1892-01-03"")
(""J.R.R. Tolkien"" | ""wrote"" | ""The Fellowship of the Ring"")"
1050,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",English Without Tears is an 89 minute long film. It was written by Anatole de Grunwald and Terence Rattigan. Cinematographer is Bernard Knowles and Nicholas Brodszky composed the music in the film.,"(English_Without_Tears | musicComposer | Nicholas_Brodszky)
(English_Without_Tears | producer | Anatole_de_Grunwald)
(English_Without_Tears | writer | Anatole_de_Grunwald)
(English_Without_Tears | cinematography | Bernard_Knowles)
(English_Without_Tears | writer | Terence_Rattigan)
(English_Without_Tears | runtime | 89.0)","(""English Without Tears"" | type | ""Film"")
(""English Without Tears"" | duration | ""89 minutes"")
(""English Without Tears"" | writtenBy | ""Anatole de Grunwald"")
(""English Without Tears"" | writtenBy | ""Terence Rattigan"")
(""English Without Tears"" | cinematographer | ""Bernard Knowles"")
(""English Without Tears"" | musicComposer | ""Nicholas Brodszky"")"
1051,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Estádio Municipal Coaracy da Mata Fonseca is the name of the ground of Agremiação Sportiva Arapiraquense located in Arapiraca and their full name as ""Agremiação Sportiva Arapiraquense"". Agremiação Sportiva Arapiraquense play in the Brazil Campeonato Brasileiro Série C league in which Vila Nova Futebol Clube is the champion.","(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Campeonato_Brasileiro_Série_C | country | Brazil)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)
(Agremiação_Sportiva_Arapiraquense | fullName | ""Agremiação Sportiva Arapiraquense"")","(""Estádio Municipal Coaracy da Mata Fonseca"" | name | ""Estádio Municipal Coaracy da Mata Fonseca"")
(""Estádio Municipal Coaracy da Mata Fonseca"" | location | ""Arapiraca"")
(""Agremiação Sportiva Arapiraquense"" | fullName | ""Agremiação Sportiva Arapiraquense"")
(""Agremiação Sportiva Arapiraquense"" | ground | ""Estádio Municipal Coaracy da Mata Fonseca"")
(""Agremiação Sportiva Arapiraquense"" | location | ""Arapiraca"")
(""Agremiação Sportiva Arapiraquense"" | league | ""Brazil Campeonato Brasileiro Série C"")
(""Brazil Campeonato Brasileiro Série C"" | champion | ""Vila Nova Futebol Clube"")"
1052,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Mexicans are people from Mexico where the currency is the peso. Bionico is a dish served for dessert in Mexico which can be made using cottage cheese.,"(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Bionico | country | Mexico)
(Bionico | dishVariation | Cottage_cheese)","(Mexicans | dbo:locationCountry | Mexico)
(Mexico | dbo:currency | peso)
(Bionico | dbo:country | Mexico)
(Bionico | dbo:dishType | dessert)
(Bionico | dbo:ingredient | cottage cheese)"
1053,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Fellowship of the Ring belongs to the Fantasy literary genre. This book was released on July 29, 1954, followed by The Two Towers. George Allen & Unwin published it.","(The_Fellowship_of_the_Ring | publisher | George_Allen_&_Unwin)
(The_Fellowship_of_the_Ring | literaryGenre | Fantasy_(genre))
(The_Fellowship_of_the_Ring | followedBy | The_Two_Towers)
(The_Fellowship_of_the_Ring | releaseDate | 1954-07-29)","(""The Fellowship of the Ring"" | ""belong to"" | ""Fantasy literary genre""),
(""The Fellowship of the Ring"" | ""release date"" | ""July 29, 1954""),
(""The Fellowship of the Ring"" | ""followed by"" | ""The Two Towers""),
(""The Fellowship of the Ring"" | ""publisher"" | ""George Allen & Unwin"")"
1054,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The area of Saint Petersburg totals 1439.0 sq/km.,(Saint_Petersburg | areaTotal | 1439.0),"(""Saint Petersburg"" | ""area"" | ""1439.0 sq/km"")"
1055,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina died on the 14th of June, 1994 in Israel.","(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | deathPlace | Israel)","(Liselotte Grschebina | deathDate | ""14th of June, 1994"")
(Liselotte Grschebina | deathPlace | Israel)"
1056,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aleksandr Prudnikov was born on February 24, 1989, and he currently plays for FC Amkar Perm which is managed by Gadzhi Gadzhiyev. He previously played for FC Terek Grozny which is located in Grozny.","(FC_Terek_Grozny | ground | Grozny)
(Aleksandr_Prudnikov | currentclub | FC_Amkar_Perm)
(FC_Amkar_Perm | manager | Gadzhi_Gadzhiyev)
(Aleksandr_Prudnikov | club | FC_Terek_Grozny)
(Aleksandr_Prudnikov | birthDate | 1989-02-24)","(Aleksandr Prudnikov | birthDate | ""February 24, 1989"")
(Aleksandr Prudnikov | playsFor | FC Amkar Perm)
(FC Amkar Perm | manager | Gadzhi Gadzhiyev)
(Aleksandr Prudnikov | previouslyPlayedFor | FC Terek Grozny)
(FC Terek Grozny | location | Grozny)"
1057,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was born in Karlsruhe, in the German Empire, on May 2nd, 1908 and died in Israel on June 14th, 1994. She was an Israeli national and attended the School of Applied Arts in Stuttgart.","(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | deathPlace | Israel)
(Liselotte_Grschebina | nationality | Israel)
(Liselotte_Grschebina | birthPlace | German_Empire)
(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)","(Liselotte Grschebina | birthPlace | Karlsruhe)
(Liselotte Grschebina | location | German Empire)
(Liselotte Grschebina | birthDate | May 2nd, 1908)
(Liselotte Grschebina | deathPlace | Israel)
(Liselotte Grschebina | deathDate | June 14th, 1994)
(Liselotte Grschebina | nationality | Israeli)
(Liselotte Grschebina | education | School of Applied Arts in Stuttgart)"
1058,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The ALCO RS-3 was built by the American Locomotive Company which was founded in Schenectady, New York. It was produced between May 1950 and August 1956 and has a length of 17068.8 millimetres.","(ALCO_RS-3 | buildDate | ""May 1950 - August 1956"")
(American_Locomotive_Company | foundationPlace | Schenectady,_New_York)
(ALCO_RS-3 | builder | American_Locomotive_Company)
(ALCO_RS-3 | length | 17068.8 (millimetres))","1. (ALCO RS-3 | built by | American Locomotive Company)
2. (ALCO RS-3 | production start date | May 1950)
3. (ALCO RS-3 | production end date | August 1956)
4. (ALCO RS-3 | length | 17068.8 millimetres)
5. (American Locomotive Company | founded in | Schenectady, New York)
6. (American Locomotive Company | producer of | ALCO RS-3)"
1059,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva is a citizen and resident of the United States, whose largest city is New York City. The demonym for someone from the United States is American.","(Darinka_Dentcheva | residence | United_States)
(United_States | largestCity | New_York_City)
(Darinka_Dentcheva | citizenship | United_States)
(United_States | demonym | American)","(Darinka Dentcheva | type | person)
(Darinka Dentcheva | citizenship | United States)
(Darinka Dentcheva | residence | United States)
(United States | largestCity | New York City)
(United States | demonym | American)
(New York City | country | United States)"
1060,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The ALCO RS-3 has a diesel-electric transmission which is 17068.8 millimetres in length and has a V12 engine.,"(ALCO_RS-3 | engine | V12_engine)
(ALCO_RS-3 | powerType | Diesel-electric_transmission)
(ALCO_RS-3 | length | 17068.8 (millimetres))","(ALCO RS-3 | hasTransmission | diesel-electric transmission)
(diesel-electric transmission | length | 17068.8 millimetres)
(ALCO RS-3 | hasEngine | V12 engine)"
1061,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nurhan Atasoy was born in Turkey and is of Turkish nationality. Istanbul is Turkey's largest city and the national currency is the Turkish Lira.,"(Turkey | largestCity | Istanbul)
(Nurhan_Atasoy | nationality | Turkish_people)
(Turkey | currency | Turkish_lira)
(Nurhan_Atasoy | birthPlace | Turkey)","(""Nurhan Atasoy"" | ""place of birth"" | ""Turkey"")
(""Nurhan Atasoy"" | ""nationality"" | ""Turkish"")
(""Istanbul"" | ""is located in"" | ""Turkey"")
(""Istanbul"" | ""classification"" | ""largest city in Turkey"")
(""Turkey"" | ""national currency"" | ""Turkish Lira"")"
1062,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The English movie Super Capers, directed by Ray Griggs and edited by Stacy Katzman, runs for 98 minutes.","(Super_Capers | language | English_language)
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | editing | Stacy_Katzman)
(Super_Capers | runtime | 98.0)","(Super Capers | language | English)
(Super Capers | director | Ray Griggs)
(Super Capers | editor | Stacy Katzman)
(Super Capers | runtime | 98 minutes)"
1063,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina died in Petah Tikva and was born in the German Empire, whose national anthem was Die Wacht am Rhein.","(Liselotte_Grschebina | birthPlace | German_Empire)
(German_Empire | anthem | Die_Wacht_am_Rhein)
(Liselotte_Grschebina | deathPlace | Petah_Tikva)","(Liselotte Grschebina | place of death | Petah Tikva)
(Liselotte Grschebina | place of birth | German Empire)
(German Empire | national anthem | Die Wacht am Rhein)"
1064,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","In Israel, ethnic groups include Israeli Jews.",(Israel | ethnicGroup | Israeli_Jews),"(""Israel"" | ""ethnicGroupsInclude"" | ""Israeli Jews"")"
1065,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, born Olga Nikolaevna Bondareva, is a graduate of Leningrad State University.","(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")
(Olga_Bondareva | almaMater | Leningrad_State_University)","(""Olga Bondareva"" | ""birthName"" | ""Olga Nikolaevna Bondareva"")
(""Olga Bondareva"" | ""almaMater"" | ""Leningrad State University"")"
1066,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Leszek Borysiewicz is the current Chancellor of the University of Cambridge.,(University_of_Cambridge | viceChancellor | Leszek_Borysiewicz),"(""Leszek Borysiewicz"" | ""type"" | ""Person""),
(""Leszek Borysiewicz"" | ""jobTitle"" | ""Chancellor""),
(""University of Cambridge"" | ""type"" | ""Organisation""),
(""University of Cambridge"" | ""title"" | ""University""),
(""Leszek Borysiewicz"" | ""memberOf"" | ""University of Cambridge""),
(""University of Cambridge"" | ""head"" | ""Leszek Borysiewicz"")"
1067,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina died in Israel on June 14, 1994.","(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | deathPlace | Israel)","(Liselotte Grschebina | deathDate | June 14, 1994)
(Liselotte Grschebina | deathPlace | Israel)"
1068,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Darinka Dentcheva(whose alma mater is Humboldt University) who was influenced by Andrzej Piotr Ruszczyński. He is a professional in the field of mathematical optimization known for Stochastic programming.,"(Darinka_Dentcheva | influencedBy | Andrzej_Piotr_Ruszczyński)
(Darinka_Dentcheva | professionalField | Mathematical_optimization)
(Darinka_Dentcheva | knownFor | Stochastic_programming)
(Darinka_Dentcheva | almaMater | Humboldt_University)","(Darinka Dentcheva | alma mater | Humboldt University)
(Darinka Dentcheva | influenced by | Andrzej Piotr Ruszczyński)
(Andrzej Piotr Ruszczyński | profession | ""mathematical optimization"")
(Andrzej Piotr Ruszczyński | known for | ""Stochastic programming"")"
1069,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy, located in Dijon, has 16800 undergraduate students, 2900 staff members, and 27400 students.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfStudents | 27400)
(University_of_Burgundy | city | Dijon)","(""University of Burgundy"" | ""location"" | ""Dijon"")
(""University of Burgundy"" | ""undergraduate student count"" | 16800)
(""University of Burgundy"" | ""staff members count"" | 2900)
(""University of Burgundy"" | ""total student count"" | 27400)"
1070,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Jamie Lawrence, born on March 8, 1970, composed the music for Death in a Factory Farm, a film broadcasted by Time Warner owned HBO.","(Death_on_a_Factory_Farm | broadcastedBy | HBO)
(HBO | owner | Time_Warner)
(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)
(Jamie_Lawrence | birthDate | 1970-03-08)","(Jamie Lawrence | birthDate | March 8, 1970)
(Death in a Factory Farm | composer | Jamie Lawrence)
(Death in a Factory Farm | broadcastedBy | HBO)
(HBO | owner | Time Warner)"
1071,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson was born in Darlington, Kingdom of England (area code 01325, postal codes DL1, DL2, and DL3).","(Darlington | areaCode | 01325)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | birthPlace | Darlington)
(Darlington | postalCode | ""DL1, DL2, DL3"")","(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington"")
(""Darlington"" | ""isLocatedIn"" | ""Kingdom of England"")
(""Darlington"" | ""areaCode"" | ""01325"")
(""Darlington"" | ""postalCode"" | ""DL1"")
(""Darlington"" | ""postalCode"" | ""DL2"")
(""Darlington"" | ""postalCode"" | ""DL3"")"
1072,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Lady Anne Monson an English national was born in Darlington in the Kingdom of England. She currently resides in India.,"(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | nationality | Kingdom_of_England)
(Lady_Anne_Monson | residence | India)","(""Lady Anne Monson"" | ""type"" | ""Person"")
(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington"")
(""Lady Anne Monson"" | ""nationality"" | ""English"")
(""Darlington"" | ""isPartOf"" | ""Kingdom of England"")
(""Lady Anne Monson"" | ""currentLocation"" | ""India"")"
1073,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","It's Great to Be Young is a 1956 film which received £282,838.","(""It's_Great_to_Be_Young_(1956_film) | gross | 282838.0"")","(""It's Great to Be Young"" | type | ""Film"")
(""It's Great to Be Young"" | releaseYear | 1956)
(""It's Great to Be Young"" | received | £282,838)"
1074,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Rageous, manufactured by Pontiac, is made in Detroit, Michigan.","(Pontiac_Rageous | assembly | Detroit)
(Detroit | isPartOf | Michigan)
(Pontiac_Rageous | manufacturer | Pontiac)","(""Pontiac Rageous"" | ""manufacturer"" | ""Pontiac"")
(""Pontiac Rageous"" | ""location made"" | ""Detroit, Michigan"")"
1075,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The anthem of the German Empire is Die Wacht am Rhein.,(German_Empire | anthem | Die_Wacht_am_Rhein),(German Empire | anthem | Die Wacht am Rhein)
1076,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was born on May 2, 1908 and studied at the School of Applied Arts in Stuttgart where she later became a professional photographer before dying on June 14, 1994.","(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)
(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | professionalField | Photographer)","(Liselotte Grschebina | birthDate | May 2, 1908)
(Liselotte Grschebina | studiedAt | School of Applied Arts in Stuttgart)
(Liselotte Grschebina | profession | photographer)
(Liselotte Grschebina | deathDate | June 14, 1994)"
1077,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The birthdate of Anatole de Grunwald is 25-12-1910.,(Anatole_de_Grunwald | birthDate | 1910-12-25),(Anatole de Grunwald | birthdate | 25-12-1910)
1078,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Danielle Harris is starring in Super Capers.,(Super_Capers | starring | Danielle_Harris),"(""Danielle Harris"" | ""starring in"" | ""Super Capers"")"
1079,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bionico (made with granola) is a food served as at the dessert course found in Mexico. The currency in Mexico is the peso inhabited by Mexicans.,"(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Bionico | ingredient | Granola)
(Bionico | country | Mexico)","(""Bionico"" | ""type"" | ""food"")
(""Bionico"" | ""contains"" | ""granola"")
(""Bionico"" | ""course"" | ""dessert"")
(""Bionico"" | ""isFoundIn"" | ""Mexico"")
(""Mexico"" | ""serves"" | ""Bionico"")
(""Mexico"" | ""currency"" | ""peso"")
(""Mexico"" | ""inhabitants"" | ""Mexicans"")
(""peso"" | ""isCurrencyOf"" | ""Mexico"")
(""Mexicans"" | ""livesIn"" | ""Mexico"")"
1080,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy, winner of the State Award for Superior Achievement, mainly lived in Tesvikiye.","(Nurhan_Atasoy | award | State_Award_for_Superior_Achievement)
(Nurhan_Atasoy | residence | Teşvikiye)","(""Nurhan Atasoy"" | ""type"" | ""Person""),
(""Nurhan Atasoy"" | ""awardWon"" | ""State Award for Superior Achievement""),
(""Nurhan Atasoy"" | ""residence"" | ""Tesvikiye""), 
(""State Award for Superior Achievement"" | ""type"" | ""Award""), 
(""Tesvikiye"" | ""type"" | ""Place"")"
1081,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Trane, who employs 29,000 people, are in the building materials industry.","(Trane | numberOfEmployees | 29000)
(Trane | industry | Building_materials)","(""Trane"" | ""employs"" | ""29,000 people"")
(""Trane"" | ""in industry"" | ""building materials"")"
1082,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Expect a Miracle was produced and recorded by Brian Kelly. Its runtime is 54:56 minutes.,"(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist))","(""Expect a Miracle"" | ""producer"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""recording artist"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""runtime"" | ""54:56 minutes"")"
1083,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The album Turn Me On is preceded by the album Let It Breed.,(Turn_Me_On_(album) | precededBy | Let_It_Breed),"(""Turn Me On"" | ""precededBy"" | ""Let It Breed"")"
1084,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers was distributed by Roadside Attractions and Lionsgate, amongst others. Lionsgate is an entertainment business founded by Frank Giustra.","(Super_Capers | distributor | Roadside_Attractions)
(Lionsgate | industry | Entertainment)
(Super_Capers | distributor | Lionsgate)
(Lionsgate | foundedBy | Frank_Giustra)","(""Super Capers"" | ""distributedBy"" | ""Roadside Attractions"")
(""Super Capers"" | ""distributedBy"" | ""Lionsgate"")
(""Lionsgate"" | ""type"" | ""Entertainment Business"")
(""Lionsgate"" | ""foundedBy"" | ""Frank Giustra"")"
1085,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva was born on April 27, 1937 and died on December 9, 1991. She worked in the fields of mathematics and economics in life.","(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | deathDate | 1991-12-09)
(Olga_Bondareva | professionalField | Economics)
(Olga_Bondareva | professionalField | Mathematics)","(Bondareva, Olga | birthDate | ""April 27, 1937"")
(Bondareva, Olga | deathDate | ""December 9, 1991"")
(Bondareva, Olga | occupation | ""mathematics"")
(Bondareva, Olga | occupation | ""economics"")"
1086,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Fellowship of the Ring is in the fantasy genre. It was written by J.R.R. Tolkien and published by George Allen & Unwin. The Fellowship of the Ring is preceded by the Hobbit and followed by The Two Towers.,"(The_Fellowship_of_the_Ring | publisher | George_Allen_&_Unwin)
(The_Fellowship_of_the_Ring | literaryGenre | Fantasy_(genre))
(The_Fellowship_of_the_Ring | followedBy | The_Two_Towers)
(The_Fellowship_of_the_Ring | author | J._R._R._Tolkien)
(The_Fellowship_of_the_Ring | precededBy | The_Hobbit)","(""The Fellowship of the Ring"" | ""type"" | ""fantasy genre"")
(""The Fellowship of the Ring"" | ""author"" | ""J.R.R. Tolkien"")
(""J.R.R. Tolkien"" | ""wrote"" | ""The Fellowship of the Ring"")
(""The Fellowship of the Ring"" | ""publisher"" | ""George Allen & Unwin"")
(""George Allen & Unwin"" | ""published"" | ""The Fellowship of the Ring"")
(""The Hobbit"" | ""followedBy"" | ""The Fellowship of the Ring"")
(""The Fellowship of the Ring"" | ""precededBy"" | ""The Hobbit"")
(""The Fellowship of the Ring"" | ""followedBy"" | ""The Two Towers"")
(""The Two Towers"" | ""precededBy"" | ""The Fellowship of the Ring"")"
1087,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","AmeriGas is in energy industry and is located in King of Prussia, Pennsylvania and serves all regions of the United States.","(AmeriGas | regionServed | United_States)
(AmeriGas | city | King_of_Prussia,_Pennsylvania)
(AmeriGas | industry | Energy_industry)","(AmeriGas | type | Energy Industry)
(AmeriGas | location | King of Prussia, Pennsylvania)
(AmeriGas | serves | United States)"
1088,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Fellowship of the Ring was preceded by the Hobbit.,(The_Fellowship_of_the_Ring | precededBy | The_Hobbit),"(""The Fellowship of the Ring"" | ""precededBy"" | ""The Hobbit"")"
1089,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan B Miller Hall is located in Virginia at 101 Ukrop Way and was designed by Robert A.M. Stern. The College of William and Mary currently own the building which began construction on the 30th of March 2007 and was completed on the 1st of June, 2009.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | completionDate | 2009-06-01)
(Alan_B._Miller_Hall | location | Virginia)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""Alan B Miller Hall"" | ""location"" | ""Virginia"")
(""Alan B Miller Hall"" | ""address"" | ""101 Ukrop Way"")
(""Alan B Miller Hall"" | ""designer"" | ""Robert A.M. Stern"")
(""Alan B Miller Hall"" | ""owner"" | ""The College of William and Mary"")
(""Alan B Miller Hall"" | ""constructionStartDate"" | ""30th of March 2007"")
(""Alan B Miller Hall"" | ""constructionEndDate"" | ""1st of June, 2009"")"
1090,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Tom Simon is the producer of Death on a Factory Farm, and Jamie Lawrence is the music composer.","(Death_on_a_Factory_Farm | producer | Tom_Simon)
(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)","(Tom Simon | type | Producer)
(Tom Simon | produced | Death on a Factory Farm)
(Death on a Factory Farm | hasProducer | Tom Simon)
(Jamie Lawrence | type | MusicComposer)
(Death on a Factory Farm | musicComposedBy | Jamie Lawrence)
(Jamie Lawrence | composedMusicFor | Death on a Factory Farm)"
1091,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The location of Trane is in Swords, Dublin.","(Trane | location | Swords,_Dublin)","(""Trane"" | ""location"" | ""Swords, Dublin"")"
1092,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Hypermarcas’s revenue is 1800000000.,(Hypermarcas | revenue | 1800000000),"(""Hypermarcas"" | ""hasRevenue"" | 1800000000)"
1093,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Inside the Philippines-located GMA Network Center is GMA New Media, which makes both web sites and online games.","(GMA_New_Media | location | GMA_Network_Center)
(GMA_New_Media | product | Online_Game)
(GMA_New_Media | location | Philippines)
(GMA_New_Media | product | World_Wide_Web)","(""GMA Network Center"" | ""location"" | ""Philippines"")
(""GMA Network Center"" | ""contains"" | ""GMA New Media"")
(""GMA New Media"" | ""function"" | ""building websites"")
(""GMA New Media"" | ""function"" | ""creating online games"")"
1094,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The birthplace of Grigory Neujmin was in Tbilisi.,(Grigory_Neujmin | birthPlace | Tbilisi),(Grigory Neujmin | birthPlace | Tbilisi)
1095,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Runway 18L/36R at Adolfo Suárez Madrid–Barajas Airport in Alcobendas is 4349 metres long. The airport is operated by ENAIRE, which is based in Madrid, Spain.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 4349.0)
(ENAIRE | city | Madrid)
(Madrid | country | Spain)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayName | ""18L/36R"")","(""Runway 18L/36R"" | ""isPartOf"" | ""Adolfo Suárez Madrid–Barajas Airport"")
(""Runway 18L/36R"" | ""isLocatedIn"" | ""Alcobendas"")
(""Runway 18L/36R"" | ""length"" | ""4349 metres"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""hasRunway"" | ""Runway 18L/36R"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""operator"" | ""ENAIRE"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""isLocatedIn"" | ""Alcobendas"")
(""ENAIRE"" | ""operates"" | ""Adolfo Suárez Madrid–Barajas Airport"")
(""ENAIRE"" | ""isBasedIn"" | ""Madrid"")
(""ENAIRE"" | ""isBasedIn"" | ""Spain"")"
1096,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Jamie Lawrence wrote music for the film ‘Death on a Factory Farm’.,(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence),"(Jamie Lawrence | wrote music for | Death on a Factory Farm)
(Death on a Factory Farm | has music by | Jamie Lawrence)"
1097,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The postal code of Karlsruhe is 76131-76229.,(Karlsruhe | postalCode | 76131–76229),"(Karlsruhe | postal code | ""76131-76229"")"
1098,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Andrew Rayel is an artist associated with the trance music artist Bobina, who was born in Chisinau, Moldova and began his musical career in 2009.","(Andrew_Rayel | birthPlace | ""Chișinău, Moldova"")
(Andrew_Rayel | associatedBand/associatedMusicalArtist | Bobina)
(Andrew_Rayel | activeYearsStartYear | 2009)
(Andrew_Rayel | genre | Trance_music)","(Andrew Rayel | type | Artist)
(Andrew Rayel | associatedWith | Bobina)
(Bobina | type | Trance Music Artist)
(Bobina | birthPlace | Chisinau, Moldova)
(Bobina | careerStartYear | 2009)"
1099,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The American band, the Honeymoon Killers, made and self-produced its album called Turn Me On of the genre punk blues which runs for 35.1 minutes and was preceded by the album Let It Breed.","(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | artist | The_Honeymoon_Killers_(American_band))
(Turn_Me_On_(album) | genre | Punk_blues)
(Turn_Me_On_(album) | producer | The_Honeymoon_Killers_(American_band))
(Turn_Me_On_(album) | precededBy | Let_It_Breed)","(Honeymoon Killers | nationality | ""American"")
(Honeymoon Killers | type | ""band"")
(Honeymoon Killers | made | ""Turn Me On"")
(Honeymoon Killers | self-produced | ""Turn Me On"")
(""Turn Me On"" | by | Honeymoon Killers)
(""Turn Me On"" | genre | ""punk blues"")
(""Turn Me On"" | duration | 35.1 minutes)
(""Turn Me On"" | preceded by | ""Let It Breed"")
(""Let It Breed"" | succeeded by | ""Turn Me On"")"
1100,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was an Israeli photographer who was born on May 2, 1908. She attended the school of Applied Arts in Stuttgart and died in Israel on June 14, 1994.","(Liselotte_Grschebina | deathPlace | Israel)
(Liselotte_Grschebina | nationality | Israel)
(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)
(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | birthDate | 1908-05-02)","(""Liselotte Grschebina"" | ""type"" | ""Person""),
(""Liselotte Grschebina"" | ""type"" | ""Photographer""),
(""Liselotte Grschebina"" | ""birthPlace"" | ""Israel""),
(""Liselotte Grschebina"" | ""birthDate"" | ""May 2, 1908""),
(""Liselotte Grschebina"" | ""deathPlace"" | ""Israel""),
(""Liselotte Grschebina"" | ""deathDate"" | ""June 14, 1994""),
(""Liselotte Grschebina"" | ""nationality"" | ""Israeli""),
(""Liselotte Grschebina"" | ""almaMater"" | ""School of Applied Arts in Stuttgart"")."
1101,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Lady Anne Monson has resided in India for most of her life where the Chief Justice is one of the leaders of India.,"(Lady_Anne_Monson | residence | India)
(India | leaderTitle | Chief Justice)","(""Lady Anne Monson"" | ""place of residence"" | ""India"")
(""Lady Anne Monson"" | ""lifespan"" | ""most of her life"")
(""Chief Justice"" | ""place of work"" | ""India"")
(""Chief Justice"" | ""role"" | ""leader of India"")"
1102,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The fantasy book The Fellowship of the Ring was released on July 29, 1954.","(The_Fellowship_of_the_Ring | literaryGenre | Fantasy_(genre))
(The_Fellowship_of_the_Ring | releaseDate | 1954-07-29)","(""The Fellowship of the Ring"" | type | ""fantasy book"")
(""The Fellowship of the Ring"" | releaseDate | ""July 29, 1954"")"
1103,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The national anthem of the German Empire was Das Lied der Deutschen.,(German_Empire | anthem | Das_Lied_der_Deutschen),(German Empire | national anthem | Das Lied der Deutschen)
1104,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","American Alan Shepard was born in New Hampshire on November 18th 1923. Shepard was awarded the Distinguished Service Medal from the Navy. He retired on August 1st, 1974, and recently passed away in California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | dateOfRetirement | ""1974-08-01"")
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | award | Distinguished_Service_Medal_(United_States_Navy))","(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | birthDate | November 18th, 1923)
(Alan Shepard | award | Distinguished Service Medal)
(Distinguished Service Medal | issuer | Navy)
(Alan Shepard | retirementDate | August 1st, 1974)
(Alan Shepard | deathPlace | California)"
1105,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Mason school of business are the current tenants of Alan B Miller Hall in 101 Ukrop Way which is owned by The College of William and Mary.,"(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""Mason school of business"" | ""tenant of"" | ""Alan B Miller Hall""),
(""Alan B Miller Hall"" | ""located at"" | ""101 Ukrop Way""),
(""Alan B Miller Hall"" | ""owned by"" | ""The College of William and Mary"")"
1106,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",McVeagh of the South Seas is a movie directed by Cyril Bruce and starring Harry Carey. The IMDb data for the film consists of the ID of 0004319. Carey was born in 1878 and he was also the writer of this film which was produced by Progressive Motion Picture Company.,"(McVeagh_of_the_South_Seas | imdbId | 0004319)
(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | writer | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | producer | The_Progressive_Motion_Picture_Company)
(McVeagh_of_the_South_Seas | director | Cyril_Bruce)","(""McVeagh of the South Seas"" | type | ""movie"")
(""McVeagh of the South Seas"" | directedBy | ""Cyril Bruce"")
(""McVeagh of the South Seas"" | starring | ""Harry Carey"")
(""McVeagh of the South Seas"" | IMDbID | ""0004319"")
(""McVeagh of the South Seas"" | writtenBy | ""Harry Carey"")
(""McVeagh of the South Seas"" | producedBy | ""Progressive Motion Picture Company"")
(""Harry Carey"" | type | ""Person"")
(""Harry Carey"" | birthDate | ""1878"")
(""Harry Carey"" | writerOf | ""McVeagh of the South Seas"")
(""Cyril Bruce"" | type | ""Person"")
(""Cyril Bruce"" | directorOf | ""McVeagh of the South Seas"")
(""Progressive Motion Picture Company"" | type | ""Company"")
(""Progressive Motion Picture Company"" | produced | ""McVeagh of the South Seas"")"
1107,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The total area of Michigan is 250493000000.0.,(Michigan | areaTotal | 250493000000.0),(Michigan | totalArea | 250493000000.0)
1108,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was born in New Hampshire, U.S.A., on November 18, 1923. He was selected by NASA in 1959 and was a later a crew member of Apollo 14. Shepard died in California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | selectedByNasa | 1959)
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | mission | Apollo_14)","(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | birthPlace | U.S.A)
(Alan Shepard | birthDate | November 18, 1923)
(Alan Shepard | deathPlace | California)
(NASA | selected | Alan Shepard)
(Alan Shepard | mappedBy | NASA)
(Apollo 14 | hasCrewMember | Alan Shepard)
(Alan Shepard | isCrewMemberOf | Apollo 14)"
1109,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Acharya Institute of Technology, established in 2000, is affiliated to Visvesvaraya Technological University.","(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | established | 2000)","(""Acharya Institute of Technology"" | ""established in"" | 2000)
(""Acharya Institute of Technology"" | ""affiliated to"" | ""Visvesvaraya Technological University"")"
1110,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Let it Breed by the American band The Honeymoon Killers, was followed by their self-produced album Turn Me On which was produced by Wharton Tiers. Turn Me On is an album in the noise rock and punk blues genres and has a total runtime of 35 minutes 10 seconds.","(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | artist | The_Honeymoon_Killers_(American_band))
(Turn_Me_On_(album) | genre | Punk_blues)
(Turn_Me_On_(album) | producer | The_Honeymoon_Killers_(American_band))
(Turn_Me_On_(album) | genre | Noise_rock)
(Turn_Me_On_(album) | precededBy | Let_It_Breed)
(Turn_Me_On_(album) | producer | Wharton_Tiers)","(""Let it Breed"" | creator | ""The Honeymoon Killers"")
(""The Honeymoon Killers"" | country | ""America"")
(""The Honeymoon Killers"" | album | ""Let it Breed"")
(""The Honeymoon Killers"" | album | ""Turn Me On"")
(""Turn Me On"" | producer | ""The Honeymoon Killers"")
(""Turn Me On"" | producer | ""Wharton Tiers"")
(""Turn Me On"" | genre | ""noise rock"")
(""Turn Me On"" | genre | ""punk blues"")
(""Turn Me On"" | runtime | ""35 minutes 10 seconds"")
(""Let it Breed"" | followedBy | ""Turn Me On"")"
1111,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Bedford Aerodrome has an operating organization that is called the MotorSport Vision and the ICAO location identifier for the aerodrome is EGBF.,"(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | icaoLocationIdentifier | EGBF)","(""Bedford Aerodrome"" | ""operatingOrganization"" | ""MotorSport Vision"")
(""Bedford Aerodrome"" | ""ICAOlocationIdentifier"" | ""EGBF"")"
1112,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiacao Sportiva Arapiraquense, the location of the Estadio Municipal Coaracy da Mata Fonseca has 17000 members.","(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(Agremiacao Sportiva Arapiraquense | location | Estadio Municipal Coaracy da Mata Fonseca)
(Agremiacao Sportiva Arapiraquense | number of members | 17000)
(Estadio Municipal Coaracy da Mata Fonseca | is located in | Agremiacao Sportiva Arapiraquense)"
1113,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Train song Mermaid is from the pop rock genre and written in the reggae music genre which dub music is a musical style derivative of. Also, hip hop music grew out of reggae.","(Mermaid_(Train_song) | genre | Pop_rock)
(Reggae | derivative | Dub_music)
(Mermaid_(Train_song) | genre | Reggae)
(Reggae | derivative | Hip_hop_music)","(""Mermaid"" | ""type"" | ""song"")
(""Mermaid"" | ""creator"" | ""Train"")
(""Mermaid"" | ""genre"" | ""pop rock"")
(""Mermaid"" | ""genre"" | ""reggae"")
(""reggae"" | ""type"" | ""music genre"")
(""pop rock"" | ""type"" | ""music genre"")
(""dub music"" | ""type"" | ""music genre"")
(""dub music"" | ""derivative of"" | ""reggae"")
(""hip hop music"" | ""type"" | ""music genre"")
(""hip hop music"" | ""origin"" | ""reggae"")"
1114,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Harry Carey was born in 1878. He was a movie actor and starred in McVeagh of the South Seas.,(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878)),"(""Harry Carey"" | ""birthYear"" | ""1878"")
(""Harry Carey"" | ""occupation"" | ""movie actor"")
(""Harry Carey"" | ""starredIn"" | ""McVeagh of the South Seas"")"
1115,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The place served by the Bedford Aerodrome in Thurleigh is the Bedford Autodrome. Bedford Aerodrome's International Civil Aviation Organization (ICAO) identifier is EGBF.,"(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | location | Thurleigh)
(Bedford_Aerodrome | icaoLocationIdentifier | EGBF)","(""Bedford Aerodrome"" | ""serves"" | ""Bedford Autodrome"")
(""Bedford Aerodrome"" | ""locatedIn"" | ""Thurleigh"")
(""Bedford Aerodrome"" | ""ICAOidentifier"" | ""EGBF"")"
1116,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Olga Bondareva’s given name is Olga Nikolaevna Bondareva and is on the most known professionals in the field of Mathematics. She graduated from Leningrad State University and works as an economist.,"(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | professionalField | Economics)
(Olga_Bondareva | professionalField | Mathematics)","(Olga Bondareva | given name | Olga Nikolaevna Bondareva)
(Olga Nikolaevna Bondareva | is known as | Olga Bondareva)
(Olga Bondareva | profession | Mathematician)
(Olga Bondareva | field of work | Mathematics)
(Olga Bondareva | alumni of | Leningrad State University)
(Olga Bondareva | works as | Economist)"
1117,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Year of No Light released Nord on 06-09-2006 and followed it with Live at Roadburn 2008, which was recorded on 04-19-2008.","(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Live_at_Roadburn_2008_(Year_of_No_Light_album) | artist | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Live_at_Roadburn_2008_(Year_of_No_Light_album) | recordDate | 2008-04-19)","(""Year of No Light"" | ""release"" | ""Nord"")
(""Nord"" | ""release date"" | ""06-09-2006"")
(""Year of No Light"" | ""follow up with"" | ""Live at Roadburn 2008"")
(""Live at Roadburn 2008"" | ""record date"" | ""04-19-2008"")"
1118,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","English Without Tears is an 89 minute movie that was released on July 7th, 1944. It was directed by Nicholas Brodszky and edited by Alan Jaggs. The cinematographer was Bernard Knowles and the director was Harold French.","(English_Without_Tears | runtime | 89.0)
(English_Without_Tears | musicComposer | Nicholas_Brodszky)
(English_Without_Tears | releaseDate | 1944-07-28)
(English_Without_Tears | director | Harold_French)
(English_Without_Tears | editing | Alan_Jaggs)
(English_Without_Tears | cinematography | Bernard_Knowles)","(""English Without Tears"" | ""type"" | ""Movie"")
(""English Without Tears"" | ""runtime"" | 89 ""minutes"")
(""English Without Tears"" | ""releaseDate"" | ""July 7th, 1944"")
(""English Without Tears"" | ""directedBy"" | ""Nicholas Brodszky"")
(""English Without Tears"" | ""editedBy"" | ""Alan Jaggs"")
(""English Without Tears"" | ""cinematography"" | ""Bernard Knowles"")
(""English Without Tears"" | ""directedBy"" | ""Harold French"")"
1119,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aaron Turner, a singer for the band Twilight, plays Post-metal music.","(Aaron_Turner | genre | Post-metal)
(Aaron_Turner | instrument | Singing)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))","(Aaron Turner | type | Singer)
(Aaron Turner | member of | Twilight)
(Twilight | type | Band)
(Aaron Turner | plays genre | Post-metal)
(Twilight | plays genre | Post-metal)"
1120,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Train song Mermaid, which lasts 3.16 minutes, was released under the record label Columbia Records and put out by the Sony Music Entertainment record label.","(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)","(""Mermaid"" | type | ""song"")
(""Mermaid"" | creator | ""Train"")
(""Mermaid"" | duration | ""3.16 minutes"")
(""Mermaid"" | recordLabel | ""Columbia Records"")
(""Mermaid"" | recordLabel | ""Sony Music Entertainment"")"
1121,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",1147 Stavropolis with rotation period of 20378.5 and periapsis of 260855000000.0 has the epoch 31 July 2016 (JD2457600.5).,"(1147_Stavropolis | rotationPeriod | 20378.5)
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))","(""1147 Stavropolis"" | ""hasRotationPeriodOf"" | 20378.5)
(""1147 Stavropolis"" | ""hasPeriapsisOf"" | 260855000000.0)
(""1147 Stavropolis"" | ""hasEpochOn"" | ""31 July 2016 (JD2457600.5)"")"
1122,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Felipe Gozon is the key person for GMA New Media, whose parent company is the GMA Network.","(GMA_New_Media | keyPerson | Felipe_Gozon)
(GMA_New_Media | parentCompany | GMA_Network_(company))","(""Felipe Gozon"" | ""role"" | ""key person"")
(""Felipe Gozon"" | ""workFor"" | ""GMA New Media"")
(""GMA New Media"" | ""parentCompany"" | ""GMA Network"")"
1123,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Year of No Light album Nord, self-produced by the band, is in the sludge metal and post metal genres.","(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | genre | Post-metal)","(""Nord"" | ""type"" | ""Album"")
(""Nord"" | ""producer"" | ""Year of No Light"")
(""Nord"" | ""byArtist"" | ""Year of No Light"")
(""Nord"" | ""genre"" | ""sludge metal"")
(""Nord"" | ""genre"" | ""post metal"")"
1124,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",2900 University of Burgundy staff members support 27400 students of whom 16800 are undergraduates.,"(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfStudents | 27400)","(""University of Burgundy"" | ""hasStaffMembers"" | ""2900"")

(""University of Burgundy"" | ""supports"" | ""27400 students"")

(""27400 students"" | ""memberOf"" | ""University of Burgundy"")

(""University of Burgundy"" | ""hasUndergraduateStudents"" | ""16800"")

(""16800 undergraduates"" | ""memberOf"" | ""University of Burgundy"")"
1125,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The production team Stargate, who is associated with the musical artist Michael Jackson, produced the song Mermaid.","(Mermaid_(Train_song) | writer | Stargate_(production_team))
(Stargate_(production_team) | associatedBand/associatedMusicalArtist | Michael_Jackson)","(""Stargate"" | ""type"" | ""production team""),
(""Stargate"" | ""associatedWith"" | ""Michael Jackson""),
(""Michael Jackson"" | ""type"" | ""musical artist""),
(""Stargate"" | ""produced"" | ""Mermaid""),
(""Mermaid"" | ""type"" | ""song"")"
1126,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Adolfo Suárez Madrid–Barajas Airport is located in Alcobendas, 610 metres above sea level. This airport is operated by ENAIRE, which is also located in Madrid.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)","(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""altitude"" | ""610 metres"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""operator"" | ""ENAIRE"")
(""ENAIRE"" | ""location"" | ""Madrid"")"
1127,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Bootleg Series Volume 1: The Quine Tapes was recorded under the Polydor Records record label.,(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Polydor_Records),"(""The Bootleg Series Volume 1: The Quine Tapes"" | ""was recorded under"" | ""Polydor Records"")
(""Polydor Records"" | ""is record label of"" | ""The Bootleg Series Volume 1: The Quine Tapes"")"
1128,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Universal Music Group is located in Santa Monica, California.","(Universal_Music_Group | location | Santa_Monica,_California)","(""Universal Music Group"" | ""is located in"" | ""Santa Monica, California"")"
1129,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Sludge metal is the genre associated with Year of No Light.,(Year_of_No_Light | genre | Sludge_metal),"(""Sludge metal"" | ""isGenreOf"" | ""Year of No Light"")
(""Year of No Light"" | ""hasGenre"" | ""Sludge metal"")"
1130,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Chinabank, who offer a banking service, was founded on 08-16-1920.","(Chinabank | foundingDate | 1920-08-16)
(Chinabank | service | Banking)","(""Chinabank"" | ""type"" | ""banking service"")
(""Chinabank"" | ""foundingDate"" | ""1920-08-16"")"
1131,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina born in Karlsruhe, also died in Israel where Israeli Jews is an ethnic group. Another ethnic group in Israel are Arabs.","(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | deathPlace | Israel)
(Israel | ethnicGroup | Arab_citizens_of_Israel)
(Israel | ethnicGroup | Israeli_Jews)","(Liselotte Grschebina | birthPlace | Karlsruhe)
(Liselotte Grschebina | deathPlace | Israel)
(Israeli Jews | type | ethnic group)
(Israeli Jews | location | Israel)
(Arabs | type | ethnic group)
(Arabs | location | Israel)"
1132,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bionico is a dish served for dessert in Mexico where the currency is the peso. Another variant of dessert is cake.,"(Mexico | currency | Mexican_peso)
(Bionico | course | Dessert)
(Dessert | dishVariation | Cake)
(Bionico | country | Mexico)","(""Bionico"" | ""is"" | ""dish"")
(""Bionico"" | ""servedIn"" | ""Mexico"")
(""Bionico"" | ""isTypeOf"" | ""dessert"")
(""Mexico"" | ""currency"" | ""peso"")
(""cake"" | ""isTypeOf"" | ""dessert"")"
1133,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was an American who was born on November 18, 1923 in New Hampshire. He was awarded the Distinguished Service Medal by the United States Navy, retired on August 1st, 1974 and died in California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | dateOfRetirement | ""1974-08-01"")
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | award | Distinguished_Service_Medal_(United_States_Navy))","(Alan Shepard | type | American)
(Alan Shepard | birthDate | November 18, 1923)
(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | awarded | Distinguished Service Medal)
(Distinguished Service Medal | awarder | United States Navy)
(Alan Shepard | retiredOn | August 1, 1974)
(Alan Shepard | deathPlace | California)"
1134,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","FC Terek Grozny’s ground is based at Grozny and the manager is Rashid Rakhimov. Aleksandr Prudnikov, who is 185 cm tall, plays for FC Terek Grozny and his current club is FC Amkar Perm.","(FC_Terek_Grozny | ground | Grozny)
(Aleksandr_Prudnikov | currentclub | FC_Amkar_Perm)
(Aleksandr_Prudnikov | club | FC_Terek_Grozny)
(Aleksandr_Prudnikov | height | 185.0 (centimetres))
(FC_Terek_Grozny | manager | Rashid_Rakhimov)","(""FC Terek Grozny"" | ""hasGround"" | ""Grozny"")
(""FC Terek Grozny"" | ""hasManager"" | ""Rashid Rakhimov"")
(""Aleksandr Prudnikov"" | ""height"" | ""185 cm"")
(""Aleksandr Prudnikov"" | ""playsFor"" | ""FC Terek Grozny"")
(""Aleksandr Prudnikov"" | ""currentClub"" | ""FC Amkar Perm"")"
1135,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson was born January 1, 1726, held British nationality, and lived in the Kingdom of Britain.","(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | nationality | Kingdom_of_England)","(Lady Anne Monson | birthDate | January 1, 1726)
(Lady Anne Monson | nationality | British)
(Lady Anne Monson | residence | Kingdom of Britain)"
1136,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Hypermarcas, which is located in São Paulo, Brazil, makes cosmetics products.","(Hypermarcas | location | Brazil)
(Hypermarcas | location | São_Paulo)
(Hypermarcas | product | Cosmetics)","(""Hypermarcas"" | ""location"" | ""São Paulo, Brazil"")
(""Hypermarcas"" | ""makes"" | ""cosmetics products"")"
1137,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","'It's great to be young' (1956) introduces music composed by Louis Levy. The 94-minute-long film was written by Ted Willis, and features Cecil Parker as a main role.","(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | musicComposer | Louis_Levy)
(""It's_Great_to_Be_Young_(1956_film) | starring | Cecil_Parker)
(""It's_Great_to_Be_Young_(1956_film) | writer | Ted_Willis"")","(""It's great to be young"" | ""releaseYear"" | 1956)
(""It's great to be young"" | ""musicComposer"" | ""Louis Levy"")
(""It's great to be young"" | ""duration"" | 94)
(""It's great to be young"" | ""screenWriter"" | ""Ted Willis"")
(""It's great to be young"" | ""starring"" | ""Cecil Parker"")"
1138,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Johnny Colt was once a member of the band Train.,(Train_(band) | formerBandMember | Johnny_Colt),"(""Johnny Colt"" | ""type"" | ""Person""),
(""Johnny Colt"" | ""memberOf"" | ""Train""),
(""Train"" | ""type"" | ""Band""),
(""Train"" | ""hasMember"" | ""Johnny Colt"")"
1139,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","29,000 employees work at Trane which is a company that was founded on January 1, 1913.","(Trane | foundingDate | 1913-01-01)
(Trane | numberOfEmployees | 29000)","(""Trane"" | ""numberOfEmployees"" | ""29,000"")
(""Trane"" | ""type"" | ""Company"")
(""Trane"" | ""foundingDate"" | ""January 1, 1913"")"
1140,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aleksandr Prudnikov was born on February 24, 1989. He currently belongs to FC Amkar Perm and plays for FC Terek Grozny which based at Grozny is managed by Rashid Rakhimov.","(FC_Terek_Grozny | ground | Grozny)
(Aleksandr_Prudnikov | currentclub | FC_Amkar_Perm)
(Aleksandr_Prudnikov | club | FC_Terek_Grozny)
(Aleksandr_Prudnikov | birthDate | 1989-02-24)
(FC_Terek_Grozny | manager | Rashid_Rakhimov)","(Aleksandr Prudnikov | birthDate | ""February 24, 1989"")
(Aleksandr Prudnikov | belongsTo | FC Amkar Perm)
(Aleksandr Prudnikov | playsFor | FC Terek Grozny)
(FC Terek Grozny | basedAt | Grozny)
(FC Terek Grozny | managedBy | Rashid Rakhimov)"
1141,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala's time zone is Pacific Daylight Time and the Pacific Standard Time Zone. The population density of Ciudad Ayala is 1604.0 and the leader of Ciudad Ayala is Juan Nolasco.,"(Ciudad_Ayala | timeZone | Pacific_Daylight_Time)
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | timeZone | Pacific_Standard_Time_Zone)
(Ciudad_Ayala | leader | Juan_Nolasco)","(Ciudad Ayala | time zone | Pacific Daylight Time)
(Ciudad Ayala | time zone | Pacific Standard Time Zone)
(Ciudad Ayala | population density | 1604.0)
(Ciudad Ayala | leader | Juan Nolasco)"
1142,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","John Roberts is a leader in the United States, where Darinka Dentcheva resides (in New Jersey), and Joe Biden is also one of the leaders,.","(United_States | leader | John_Roberts)
(Darinka_Dentcheva | residence | United_States)
(United_States | leader | Joe_Biden)
(Darinka_Dentcheva | residence | New_Jersey)","(John Roberts | type | leader)
(John Roberts | residency | United States)
(Darinka Dentcheva | residency | New Jersey)
(Darinka Dentcheva | nationality | United States)
(Joe Biden | type | leader)
(Joe Biden | residency | United States)"
1143,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brandon Carter was born in England where his alma mater is the University of Cambridge.,"(Brandon_Carter | birthPlace | England)
(Brandon_Carter | almaMater | University_of_Cambridge)","(""Brandon Carter"" | birthPlace | ""England"")
(""Brandon Carter"" | almaMater | ""University of Cambridge"")"
1144,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The epoch of 1147 Stavropolis is 31 July 2016 (JD2457600.5).,(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5)),(1147 Stavropolis | epoch | 31 July 2016 (JD2457600.5))
1145,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The ethnic groups of Israel includes Arab citizens and Israeli nationals such as Liselotte Grschebina.,"(Israel | ethnicGroup | Arab_citizens_of_Israel)
(Liselotte_Grschebina | nationality | Israel)","(""The ethnic groups of Israel"" | includes | ""Arab citizens"")
(""The ethnic groups of Israel"" | includes | ""Israeli nationals"")
(""Israeli nationals"" | includes | ""Liselotte Grschebina"")"
1146,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",“English Without Tears” is a 89-minute film written by Anatole de Grunwald and filmed by the cinematographer Bernard Knowles. It is based on a book written by Terence Rattigan.,"(English_Without_Tears | writer | Anatole_de_Grunwald)
(English_Without_Tears | cinematography | Bernard_Knowles)
(English_Without_Tears | writer | Terence_Rattigan)
(English_Without_Tears | runtime | 89.0)","(""English Without Tears"" | hasDuration | ""89 minutes"")
(""English Without Tears"" | writtenBy | ""Anatole de Grunwald"")
(""English Without Tears"" | filmedBy | ""Bernard Knowles"")
(""English Without Tears"" | isBasedOn | ""Terence Rattigan"")"
1147,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Rageous assembly line is in Detroit, Michigan.","(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | assembly | Detroit)","(Pontiac Rageous | assembly location | Detroit, Michigan)
(Detroit, Michigan | location of | Pontiac Rageous assembly line)"
1148,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Expect a Miracle was a album produced by Brian Kelly before his Afterplay album.,"(Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album))
(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))","(""Expect a Miracle"" | type | ""album"")
(""Expect a Miracle"" | ""produced by"" | ""Brian Kelly"")
(""Brian Kelly"" | ""produced"" | ""Expect a Miracle"")
(""Brian Kelly"" | ""produced"" | ""Afterplay"")
(""Afterplay"" | type | ""album"")
(""Afterplay"" | ""produced by"" | ""Brian Kelly"")"
1149,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The album Turn Me On was preceded by the album Let It Breed.,(Turn_Me_On_(album) | precededBy | Let_It_Breed),"(""Turn Me On"" | preceded by | ""Let It Breed"") 
(""Let It Breed"" | sequel | ""Turn Me On"")"
1150,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Rageous with a coupe body style was assembled in Detroit, Michigan with production ending in 1997.","(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | assembly | Detroit)
(Pontiac_Rageous | productionEndYear | 1997)
(Pontiac_Rageous | bodyStyle | Coupe)","(""Pontiac Rageous"" | ""type"" | ""Automobile"")
(""Pontiac Rageous"" | ""body style"" | ""coupe"")
(""Pontiac Rageous"" | ""location of assembly"" | ""Detroit, Michigan"")
(""Pontiac Rageous"" | ""year of production end"" | ""1997"")"
1151,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Expect a Miracle is a compilation album with a runtime of 54.56 minutes.,"(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | type | Compilation_Album)","(""Expect a Miracle"" | type | ""compilation album"")
(""Expect a Miracle"" | ""runtime"" | ""54.56 minutes"")"
1152,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Turn Me On, an album produced by Wharton Tiers with a total length of 35 minutes and 10 seconds, was followed by the album Take It Off.","(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | producer | Wharton_Tiers)
(Turn_Me_On_(album) | followedBy | Take_It_Off!)","(""Turn Me On"" | type | ""album"")
(""Turn Me On"" | producer | ""Wharton Tiers"")
(""Turn Me On"" | totalTime | ""35 minutes and 10 seconds"")
(""Turn Me On"" | followedBy | ""Take It Off"")
(""Take It Off"" | precededBy | ""Turn Me On"")"
1153,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiação Sportiva Arapiraquense, whose full name is Agremiação Sportiva Arapiraquense, plays in the Campeonato Brasileiro Série C league.","(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | fullName | ""Agremiação Sportiva Arapiraquense"")","(""Agremiação Sportiva Arapiraquense"" | ""name"" | ""Agremiação Sportiva Arapiraquense"")
(""Agremiação Sportiva Arapiraquense"" | ""playsIn"" | ""Campeonato Brasileiro Série C"")"
1154,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Artur Rasizade is the leader of Azerbaijan, where the Baku Turkish Martyrs' memorial is located.","(Azerbaijan | leader | Artur_Rasizade)
(""Baku_Turkish_Martyrs'_Memorial | location | Azerbaijan"")","(Artur Rasizade | position | ""leader"")
(Artur Rasizade | nationality | ""Azerbaijan"")
(Azerbaijan | leader | Artur Rasizade)
(Baku Turkish Martyrs' memorial | location | ""Azerbaijan"")"
1155,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Felipe Gozon is the key person of GMA New Media, a company founded on 01/01/2000 that makes mobile apps.","(GMA_New_Media | foundingDate | 2000-01-01)
(GMA_New_Media | product | Mobile_Applications)
(GMA_New_Media | keyPerson | Felipe_Gozon)","(""Felipe Gozon"" | ""jobTitle"" | ""Key Person"")
(""Felipe Gozon"" | ""worksFor"" | ""GMA New Media"")
(""GMA New Media"" | ""foundingDate"" | ""01/01/2000"")
(""GMA New Media"" | ""founder"" | ""Felipe Gozon"")
(""GMA New Media"" | ""industry"" | ""Mobile Applications"")"
1156,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Alan B. Miller Hall in Virginia was designed by Robert A. M. Stern.,"(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | location | Virginia)","(Alan B. Miller Hall | location | Virginia)
(Alan B. Miller Hall | architect | Robert A. M. Stern)
(Robert A. M. Stern | designed | Alan B. Miller Hall)"
1157,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers, starring Justin Whalin, is a 98 minute long film that grossed $30,955. The budget for creating the movie was $2,000,000.","(Super_Capers | budget | 2000000.0)
(Super_Capers | starring | Justin_Whalin)
(Super_Capers | runtime | 98.0)
(Super_Capers | gross | 30955.0)","(""Super Capers"" | ""starring"" | ""Justin Whalin"")
(""Super Capers"" | ""runtime"" | ""98 minutes"")
(""Super Capers"" | ""box office"" | ""$30,955"")
(""Super Capers"" | ""budget"" | ""$2,000,000"")"
1158,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The ISO 639-1 code for English is ""en"".",(English_language | iso6391Code | en),"(""ISO 639-1"" | ""codeForLanguage"" | ""English"")
(""English"" | ""hasISO639-1Code"" | ""en"")"
1159,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Agremiação Sportiva Arapiraquense has 17000 members and played in the Campeonato Brasileiro Série C league from Brazil on their ground Estádio Municipal Coaracy da Mata Fonseca located in Arapiraca. The Vila Nova Futebol Clube have been champions.,"(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Campeonato_Brasileiro_Série_C | country | Brazil)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(""Agremiação Sportiva Arapiraquense"" | ""hasMembers"" | ""17000"")
(""Agremiação Sportiva Arapiraquense"" | ""playedInLeague"" | ""Campeonato Brasileiro Série C"")
(""Campeonato Brasileiro Série C"" | ""locatedIn"" | ""Brazil"")
(""Agremiação Sportiva Arapiraquense"" | ""hasGround"" | ""Estádio Municipal Coaracy da Mata Fonseca"")
(""Estádio Municipal Coaracy da Mata Fonseca"" | ""locatedIn"" | ""Arapiraca"")
(""Vila Nova Futebol Clube"" | ""hasTitle"" | ""champions"")"
1160,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",McVeagh of the South Seas is produced by the Progressive Motion Picture Company with Alliance Films Corporation as the distributor.,"(McVeagh_of_the_South_Seas | producer | The_Progressive_Motion_Picture_Company)
(McVeagh_of_the_South_Seas | distributor | Alliance_Films_Corporation)","(""McVeagh of the South Seas"" | ""producer"" | ""Progressive Motion Picture Company"")
(""McVeagh of the South Seas"" | ""distributor"" | ""Alliance Films Corporation"")
(""Progressive Motion Picture Company"" | ""produces"" | ""McVeagh of the South Seas"")
(""Alliance Films Corporation"" | ""distributes"" | ""McVeagh of the South Seas"")"
1161,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aaron Turner is a post metal singer originally from Boston, who started performing in 1995 and is in the Lotus Eaters band.","(Aaron_Turner | genre | Post-metal)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Lotus_Eaters_(band))
(Aaron_Turner | instrument | Singing)
(Aaron_Turner | activeYearsStartYear | 1995)
(Aaron_Turner | origin | Boston)","(Aaron Turner | type | Post metal singer)
(Aaron Turner | birthPlace | Boston)
(Aaron Turner | activeYearsStartYear | 1995)
(Aaron Turner | memberOf | Lotus Eaters band)"
1162,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","American band the Honeymoon Killers, whose first album was titled Turn Me On, was formed partially from previous members of group Pussy Galore.","(Turn_Me_On_(album) | artist | The_Honeymoon_Killers_(American_band))
(The_Honeymoon_Killers_(American_band) | associatedBand/associatedMusicalArtist | Pussy_Galore_(band))","(""the Honeymoon Killers"" | ""nationality"" | ""American"")
(""the Honeymoon Killers"" | ""type"" | ""band"")
(""the Honeymoon Killers"" | ""madeAlbum"" | ""Turn Me On"")
(""Turn Me On"" | ""isAlbumOf"" | ""the Honeymoon Killers"")
(""Turn Me On"" | ""title"" | ""Turn Me On"")
(""the Honeymoon Killers"" | ""previousMembersOf"" | ""Pussy Galore"")
(""Pussy Galore"" | ""hasFormerMembers"" | ""the Honeymoon Killers"")"
1163,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Born on October 13, 1964, Nie Haisheng participated in Shenzhou 6 after being a fighter pilot.","(Nie_Haisheng | mission | Shenzhou_6)
(Nie_Haisheng | birthDate | 1964-10-13)
(Nie_Haisheng | occupation | Fighter_pilot)","(""Nie Haisheng"" | ""birthDate"" | ""October 13, 1964"")
(""Nie Haisheng"" | ""participatedIn"" | ""Shenzhou 6"")
(""Nie Haisheng"" | ""occupation"" | ""fighter pilot"")"
1164,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Chinabank, founded August, 16, 1920, is located in the Philippines, which is in the Philippine Standard Time Zone.","(Chinabank | location | Philippines)
(Philippines | timeZone | Philippine_Standard_Time)
(Chinabank | foundingDate | 1920-08-16)","(Chinabank | founded | ""August, 16, 1920"")
(Chinabank | located in | Philippines)
(Philippines | located in | ""Philippine Standard Time Zone"")"
1165,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",McVeagh of the South Seas is a movie directed by Gregory Allen.,(McVeagh_of_the_South_Seas | director | Gregory_Allen),"(""McVeagh of the South Seas"" | type | ""movie"")
(""McVeagh of the South Seas"" | ""directed by"" | ""Gregory Allen"")"
1166,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was born on November 18th, 1923 in New Hampshire, USA and died in California. Alan Shepard graduated from NWC with an M.A. in 1957, was a crew member of Apollo 14 and the Chief of the Astronaut Office in 1963.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | servedAsChiefOfTheAstronautOfficeIn | 1963)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | almaMater | ""NWC, M.A. 1957"")
(Alan_Shepard | mission | Apollo_14)","(Alan Shepard | birthDate | ""November 18th, 1923"")
(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | birthPlace | USA)
(Alan Shepard | deathPlace | California)
(Alan Shepard | education | NWC)
(Alan Shepard | degree | ""M.A."")
(Alan Shepard | graduationYear | 1957)
(Alan Shepard | memberOf | Apollo 14)
(Alan Shepard | position | Chief of the Astronaut Office)
(Alan Shepard | year | 1963)"
1167,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nord is a post-metal album by The Year of No Light, which was released by Crucial Blast record label on September 6, 2006.","(Nord_(Year_of_No_Light_album) | genre | Post-metal)
(Nord_(Year_of_No_Light_album) | recordLabel | Crucial_Blast)
(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)","(""Nord"" | ""type"" | ""post-metal album"")
(""Nord"" | ""by"" | ""The Year of No Light"")
(""Nord"" | ""release date"" | ""September 6, 2006"")
(""Nord"" | ""released by"" | ""Crucial Blast"")
(""The Year of No Light"" | ""released"" | ""Nord"")
(""Crucial Blast"" | ""released"" | ""Nord"")"
1168,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The length of ALCO RS-3 is 17068.8 millimetres and it has a four-stroke engine.,"(ALCO_RS-3 | engine | Four-stroke_engine)
(ALCO_RS-3 | length | 17068.8 (millimetres))","(""ALCO RS-3"" | ""length"" | ""17068.8 millimetres"")
(""ALCO RS-3"" | ""has"" | ""four-stroke engine"")"
1169,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Located in Alcobendas and operated by ENAIRE, the Adolfo Suarez Madrid-Barajas airport is 610.0 metres above sea level and has a runway length of 3500 and is named 14L/32R.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayName | ""14L/32R"")","(""Adolfo Suarez Madrid-Barajas airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suarez Madrid-Barajas airport"" | ""operator"" | ""ENAIRE"")
(""Adolfo Suarez Madrid-Barajas airport"" | ""elevationInMetres"" | 610.0)
(""Adolfo Suarez Madrid-Barajas airport"" | ""runwayLength"" | 3500)
(""Adolfo Suarez Madrid-Barajas airport"" | ""runwayName"" | ""14L/32R"")"
1170,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bananaman was a BBC show which first aired on 10/03/1983. Bill Oddie was one of the stars of the show whose broadcaster is based at Broadcasting House, London.","(BBC | city | Broadcasting_House)
(Bananaman | starring | Bill_Oddie)
(Bananaman | broadcastedBy | BBC)
(Bananaman | firstAired | ""1983-10-03"")","(""Bananaman"" | ""type"" | ""Show"")
(""Bananaman"" | ""airedOn"" | ""10/03/1983"")
(""Bananaman"" | ""broadcaster"" | ""BBC"")
(""BBC"" | ""location"" | ""Broadcasting House, London"")
(""Bananaman"" | ""starring"" | ""Bill Oddie"")
(""Bill Oddie"" | ""isStarOf"" | ""Bananaman"")"
1171,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The film Super Capers (98 minutes) was edited by Stacy Katzman; it stars Tom Sizemore, and Michael Rooker.","(Super_Capers | editing | Stacy_Katzman)
(Super_Capers | starring | Michael_Rooker)
(Super_Capers | starring | Tom_Sizemore)
(Super_Capers | runtime | 98.0)","(""Super Capers"" | ""editor"" | ""Stacy Katzman"")
(""Super Capers"" | ""duration in minutes"" | 98)
(""Super Capers"" | ""star"" | ""Tom Sizemore"")
(""Super Capers"" | ""star"" | ""Michael Rooker"")"
1172,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","John N. Dempsey was successor to Abraham A. Ribicoff, the husband of Ruth Ribicoff. Abraham A. Ribicoff was born in the USA where African Americans are an ethnic group.","(Abraham_A._Ribicoff | spouse | ""Ruth Ribicoff"")
(Abraham_A._Ribicoff | successor | John_N._Dempsey)
(Abraham_A._Ribicoff | birthPlace | United_States)
(United_States | ethnicGroup | African_Americans)","(John N. Dempsey | successor to | Abraham A. Ribicoff)
(Abraham A. Ribicoff | spouse | Ruth Ribicoff)
(Abraham A. Ribicoff | birthPlace | USA)
(African Americans | ethnicGroupIn | USA)"
1173,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","In 2000, The 11th Mississippi Infantry Monument was erected in Adams County, the municipality of Gettysburg, Pennsylvania.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | municipality | Gettysburg,_Pennsylvania)","(""The 11th Mississippi Infantry Monument"" | ""date of establishment"" | ""2000"")
(""The 11th Mississippi Infantry Monument"" | ""location"" | ""Adams County"")
(""The 11th Mississippi Infantry Monument"" | ""location"" | ""Gettysburg"")
(""The 11th Mississippi Infantry Monument"" | ""location"" | ""Pennsylvania"")
(""Gettysburg"" | ""is in"" | ""Adams County"")
(""Gettysburg"" | ""is in"" | ""Pennsylvania"")
(""Gettysburg"" | ""type"" | ""municipality"")
(""Adams County"" | ""is in"" | ""Pennsylvania"")"
1174,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nie Haisheng (born October 13, 1964) was part of the Shenzhou 6 and Shenzhou 10 missions.","(Nie_Haisheng | mission | Shenzhou_10)
(Nie_Haisheng | mission | Shenzhou_6)
(Nie_Haisheng | birthDate | 1964-10-13)","(Nie Haisheng | birthDate | October 13, 1964)
(Nie Haisheng | partOf | Shenzhou 6)
(Nie Haisheng | partOf | Shenzhou 10)"
1175,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",In the USA African Americans are an ethnic group. Abraham A. Ribicoff was born in the USA and later died there in New York City after being married to Ruth Ribicoff during his life.,"(Abraham_A._Ribicoff | spouse | ""Ruth Ribicoff"")
(Abraham_A._Ribicoff | birthPlace | United_States)
(Abraham_A._Ribicoff | deathPlace | New_York_City)
(United_States | ethnicGroup | African_Americans)","1. (African Americans | type | ethnic group)
2. (African Americans | location | USA)
3. (Abraham A. Ribicoff | place of birth | USA)
4. (Abraham A. Ribicoff | place of death | New York City)
5. (Abraham A. Ribicoff | spouse | Ruth Ribicoff)
6. (Ruth Ribicoff | spouse | Abraham A. Ribicoff)
7. (USA | contains | African Americans)
8. (USA | contains | Abraham A. Ribicoff)
9. (New York City | contains | Abraham A. Ribicoff)"
1176,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Binali Yıldırım was a leader of Turkey.,(Turkey | leader | Binali_Yıldırım),"(""Binali Yıldırım"" | ""type"" | ""Person"")
(""Binali Yıldırım"" | ""occupation"" | ""Leader"")
(""Binali Yıldırım"" | ""country"" | ""Turkey"")"
1177,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Fellowship of the Ring's author, J.R.R. Tolkien, was born on January 3rd, 1892.","(The_Fellowship_of_the_Ring | author | J._R._R._Tolkien)
(J._R._R._Tolkien | birthDate | 1892-01-03)","(""The Fellowship of the Ring"" | ""author"" | ""J.R.R. Tolkien"")
(""J.R.R. Tolkien"" | ""birthDate"" | ""1892-01-03"")"
1178,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The alma mater of Brandon Carter is the University of Cambridge, best known for its research.","(Brandon_Carter | almaMater | University_of_Cambridge)
(University_of_Cambridge | type | Research_university)","(""Brandon Carter"" | ""alma mater"" | ""University of Cambridge"")
(""University of Cambridge"" | ""known for"" | ""research"")"
1179,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The novel 1634: The Bavarian Crisis, which was written by Eric Flint, preceded Ring of Fire II.","(1634:_The_Bavarian_Crisis | followedBy | Ring_of_Fire_II)
(1634:_The_Bavarian_Crisis | author | Eric_Flint)","(""1634: The Bavarian Crisis"" | ""author"" | ""Eric Flint"")
(""Eric Flint"" | ""wrote"" | ""1634: The Bavarian Crisis"")
(""1634: The Bavarian Crisis"" | ""precedes"" | ""Ring of Fire II"")
(""Ring of Fire II"" | ""is preceded by"" | ""1634: The Bavarian Crisis"")"
1180,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Darinka Dentcheva lives in New Jersey where the main language spoken is English.,"(Darinka_Dentcheva | residence | New_Jersey)
(New_Jersey | language | English_language)","(""Darinka Dentcheva"" | ""livesIn"" | ""New Jersey""),
(""New Jersey"" | ""language"" | ""English"")"
1181,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Tennis is one of the sports offered at the Acharya Institute of Technology, designated as the ‘Technical Campus’ by the All India Council for Technical Education in Mumbai. This institute is located at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090. Its academic staff of over 500 employees is directed by Dr. G. P. Prabhukumar. The institute is also affiliated with the Visvesvaraya Technological University.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(All_India_Council_for_Technical_Education | location | Mumbai)
(Acharya_Institute_of_Technology | director | ""Dr. G. P. Prabhukumar"")
(Acharya_Institute_of_Technology | academicStaffSize | ""~500"")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | sportsOffered | Tennis)
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)","(Acharya Institute of Technology | type | Technical Campus)
(Acharya Institute of Technology | location | Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090)
(Acharya Institute of Technology | offer | Tennis)
(Acharya Institute of Technology | directedBy | Dr. G. P. Prabhukumar)
(Acharya Institute of Technology | staffSize | over 500)
(Acharya Institute of Technology | affiliation | Visvesvaraya Technological University)
(All India Council for Technical Education | designation | Acharya Institute of Technology)
(Dr. G. P. Prabhukumar | jobTitle | director)
(Dr. G. P. Prabhukumar | worksFor | Acharya Institute of Technology)
(Visvesvaraya Technological University | affiliate | Acharya Institute of Technology)"
1182,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nord is a post-metal album created by the band Year of No Light and has a runtime of 58 minutes and 41 seconds.,"(Nord_(Year_of_No_Light_album) | genre | Post-metal)
(Nord_(Year_of_No_Light_album) | runtime | 58.41)","(""Nord"" | ""type"" | ""post-metal album"")
(""Nord"" | ""creator"" | ""Year of No Light"")
(""Nord"" | ""runtime"" | ""58 minutes and 41 seconds"")"
1183,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Rageous was a car with a coupe body style, manufactured by Pontiac. On October 31, 2010 the Pontiac brand became extinct.","(Pontiac_Rageous | bodyStyle | Coupe)
(Pontiac_Rageous | manufacturer | Pontiac)
(Pontiac | extinctionDate | 2010-10-31)","(""Pontiac Rageous"" | ""type"" | ""car""),
(""Pontiac Rageous"" | ""manufacturer"" | ""Pontiac""),
(""Pontiac Rageous"" | ""body style"" | ""coupe""),
(""Pontiac"" | ""product"" | ""Pontiac Rageous""),
(""Pontiac"" | ""date of extinction"" | ""October 31, 2010"")"
1184,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Agremiacao Sportiva Arapiraquense (has 17000 members) play in the Campeonato Brasileiro Serie C league and played in the 2015 season. Their ground is Estadio Municipal Coaracy da Mata Fonseca located in Arapiraca.,"(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | season | 2015)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(""Agremiacao Sportiva Arapiraquense"" | ""hasMember"" | ""17000"")
(""Agremiacao Sportiva Arapiraquense"" | ""participatesIn"" | ""Campeonato Brasileiro Serie C"")
(""Agremiacao Sportiva Arapiraquense"" | ""participatedIn"" | ""2015 season"")
(""Agremiacao Sportiva Arapiraquense"" | ""hasHomeGround"" | ""Estadio Municipal Coaracy da Mata Fonseca"")
(""Estadio Municipal Coaracy da Mata Fonseca"" | ""locatedIn"" | ""Arapiraca"")"
1185,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Movie actor, Harry Carey, born in 1878, starred in McVeagh of the South Seas, IMDb ID 0004319.","(McVeagh_of_the_South_Seas | imdbId | 0004319)
(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878))","(""Harry Carey"" | ""type"" | ""Movie actor""),
(""Harry Carey"" | ""birthDate"" | 1878),
(""Harry Carey"" | ""starredIn"" | ""McVeagh of the South Seas""),
(""McVeagh of the South Seas"" | ""type"" | ""Movie""),
(""McVeagh of the South Seas"" | ""starring"" | ""Harry Carey""),
(""McVeagh of the South Seas"" | ""IMDbID"" | ""0004319"")"
1186,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Turkish Martyrs' memorial is located in Baku, Azerbaijan and the designers were Huseyin Butuner and Hilmi Guner.","(Baku_Turkish_Martyrs\'_Memorial | designer | ""Hüseyin Bütüner and Hilmi Güner"")
(""Baku_Turkish_Martyrs'_Memorial | location | Azerbaijan"")","(""Turkish Martyrs' memorial"" | ""location"" | ""Baku, Azerbaijan"")
(""Turkish Martyrs' memorial"" | ""designer"" | ""Huseyin Butuner"")
(""Turkish Martyrs' memorial"" | ""designer"" | ""Hilmi Guner"")"
1187,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina was an Israeli professional photographer who was born in the German Empire in Karlsruhe and attended the school of Applied Arts in Stuttgart.,"(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | nationality | Israel)
(Liselotte_Grschebina | birthPlace | German_Empire)
(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)
(Liselotte_Grschebina | professionalField | Photographer)","(""Liselotte Grschebina"" | ""type"" | ""Person"")
(""Liselotte Grschebina"" | ""type"" | ""Professional photographer"")
(""Liselotte Grschebina"" | ""citizenship"" | ""Israel"")
(""Liselotte Grschebina"" | ""place of birth"" | ""German Empire"")
(""Liselotte Grschebina"" | ""city of birth"" | ""Karlsruhe"")
(""Liselotte Grschebina"" | ""school attended"" | ""School of Applied Arts Stuttgart"")
(""School of Applied Arts Stuttgart"" | ""type"" | ""School"")
(""School of Applied Arts Stuttgart"" | ""location"" | ""Stuttgart"")
(""German Empire"" | ""type"" | ""Country"")
(""Karlsruhe"" | ""type"" | ""City"")
(""Stuttgart"" | ""type"" | ""City"")
(""Israel"" | ""type"" | ""Country"")
(""Professional photographer"" | ""type"" | ""Occupation"")"
1188,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Harry Carey, who was born in 1878, had a role in the movie McVeagh of the South Seas, which has an IMDb id of 0004319.","(McVeagh_of_the_South_Seas | imdbId | 0004319)
(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878))","(""Harry Carey"" | ""type"" | ""Person"")
(""Harry Carey"" | ""birthYear"" | ""1878"")
(""McVeagh of the South Seas"" | ""type"" | ""Movie"")
(""McVeagh of the South Seas"" | ""IMDbId"" | ""0004319"")
(""Harry Carey"" | ""hasRoleIn"" | ""McVeagh of the South Seas"")"
1189,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bootleg Series Volume 1: The Quine Tapes was recorded through Polydor Records.,(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Polydor_Records),"(""Bootleg Series Volume 1: The Quine Tapes"" | ""was recorded through"" | ""Polydor Records"")"
1190,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","It's Great to Be Young was edited and musically composed by Max Benedict and Louis Levy. Released in 1956 and only lasting 94 minutes, it had the honor of having Gilbert Taylor as the cinematographer.","(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | editing | Max_Benedict)
(""It's_Great_to_Be_Young_(1956_film) | musicComposer | Louis_Levy)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor"")","(""It's Great to Be Young"" | ""editor"" | ""Max Benedict"")
(""It's Great to Be Young"" | ""composer"" | ""Louis Levy"")
(""It's Great to Be Young"" | ""release year"" | ""1956"")
(""It's Great to Be Young"" | ""duration"" | ""94 minutes"")
(""It's Great to Be Young"" | ""cinematographer"" | ""Gilbert Taylor"")"
1191,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The United States Air Force is the operating organisation for Al Asad airbase, which has a runway that is 3990.0 long.","(Al_Asad_Airbase | operatingOrganisation | United_States_Air_Force)
(Al_Asad_Airbase | runwayLength | 3990.0)","(""United States Air Force"" | ""isOperatingOrganisationFor"" | ""Al Asad airbase""),
(""Al Asad airbase"" | ""hasRunway"" | ""Runway""),
(""Runway"" | ""hasLength"" | ""3990.0"")"
1192,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Bedford Aerodrome serves the Bedford Autodrome and is operated by MotorSport Vision.,"(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | cityServed | Bedford_Autodrome)","(""Bedford Aerodrome"" | ""serves"" | ""Bedford Autodrome""),
(""Bedford Aerodrome"" | ""is operated by"" | ""MotorSport Vision""),
(""Bedford Autodrome"" | ""is served by"" | ""Bedford Aerodrome""),
(""MotorSport Vision"" | ""operates"" | ""Bedford Aerodrome"")"
1193,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology, affiliated with the Visvesvaraya Technological University, is located at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090 in the Karnataka state.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | city | Bangalore)
(Acharya_Institute_of_Technology | state | Karnataka)","1. (Acharya Institute of Technology | affiliatedWith | Visvesvaraya Technological University)
2. (Acharya Institute of Technology | locatedAt | Soldevanahalli)
3. (Acharya Institute of Technology | locatedOn | Acharya Dr. Sarvapalli Radhakrishnan Road)
4. (Acharya Institute of Technology | locatedOn | Hessarghatta Main Road)
5. (Acharya Institute of Technology | locatedIn | Bangalore – 560090)
6. (Acharya Institute of Technology | locatedIn | Karnataka state)
7. (Soldevanahalli | partOf | Bangalore – 560090)
8. (Soldevanahalli | locatedIn | Karnataka state)
9. (Acharya Dr. Sarvapalli Radhakrishnan Road | locatedIn | Bangalore – 560090)
10. (Acharya Dr. Sarvapalli Radhakrishnan Road | locatedIn | Karnataka state)
11. (Hessarghatta Main Road | locatedIn | Bangalore – 560090)
12. (Hessarghatta Main Road | locatedIn | Karnataka state)"
1194,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Expect a Miracle, a instrumental music genre is an easy listening album produced by Brian Kelly with a runtime of 54.56. It was followed by Brian Kelly's Afterplay album.","(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | genre | Instrumental_music)
(Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Easy_listening)","(""Expect a Miracle"" | type | ""instrumental music genre"")
(""Expect a Miracle"" | genre | ""easy listening"")
(""Expect a Miracle"" | producer | ""Brian Kelly"")
(""Expect a Miracle"" | runtime | ""54.56"")
(""Brian Kelly"" | produced | ""Expect a Miracle"")
(""Afterplay"" | preceded by | ""Expect a Miracle"")
(""Brian Kelly"" | produced | ""Afterplay"")"
1195,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The University of Burgundy has 27400 students and the number of doctoral students in the University is 1299.,"(University_of_Burgundy | numberOfStudents | 27400)
(University_of_Burgundy | numberOfDoctoralStudents | 1299)","(""University of Burgundy"" | ""hasTotalStudents"" | ""27400"")
(""University of Burgundy"" | ""hasDoctoralStudents"" | ""1299"")"
1196,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Stacy Katzman edited Super Capers.,(Super_Capers | editing | Stacy_Katzman),"(""Stacy Katzman"" | ""edited"" | ""Super Capers"")"
1197,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva resides in the US state of New Jersey. The United States has a total area of 9833520000000, and an ethnic group within its borders are Native Americans.","(Darinka_Dentcheva | citizenship | United_States)
(United_States | ethnicGroup | Native_American)
(Darinka_Dentcheva | residence | New_Jersey)
(United_States | areaTotal | 9833520000000.0)","(""Darinka Dentcheva"" | ""residence"" | ""New Jersey"")
(""New Jersey"" | ""country"" | ""United States"")
(""United States"" | ""totalArea"" | 9833520000000)
(""United States"" | ""hasEthnicGroup"" | ""Native Americans"")"
1198,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala is in Mexico and is a part of Morelos. Morelos has a UTC offset of -6.,"(Morelos | utcOffset | −6)
(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | country | Mexico)","(""Ciudad Ayala"" | ""location"" | ""Mexico"")
(""Ciudad Ayala"" | ""partOf"" | ""Morelos"")
(""Morelos"" | ""utcOffset"" | ""-6"")"
1199,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Fellowship of the Ring was written by J.R.R. Tolkien.,(The_Fellowship_of_the_Ring | author | J._R._R._Tolkien),"(""The Fellowship of the Ring"" | ""author"" | ""J.R.R. Tolkien"")"
1200,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The length of Super Capers is 98.0 minutes.,(Super_Capers | runtime | 98.0),(Super Capers | length | 98.0 minutes)
1201,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Brandon Carter works professionally in the field of general relativity with Dennis William Sciama, who is Brandon’s doctoral advisor. Brandon is known for both the Carter constant and the No-hair theorem.","(Brandon_Carter | professionalField | General_relativity)
(Brandon_Carter | knownFor | Carter_constant)
(Brandon_Carter | knownFor | No-hair_theorem)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)","(Brandon Carter | works professionally in field of | general relativity)
(Brandon Carter | works with | Dennis William Sciama)
(Dennis William Sciama | is | doctoral advisor of Brandon Carter)
(Brandon Carter | is known for | Carter constant)
(Brandon Carter | is known for | No-hair theorem)"
1202,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","John Mills, born January 1, 1908, stars in the 1956 film It's Great to Be Young.","(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(John_Mills | birthDate | 1908-01-01)","(""John Mills"" | ""birthDate"" | ""January 1, 1908"")
(""John Mills"" | ""starsIn"" | ""It's Great to Be Young"")
(""It's Great to Be Young"" | ""releaseYear"" | ""1956"")
(""It's Great to Be Young"" | ""starActor"" | ""John Mills"")"
1203,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Mermaid a pop rock song by the band Train is an example of the reggae genre. The other derivatives of reggae genre are Dub music and Hip Hop.,"(Mermaid_(Train_song) | genre | Pop_rock)
(Reggae | derivative | Dub_music)
(Mermaid_(Train_song) | genre | Reggae)
(Reggae | derivative | Hip_hop_music)","(""Mermaid"" | ""type"" | ""pop rock song"")
(""Mermaid"" | ""performer"" | ""Train"")
(""Mermaid"" | ""exampleOf"" | ""reggae genre"")
(""Dub music"" | ""derivativeOf"" | ""reggae genre"")
(""Hip Hop"" | ""derivativeOf"" | ""reggae genre"")"
1204,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brandon Carter's doctoral advisor was Dennis William Sciama.,(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama),(Brandon Carter | doctoralAdvisor | Dennis William Sciama)
1205,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy has 16800 undergraduates, 2900 staff members and 9400 postgrads. It is located in the French city of Dijon, whose postal code is 21000.","(University_of_Burgundy | city | Dijon)
(Dijon | postalCode | 21000)
(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfPostgraduateStudents | 9400)","(""University of Burgundy"" | ""has numberOfUndergraduates"" | 16800)
(""University of Burgundy"" | ""has number of postgraduates"" | 9400)
(""University of Burgundy"" | ""has number of staff members"" | 2900)
(""University of Burgundy"" | ""is located in"" | ""Dijon"")
(""Dijon"" | ""is located in"" | ""France"")
(""Dijon"" | ""has postalCode"" | 21000)"
1206,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The total population of Mexico is 119,530,753.",(Mexico | populationTotal | 119530753),"(Mexico | totalPopulation | 119,530,753)"
1207,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Dub music is a musical style derivative of reggae.,(Reggae | derivative | Dub_music),"(""Dub music"" | type | ""Musical style"")
(""Dub music"" | derivative of | ""reggae"")"
1208,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","NWC graduate (M.A., 1957) Alan Shepard was born in New Hampshire on November 18, 1923.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | almaMater | ""NWC, M.A. 1957"")","(Alan Shepard | graduate of | NWC)
(Alan Shepard | degree | M.A.)
(Alan Shepard | graduation year | 1957)
(Alan Shepard | birthplace | New Hampshire)
(Alan Shepard | birthdate | November 18, 1923)"
1209,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Kingdom of England was dissolved in the year 1707.,(Kingdom_of_England | dissolutionYear | 1707),"(""Kingdom of England"" | ""year of dissolution"" | ""1707"")"
1210,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The postal code for Thurleigh is MK44.,(Thurleigh | postalCode | MK44),"(Thurleigh | postalCode | ""MK44"")"
1211,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The instrumental Brian Kelly album Expect a Miracle was preceded by his album Pools of Light.,"(Expect_a_Miracle | precededBy | Pools_of_Light_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Instrumental_music)","(""Brian Kelly"" | ""type"" | ""instrumental"")
(""Expect a Miracle"" | ""creator"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""type"" | ""album"")
(""Pools of Light"" | ""creator"" | ""Brian Kelly"")
(""Pools of Light"" | ""type"" | ""album"")
(""Expect a Miracle"" | ""precededBy"" | ""Pools of Light"")"
1212,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The album Turn Me On is preceded by the album Let It Breed which runs 35.1 minutes produced by Wharton Tiers.,"(Turn_Me_On_(album) | precededBy | Let_It_Breed)
(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | producer | Wharton_Tiers)","(""Turn Me On"" | preceded by | ""Let It Breed"")
(""Let It Breed"" | runTime | 35.1 minutes)
(""Let It Breed"" | produced by | ""Wharton Tiers"")"
1213,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ray Griggs is a director born in 1974.,(Ray_Griggs_(director) | birthYear | 1974),"(""Ray Griggs"" | ""type"" | ""Person""),
(""Ray Griggs"" | ""type"" | ""Director""),
(""Ray Griggs"" | ""birthYear"" | ""1974"")"
1214,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The full name of the Philippines is the Republic of the Philippines.,"(Philippines | longName | ""Republic of the Philippines"")","(""the Philippines"" | name | ""the Republic of the Philippines"")"
1215,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy who was born in Reşadiye , has his residence in Istanbul. Istanbul metro area is 5,343 square kilometers and its time zone is Eastern European Summer Time.","(Istanbul | areaMetro | 5343000000.0)
(Nurhan_Atasoy | birthPlace | Reşadiye)
(Nurhan_Atasoy | residence | Istanbul)
(Istanbul | timeZone | Eastern_European_Summer_Time)","(Nurhan Atasoy | place of birth | Reşadiye )
(Nurhan Atasoy | has residence | Istanbul) 
(Nurhan Atasoy | type | Person)
(Istanbul | type | Place) 
(Istanbul | has area | 5343 square kilometers) 
(Istanbul | has time zone | Eastern European Summer Time)
(Reşadiye | type | Place)"
1216,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Estádio Municipal Coaracy da Mata Fonseca is located in Arapiraca & is the name of the ground of Agremiação Sportiva Arapiraquense (nicknamed Alvinegro), which played in the Campeonato Brasileiro Série C league. They have 17,000 members. Vila Nova Futebol Clube have been champions of Campeonato Brasileiro Série C from Brazil.","(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Campeonato_Brasileiro_Série_C | country | Brazil)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | nickname | ""\'\'Alvinegro"")
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(""Estádio Municipal Coaracy da Mata Fonseca"" | location | ""Arapiraca"")
(""Estádio Municipal Coaracy da Mata Fonseca"" | groundOf | ""Agremiação Sportiva Arapiraquense"")
(""Agremiação Sportiva Arapiraquense"" | nickname | ""Alvinegro"")
(""Agremiação Sportiva Arapiraquense"" | playedIn | ""Campeonato Brasileiro Série C"")
(""Agremiação Sportiva Arapiraquense"" | hasMembers | 17000)
(""Vila Nova Futebol Clube"" | championsOf | ""Campeonato Brasileiro Série C"")
(""Vila Nova Futebol Clube"" | locatedIn | ""Brazil"")"
1217,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aaron Turner plays the electric guitar in the post-metal band, Twilight.","(Aaron_Turner | genre | Post-metal)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))
(Aaron_Turner | instrument | Electric_guitar)","(Aaron Turner | plays instrument | electric guitar)
(Aaron Turner | is member of | Twilight)
(Twilight | field | post-metal)
(Twilight | has member | Aaron Turner)
(electric guitar | is played by | Aaron Turner)"
1218,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Nord was released on September 6, 2006, is an album produced by Year of No Light, and was released on the E-Vinyl record label with the Crucial Blast record label. Live at Roadburn 2008 was preceded by the album Nord.","(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | recordLabel | Crucial_Blast)
(Nord_(Year_of_No_Light_album) | recordLabel | E-Vinyl)","(Nord | releaseDate | September 6, 2006)
(Nord | producer | Year of No Light)
(Nord | recordLabel | E-Vinyl record label)
(Nord | recordLabel | Crucial Blast record label)
(Live at Roadburn 2008 | precededBy | Nord)"
1219,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nie Haisheng was born on October 13th 1964, he worked as a fighter pilot and was part of the Shenzhou 6 and Shenzhou 10 missions.","(Nie_Haisheng | mission | Shenzhou_10)
(Nie_Haisheng | mission | Shenzhou_6)
(Nie_Haisheng | birthDate | 1964-10-13)
(Nie_Haisheng | occupation | Fighter_pilot)","(""Nie Haisheng"" | ""birthDate"" | ""October 13th 1964"")
(""Nie Haisheng"" | ""hasProfession"" | ""fighter pilot"")
(""Nie Haisheng"" | ""memberOf"" | ""Shenzhou 6"")
(""Nie Haisheng"" | ""memberOf"" | ""Shenzhou 10"")"
1220,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was born in Karlsruhe, German Empire, on May 2nd, 1908 and died in Israel on June 14th, 1994. She was an Israeli national and attended the school of Applied Arts in Stuttgart.","(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | deathPlace | Israel)
(Liselotte_Grschebina | nationality | Israel)
(Liselotte_Grschebina | birthPlace | German_Empire)
(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)","(Liselotte Grschebina | birthPlace | Karlsruhe, German Empire)
(Liselotte Grschebina | birthDate | May 2nd, 1908)
(Liselotte Grschebina | deathPlace | Israel)
(Liselotte Grschebina | deathDate | June 14th, 1994)
(Liselotte Grschebina | nationality | Israeli)
(Liselotte Grschebina | alumni | the school of Applied Arts in Stuttgart)"
1221,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The birthdate of Anatole de Grunwald is 25th of December, 1910.",(Anatole_de_Grunwald | birthDate | 1910-12-25),"(Anatole de Grunwald | birthdate | ""25th of December, 1910"")"
1222,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bananaman (starring Graeme Garden) is a show created by Steve Bright for broadcast by the BBC.,"(Bananaman | creator | Steve_Bright)
(Bananaman | broadcastedBy | BBC)
(Bananaman | starring | Graeme_Garden)","(""Bananaman"" | ""starring"" | ""Graeme Garden"")
(""Bananaman"" | ""created by"" | ""Steve Bright"")
(""Bananaman"" | ""broadcast by"" | ""BBC"")
(""Steve Bright"" | ""created for broadcast by"" | ""BBC"")"
1223,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",John Mills stars in the movie It’s Great to be Young. The movie is 94 minutes and was made in 1956. The director is Cyril Frankel while the cinematographer is Gilbert Taylor.,"(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor)
(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | director | Cyril_Frankel"")","(""John Mills"" | ""starsIn"" | ""It’s Great to be Young"")
(""It’s Great to be Young"" | ""hasActor"" | ""John Mills"")
(""It’s Great to be Young"" | ""length"" | ""94 minutes"")
(""It’s Great to be Young"" | ""releaseYear"" | ""1956"")
(""It’s Great to be Young"" | ""hasDirector"" | ""Cyril Frankel"")
(""Cyril Frankel"" | ""directs"" | ""It’s Great to be Young"")
(""It’s Great to be Young"" | ""hasCinematographer"" | ""Gilbert Taylor"")
(""Gilbert Taylor"" | ""isCinematographerOf"" | ""It’s Great to be Young"")"
1224,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The state of Morelos is in Mexico.,(Morelos | country | Mexico),(Morelos | is in | Mexico)
1225,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The current leader of Turkey is Binali Yildirim.,(Turkey | leader | Binali_Yıldırım),"(""Turkey"" | ""leader"" | ""Binali Yildirim"")
(""Binali Yildirim"" | ""positionHeld"" | ""Leader of Turkey"")"
1226,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nie Haisheng was born on 10/13/1964, he was a crew member on Shenzhou 6 and took part in the Shenzhou 10 mission.","(Nie_Haisheng | mission | Shenzhou_10)
(Nie_Haisheng | mission | Shenzhou_6)
(Nie_Haisheng | birthDate | 1964-10-13)","(""Nie Haisheng"" | ""birthDate"" | ""10/13/1964"")
(""Nie Haisheng"" | ""crewMemberOn"" | ""Shenzhou 6"")
(""Nie Haisheng"" | ""participatedIn"" | ""Shenzhou 10"")"
1227,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The leader of Turkey is Recep Tayyip Erdoğan.,(Turkey | leader | Recep_Tayyip_Erdoğan),"(""Turkey"" | ""leader"" | ""Recep Tayyip Erdoğan"")"
1228,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Lady Anne Monson’s nationality was with the Kingdom of England but her residence was in India. One of the leadership titles in India is Chief Justice and the total area of India is 3287590000000.0.,"(Lady_Anne_Monson | nationality | Kingdom_of_England)
(India | areaTotal | 3287590000000.0)
(Lady_Anne_Monson | residence | India)
(India | leaderTitle | Chief Justice)","('Lady Anne Monson', 'nationality', 'Kingdom of England')
('Lady Anne Monson', 'residence', 'India')
('India', 'leadershipTitle', 'Chief Justice')
('India', 'totalArea', '3287590000000.0')"
1229,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Polydor Records' distributing label is Universal Music Group.,(Polydor_Records | distributingLabel | Universal_Music_Group),"(""Polydor Records"" | ""distributing label"" | ""Universal Music Group"")"
1230,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","McVeagh of the South Seas is a film produced by the Progressive Motion Picture Company with IMDb ID of 0004319. The film is directed by Cyril Bruce and Harry Carey. Harry Carey, born 1878, is also the writer and starring actor in the film.","(McVeagh_of_the_South_Seas | imdbId | 0004319)
(McVeagh_of_the_South_Seas | director | Cyril_Bruce)
(McVeagh_of_the_South_Seas | director | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | writer | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | producer | The_Progressive_Motion_Picture_Company)","(""McVeagh of the South Seas"" | ""producer"" | ""Progressive Motion Picture Company"")
(""McVeagh of the South Seas"" | ""IMDb_ID"" | ""0004319"")
(""McVeagh of the South Seas"" | ""director"" | ""Cyril Bruce"")
(""McVeagh of the South Seas"" | ""director"" | ""Harry Carey"")
(""Harry Carey"" | ""birthDate"" | ""1878"")
(""McVeagh of the South Seas"" | ""writer"" | ""Harry Carey"")
(""McVeagh of the South Seas"" | ""starring"" | ""Harry Carey"")"
1231,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The album Nord by Year of No Light was produced by the band.,(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light),"(""Nord"" | ""producer"" | ""Year of No Light""),
(""Nord"" | ""creator"" | ""Year of No Light""),
(""Nord"" | ""album by"" | ""Year of No Light""),
(""Year of No Light"" | ""produced album"" | ""Nord""),
(""Year of No Light"" | ""creation"" | ""Nord"")"
1232,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Expect A Miracle, of instrumental music genre is a easy listening genre with runtime of 54.56 minutes was produced by Brian Kelly. It is followed by the album Afterplay.","(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | genre | Instrumental_music)
(Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Easy_listening)","(""Expect A Miracle"" | rdf:type | ""Album"")
(""Expect A Miracle"" | dbo:genre | ""Instrumental"")
(""Expect A Miracle"" | dbo:genre | ""Easy Listening"")
(""Expect A Miracle"" | dbo:runtime | 54.56)
(""Expect A Miracle"" | dbo:producer | ""Brian Kelly"")
(""Expect A Miracle"" | dbo:nextAlbum | ""Afterplay"")"
1233,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Starring Adam West, Super Capers is an English language movie which had a budget of of 2000000.0 dollars. It has a duration of 98 minutes and grossed $30,955 at the box office.","(Super_Capers | language | English_language)
(Super_Capers | starring | Adam_West)
(Super_Capers | budget | 2000000.0)
(Super_Capers | runtime | 98.0)
(Super_Capers | gross | 30955.0)","(""Super Capers"" | ""starring"" | ""Adam West""),
(""Super Capers"" | ""language"" | ""English""),
(""Super Capers"" | ""budget"" | 2000000.0),
(""Super Capers"" | ""duration"" | 98),
(""Super Capers"" | ""grossed"" | ""$30,955"")"
1234,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument's, which was established in 2000, falls under the category of Contributing property. and is situated in Adams County, Pennsylvania. Southeast of Adams County, Pennsylvania is Carroll County, Maryland.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""11th Mississippi Infantry Monument"" | ""establishmentYear"" | 2000)
(""11th Mississippi Infantry Monument"" | ""type"" | ""Contributing property"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Adams County, Pennsylvania"")
(""Adams County, Pennsylvania"" | ""affiliatedRegion"" | ""Carroll County, Maryland"")
(""Carroll County, Maryland"" | ""locationRelation"" | ""Southeast of Adams County, Pennsylvania"")"
1235,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Grossing $30,955.00, the film, ""Super Capers,"" starring Justin Whalin and written by Ray Griggs, was distributed by Roadside Attractions and Lionsgate.","(Super_Capers | distributor | Roadside_Attractions)
(Super_Capers | distributor | Lionsgate)
(Super_Capers | starring | Justin_Whalin)
(Super_Capers | writer | Ray_Griggs_(director))
(Super_Capers | gross | 30955.0)","(""Super Capers"" | grossing | ""$30,955.00"")
(""Super Capers"" | starring | ""Justin Whalin"")
(""Super Capers"" | written by | ""Ray Griggs"")
(""Super Capers"" | distributed by | ""Roadside Attractions"")
(""Super Capers"" | distributed by | ""Lionsgate"")"
1236,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Danielle Harris is starring in Super Capers, a film with a running time of 98 minutes.","(Super_Capers | starring | Danielle_Harris)
(Super_Capers | runtime | 98.0)","(Danielle Harris | starringIn | Super Capers)
(Super Capers | hasActor | Danielle Harris)
(Super Capers | isFilm | true)
(Super Capers | runningTime | 98 minutes)"
1237,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva is a citizen and resident of the United States, whose largest city is New York City. The demonym for someone from the United States is American.","(Darinka_Dentcheva | residence | United_States)
(United_States | largestCity | New_York_City)
(Darinka_Dentcheva | citizenship | United_States)
(United_States | demonym | American)","(Darinka Dentcheva | citizenship | United States)
(Darinka Dentcheva | residence | United States)
(United States | largest city | New York City)
(United States | demonym | American)"
1238,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The College of William and Mary, located in the United States, owns the Alan B. Miller Hall, whose current tenants are the Mason School of Business. Robert A M Stern is the architect of the Alan B Miller Hall.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Mason_School_of_Business | country | United_States)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(Alan B. Miller Hall | architect | Robert A M Stern)
(Alan B. Miller Hall | tenant | Mason School of Business)
(College of William and Mary | location | United States)
(College of William and Mary | owns | Alan B. Miller Hall)"
1239,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina is a citizen of Israel where Arabs is an ethnic group.,"(Israel | ethnicGroup | Arab_citizens_of_Israel)
(Liselotte_Grschebina | nationality | Israel)","(""Liselotte Grschebina"" | ""citizenship"" | ""Israel"")
(""Arabs"" | ""isEthnicGroupIn"" | ""Israel"")"
1240,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Before Liselotte Grschebina's death in Petah, Tikva, she was a national of Israel, whose long name is ""State of Israel"" and has a population density of 387.63 people per square kilometre of land area.","(Israel | populationDensity | 387.63)
(Liselotte_Grschebina | deathPlace | Petah_Tikva)
(Israel | longName | ""State of Israel"")
(Liselotte_Grschebina | nationality | Israel)","(""Liselotte Grschebina"" | ""deathPlace"" | ""Petah Tikva"")
(""Liselotte Grschebina"" | ""nationality"" | ""Israel"")
(""Israel"" | ""longName"" | ""State of Israel"")
(""Israel"" | ""populationDensity"" | ""387.63 people per square kilometre of land area"")"
1241,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The total population in the United States is 324720797.,(United_States | populationTotal | 324720797),(United States | totalPopulation | 324720797)
1242,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Hypermarcas is a pharmaceutical company located in Brazil. Their main product is drugs and they are managed by their CEO.,"(Hypermarcas | location | Brazil)
(Hypermarcas | product | Drugs)
(Hypermarcas | industry | Pharmaceuticals)
(Hypermarcas | keyPerson | CEO)","(""Hypermarcas"" | ""type"" | ""Pharmaceutical Company"")
(""Hypermarcas"" | ""location"" | ""Brazil"")
(""Hypermarcas"" | ""product"" | ""drugs"")
(""Hypermarcas"" | ""hasPosition"" | ""CEO"")"
1243,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Jill Shilling was a star of the BBC show Bananaman, which first went to air on the 10th of March, 1983. The BBC have their headquarters based at Broadcasting House in London.","(BBC | city | Broadcasting_House)
(Bananaman | starring | Jill_Shilling)
(Bananaman | broadcastedBy | BBC)
(Bananaman | firstAired | ""1983-10-03"")","(""Jill Shilling"" | ""occupation"" | ""actor"")
(""Jill Shilling"" | ""appeared in"" | ""Bananaman"")
(""Bananaman"" | ""broadcaster"" | ""BBC"")
(""Bananaman"" | ""release date"" | ""10th of March, 1983"")
(""BBC"" | ""headquarters"" | ""Broadcasting House"")
(""Broadcasting House"" | ""location"" | ""London"")"
1244,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva was born on April 27, 1937 and died on December 9th,1991.","(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | deathDate | 1991-12-09)","(""Olga Bondareva"" | ""birthDate"" | ""April 27, 1937"")
(""Olga Bondareva"" | ""deathDate"" | ""December 9, 1991"")"
1245,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Expect a Miracle is an instrumental album by Brian Kelly with a runtime of 54.56. It was preceded by Pools of Light.,"(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | precededBy | Pools_of_Light_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Instrumental_music)","(""Expect a Miracle"" | type | ""instrumental album"")
(""Expect a Miracle"" | creator | ""Brian Kelly"")
(""Expect a Miracle"" | runtime | 54.56)
(""Expect a Miracle"" | preceded by | ""Pools of Light"")
(""Brian Kelly"" | produced | ""Expect a Miracle"")"
1246,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina (born in Karlsruhe) died in Israel. Arabs are an ethnic group found in Israel.,"(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | deathPlace | Israel)
(Israel | ethnicGroup | Arab_citizens_of_Israel)","(Liselotte Grschebina | birthPlace | Karlsruhe)
(Liselotte Grschebina | deathPlace | Israel)
(Arabs | ethnicGroupFoundIn | Israel)"
1247,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","""English Without Tears"", written by Terence Rattigan, includes music composed by Nicholas Brodszky. In charge of the cinematography was Bernard Knowles. Anatole de Grunwald and Harold French produced and directed the movie, respectively.","(English_Without_Tears | cinematography | Bernard_Knowles)
(English_Without_Tears | writer | Terence_Rattigan)
(English_Without_Tears | musicComposer | Nicholas_Brodszky)
(English_Without_Tears | producer | Anatole_de_Grunwald)
(English_Without_Tears | director | Harold_French)","(""English Without Tears"" | writtenBy | ""Terence Rattigan"")
(""English Without Tears"" | includesMusicComposedBy | ""Nicholas Brodszky"")
(""English Without Tears"" | cinematographyBy | ""Bernard Knowles"")
(""English Without Tears"" | producedBy | ""Anatole de Grunwald"")
(""English Without Tears"" | directedBy | ""Harold French"")"
1248,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Pontiac was founded in the United States.,(Pontiac | foundationPlace | United_States),"(""Pontiac"" | ""foundedIn"" | ""United States"")"
1249,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aleksandr Prudnikov, of height 185 cm, played for FC Spartak Moscow's youth team but currently plays for FC Amkar Perm. FC Spartak Moscow's grounds are the Otkrytiye Arena.","(Aleksandr_Prudnikov | club | FC_Amkar_Perm)
(Aleksandr_Prudnikov | height | 185.0 (centimetres))
(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(FC_Spartak_Moscow | ground | Otkrytiye_Arena)","(""Aleksandr Prudnikov"" | ""height"" | ""185 cm""),
(""Aleksandr Prudnikov"" | ""played for"" | ""FC Spartak Moscow's youth team""),
(""Aleksandr Prudnikov"" | ""plays for"" | ""FC Amkar Perm""),
(""FC Spartak Moscow"" | ""has player"" | ""Aleksandr Prudnikov""),
(""FC Amkar Perm"" | ""has player"" | ""Aleksandr Prudnikov""),
(""FC Spartak Moscow"" | ""has grounds"" | ""Otkrytiye Arena"")"
1250,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Agremiação Sportiva Arapiraquense club has 17000 members and they play in the Brazilian Campeonato Brasileiro Série C league (champions: Vila Nova Futebol Clube). Their ground is the Estadio Municipal Coaracy da Mata Fonseca located in Arapiraca.,"(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Campeonato_Brasileiro_Série_C | country | Brazil)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(""Agremiação Sportiva Arapiraquense"" | ""has members"" | ""17000"")
(""Agremiação Sportiva Arapiraquense"" | ""plays in"" | ""Brazilian Campeonato Brasileiro Série C"")
(""Brazilian Campeonato Brasileiro Série C"" | ""has champions"" | ""Vila Nova Futebol Clube"")
(""Agremiação Sportiva Arapiraquense"" | ""has ground"" | ""Estadio Municipal Coaracy da Mata Fonseca"")
(""Estadio Municipal Coaracy da Mata Fonseca"" | ""located in"" | ""Arapiraca"")"
1251,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala is in the PDT time zone, has a population density of 1604.0 and has an elevation that is 1147.0 above sea level. In Ciudad Ayala the leader is called the governator.","(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | leaderTitle | Governator)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)
(Ciudad_Ayala | timeZone | Pacific_Daylight_Time)","(""Ciudad Ayala"" | ""time zone"" | ""PDT"")
(""Ciudad Ayala"" | ""population density"" | 1604.0)
(""Ciudad Ayala"" | ""elevation"" | 1147.0)
(""Ciudad Ayala"" | ""has leader"" | ""governator"")"
1252,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument was established in the year 2000 in Adams County, Pennsylvania, in the municipality of Gettysburg, USA. The 11th Mississippi Infantry Monument falls under the category of contributing property and the area where it stands has Cumberland County, Pennsylvania to its north.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | municipality | Gettysburg,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)
(Adams_County,_Pennsylvania | hasToItsNorth | Cumberland_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | country | ""United States"")","(""11th Mississippi Infantry Monument"" | ""establishmentYear"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Adams County"")
(""Adams County"" | ""isPartOf"" | ""Pennsylvania"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Gettysburg"")
(""Gettysburg"" | ""isPartOf"" | ""USA"")
(""11th Mississippi Infantry Monument"" | ""isA"" | ""contributing property"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Cumberland County"")
(""Cumberland County"" | ""isPartOf"" | ""Pennsylvania"")
(""Cumberland County"" | ""relativeLocation"" | ""North of 11th Mississippi Infantry Monument"")"
1253,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala is a city led by a City Manager, with a UTC offset of -6. Ciudad Ayala's metropolitan area has a population of 1777539 with a population density of 1604.","(Ciudad_Ayala | populationMetro | 1777539)
(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | type | City)
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | utcOffset | −6)","(""Ciudad Ayala"" | ""type"" | ""City"")
(""Ciudad Ayala"" | ""leaderTitle"" | ""City Manager"")
(""Ciudad Ayala"" | ""utcOffset"" | ""-6"")
(""Ciudad Ayala metropolitan area"" | ""isPartOf"" | ""Ciudad Ayala"")
(""Ciudad Ayala metropolitan area"" | ""populationTotal"" | ""1777539"")
(""Ciudad Ayala metropolitan area"" | ""populationDensity"" | ""1604"")"
1254,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Rageous was assembled in Detroit, Michigan.","(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | assembly | Detroit)","(""Pontiac Rageous"" | wasAssembledIn | ""Detroit, Michigan"")"
1255,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","In Mexico, Bionico consists of the main ingredients: sour cream, chopped fruits, condensed milk, granola, raisins and shredded coconut.","(Bionico | mainIngredient | ""Chopped Fruits, Sour Cream, Condensed Milk, Granola, Shredded Coconut, Raisins"")
(Bionico | country | Mexico)","(""Bionico"" | ""location"" | ""Mexico"")
(""Bionico"" | ""hasIngredient"" | ""sour cream"") 
(""Bionico"" | ""hasIngredient"" | ""chopped fruits"") 
(""Bionico"" | ""hasIngredient"" | ""condensed milk"") 
(""Bionico"" | ""hasIngredient"" | ""granola"") 
(""Bionico"" | ""hasIngredient"" | ""raisins"") 
(""Bionico"" | ""hasIngredient"" | ""shredded coconut"")"
1256,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala is in the Pacific Standard Time Zone, or PDT time zone.","(Ciudad_Ayala | timeZone | Pacific_Daylight_Time)
(Ciudad_Ayala | timeZone | Pacific_Standard_Time_Zone)","(""Ciudad Ayala"" | ""location"" | ""Pacific Standard Time Zone"")
(""Ciudad Ayala"" | ""location"" | ""PDT time zone"")"
1257,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Trane is a company with 29,000 employees that was founded on 01-01-1913.","(Trane | foundingDate | 1913-01-01)
(Trane | numberOfEmployees | 29000)","(""Trane"" | ""type"" | ""Company""),
(""Trane"" | ""numberOfEmployees"" | 29000),
(""Trane"" | ""foundingDate"" | ""01-01-1913"")"
1258,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Falling into the UTC offset -6 time zone, the city of Ciudad Ayala utilises the council-manager government system. It has a population density of 1604 and one of its leaders is the City Manager.","(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | governmentType | Council-manager_government)
(Ciudad_Ayala | utcOffset | −6)","(""Ciudad Ayala"" | ""utcOffset"" | ""-6"")
(""Ciudad Ayala"" | ""governmentType"" | ""council-manager government"")
(""Ciudad Ayala"" | ""populationDensity"" | ""1604"")
(""Ciudad Ayala"" | ""leaderTitle"" | ""City Manager"")"
1259,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","""Death on a Factory Farm"" a film broadcasted by HBO, was directed by Tom Simon and Sarah Teale.","(Death_on_a_Factory_Farm | director | Tom_Simon)
(Death_on_a_Factory_Farm | broadcastedBy | HBO)
(Death_on_a_Factory_Farm | director | Sarah_Teale)","(""Death on a Factory Farm"" | wasDirectedBy | ""Tom Simon"")
(""Death on a Factory Farm"" | wasDirectedBy | ""Sarah Teale"")
(""Death on a Factory Farm"" | wasBroadcastedBy | ""HBO"")"
1260,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology campus is located in Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090 and it is affiliated to Visvesvaraya Technological University and its Technical Campus is given by All India Council for Technical Education.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | city | Bangalore)
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)","(""Acharya Institute of Technology"" | ""location"" | ""Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090"")
(""Acharya Institute of Technology"" | ""affiliation"" | ""Visvesvaraya Technological University"")
(""Acharya Institute of Technology"" | ""Technical Campus giver"" | ""All India Council for Technical Education"")"
1261,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala is 1147m above sea level and Governator is a leader of that city.,"(Ciudad_Ayala | leaderTitle | Governator)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)","(""Ciudad Ayala"" | ""elevation"" | ""1147m"")
(""Governator"" | ""leaderOf"" | ""Ciudad Ayala"")"
1262,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Year of No Light created the album Nord in the post metal genre, which cellos are examples of post metal instruments.","(Nord_(Year_of_No_Light_album) | genre | Post-metal)
(Post-metal | instrument | Cello)","(""Year of No Light"" | ""created"" | ""Nord"")
(""Nord"" | ""createdIn"" | ""Year of No Light"")
(""Nord"" | ""in_genre"" | ""post metal"")
(""post metal"" | ""has_examples"" | ""cellos"")"
1263,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","English Without Tears is a movie the was released on July 28th, 1944; it runs for 89 minutes. The cinematographer was Bernard Knowles and the producer was Anatole de Grunwald. Harold French was the director and Nicholas Brodszky composed the musical score. Alan Jaggs was the film's editor.","(English_Without_Tears | runtime | 89.0)
(English_Without_Tears | musicComposer | Nicholas_Brodszky)
(English_Without_Tears | releaseDate | 1944-07-28)
(English_Without_Tears | director | Harold_French)
(English_Without_Tears | editing | Alan_Jaggs)
(English_Without_Tears | producer | Anatole_de_Grunwald)
(English_Without_Tears | cinematography | Bernard_Knowles)","(""English Without Tears"" | type | ""Movie"")
(""English Without Tears"" | releaseDate | ""July 28th, 1944"")
(""English Without Tears"" | runtime | 89 minutes)
(""English Without Tears"" | cinematographer | ""Bernard Knowles"")
(""English Without Tears"" | producer | ""Anatole de Grunwald"")
(""English Without Tears"" | director | ""Harold French"")
(""English Without Tears"" | musicComposer | ""Nicholas Brodszky"")
(""English Without Tears"" | editor | ""Alan Jaggs"")"
1264,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy in Dijon has 2900 staff members that educate 16,800 undergraduate students, 1,299 doctoral students, and 9,400 postgraduate students a total of 27,400 students combined.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfStudents | 27400)
(University_of_Burgundy | numberOfDoctoralStudents | 1299)
(University_of_Burgundy | campus | Dijon)
(University_of_Burgundy | city | Dijon)
(University_of_Burgundy | numberOfPostgraduateStudents | 9400)","(""University of Burgundy"" | ""location"" | ""Dijon"")
(""University of Burgundy"" | ""hasStaffMembers"" | 2900)
(""University of Burgundy"" | ""hasUndergraduateStudents"" | 16800)
(""University of Burgundy"" | ""hasDoctoralStudents"" | 1299)
(""University of Burgundy"" | ""hasPostgraduateStudents"" | 9400)
(""University of Burgundy"" | ""hasTotalStudents"" | 27400)"
1265,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","BBC (located at the Broadcasting House in London) broadcast Bananaman, which first aired on 03/10/83, starring Bill Oddie, father to Kate Hardie.","(BBC | city | Broadcasting_House)
(Bananaman | starring | Bill_Oddie)
(Bill_Oddie | child | Kate_Hardie)
(Bananaman | broadcastedBy | BBC)
(Bananaman | firstAired | ""1983-10-03"")","(""BBC"" | ""location"" | ""Broadcasting House in London"")
(""BBC"" | ""broadcast"" | ""Bananaman"")
(""Bananaman"" | ""first aired on"" | ""03/10/83"")
(""Bananaman"" | ""starring"" | ""Bill Oddie"")
(""Bill Oddie"" | ""is father to"" | ""Kate Hardie"")"
1266,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The instrumental album Expect a Miracle (54.56 minute runtime) was followed by Afterplay by Brian Kelly.,"(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | genre | Instrumental_music)
(Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album))","(""Expect a Miracle"" | type | ""instrumental album"")
(""Expect a Miracle"" | ""followed by"" | ""Afterplay"")
(""Afterplay"" | ""by"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""runtime"" | ""54.56 minutes"")"
1267,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Year of No Light album Nord in the sludge metal and post-metal genre is followed by Live at Roadburn 2008.,"(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | genre | Post-metal)","(""Year of No Light album Nord"" | genre | ""sludge metal"")
(""Year of No Light album Nord"" | genre | ""post-metal"")
(""Year of No Light album Nord"" | followed by | ""Live at Roadburn 2008"")"
1268,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva was born on April 27th, 1937, in Leningrad, part of the USSR. Her given name was Olga Nikolaevna Bondareva. Bondareva's alma mater is Leningrad State University. She is known for the Bondareva-Shapley theorem. She passed away on December 9th, 1991.","(Olga_Bondareva | birthPlace | Leningrad,_USSR)
(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | deathDate | 1991-12-09)","(Olga Bondareva | birthDate | ""April 27th, 1937"")
(Olga Bondareva | birthPlace | Leningrad)
(Leningrad | partOf | USSR)
(Olga Bondareva | givenName | ""Olga Nikolaevna Bondareva"")
(Olga Bondareva | almaMater | Leningrad State University)
(Olga Bondareva | knownFor | Bondareva-Shapley theorem)
(Olga Bondareva | deathDate | ""December 9th, 1991"")"
1269,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Israeli national Liselotte Grschebina was born on May 2nd, 1908 in the German Empire and died in Israel.","(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | deathPlace | Israel)
(Liselotte_Grschebina | nationality | Israel)
(Liselotte_Grschebina | birthPlace | German_Empire)","(Liselotte Grschebina | nationality | Israeli)
(Liselotte Grschebina | birthDate | ""May 2nd, 1908"")
(Liselotte Grschebina | place of birth | German Empire)
(Liselotte Grschebina | deathPlace | Israel)"
1270,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Artist Brian Kelly, who is a composer & pianist, created Expect a Miracle.",(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist)),"(Brian Kelly | type | Artist)
(Brian Kelly | profession | Composer)
(Brian Kelly | profession | Pianist)
(Brian Kelly | created | Expect a Miracle)"
1271,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The movie McVeagh of the South Seas was directed by Cyril Bruce.,(McVeagh_of_the_South_Seas | director | Cyril_Bruce),"(""McVeagh of the South Seas"" | ""director"" | ""Cyril Bruce"")"
1272,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The place served by the Bedford Aerodrome is the Bedford Autodrome and it has a runway called 08/26 made out of concrete.,"(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | runwayName | ""08/26"")
(Bedford_Aerodrome | runwaySurfaceType | Concrete)","(""Bedford Aerodrome"" | ""serves"" | ""Bedford Autodrome"")
(""Bedford Aerodrome"" | ""hasRunway"" | ""08/26"")
(""08/26"" | ""madeOutOf"" | ""concrete"")"
1273,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva was born on January 1, 1958 and is a citizen of the United States. She developed a theory influenced by Andrzej Piotr Ruszczyński and is known for her work with stochastic programming.","(Darinka_Dentcheva | influencedBy | Andrzej_Piotr_Ruszczyński)
(Darinka_Dentcheva | citizenship | United_States)
(Darinka_Dentcheva | birthDate | 1958-01-01)
(Darinka_Dentcheva | knownFor | Stochastic_programming)","(Darinka Dentcheva | birthDate | ""January 1, 1958"")
(Darinka Dentcheva | citizenship | United States)
(Darinka Dentcheva | influencedBy | Andrzej Piotr Ruszczyński)
(Darinka Dentcheva | knownFor | stochastic programming)"
1274,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology is located in Bangalore a city founded by Kempe Gowda I, the President of the institute is B.M. Reddy and the director is Dr G. P. Prabhukumar. The institute was given technical campus status by the All India Council for Technical Education which is located in Mumbai. The campus address for the institute is Soldevanahalli, Acharya Dr Sarvapalli, Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(All_India_Council_for_Technical_Education | location | Mumbai)
(Acharya_Institute_of_Technology | director | ""Dr. G. P. Prabhukumar"")
(Bangalore | founder | Kempe_Gowda_I)
(Acharya_Institute_of_Technology | city | Bangalore)
(Acharya_Institute_of_Technology | president | ""B.M. Reddy"")
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)","(Acharya Institute of Technology | location | Bangalore)
(Bangalore | founded by | Kempe Gowda I)
(Acharya Institute of Technology | president | B.M. Reddy)
(Acharya Institute of Technology | director | Dr G. P. Prabhukumar)
(Acharya Institute of Technology | given status by | All India Council for Technical Education)
(Acharya Institute of Technology | status | technical campus)
(All India Council for Technical Education | location | Mumbai)
(Acharya Institute of Technology | campus address | ""Soldevanahalli, Acharya Dr Sarvapalli, Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090"")"
1275,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The asteroid 1147 Stavropolis was discovered, by Grigory Neujmin, on the 11th of June 1229. It has an apoapsis of 418476000000.0, an orbital period of 1249.6 days, an absolute magnitude of 11.5, a rotation period of 20378.5. It's epoch is 31 July 2016 (Julian Day 2457600.5).","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | discoverer | Grigory_Neujmin)
(1147_Stavropolis | absoluteMagnitude | 11.5)
(1147_Stavropolis | discovered | 1929-06-11)
(1147_Stavropolis | rotationPeriod | 20378.5)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))","(1147 Stavropolis | discovered by | Grigory Neujmin)
(1147 Stavropolis | discovered on | June 11th 1229)
(1147 Stavropolis | apoapsis | 418476000000.0)
(1147 Stavropolis | orbital period | 1249.6 days)
(1147 Stavropolis | absolute magnitude | 11.5)
(1147 Stavropolis | rotation period | 20378.5)
(1147 Stavropolis | epoch | July 31 2016)
(1147 Stavropolis | Julian Day | 2457600.5)"
1276,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers, which starred Justin Whalin, has a budget of 2000000, running time of 98 minutes and made $309555.0 at the box office.","(Super_Capers | budget | 2000000.0)
(Super_Capers | starring | Justin_Whalin)
(Super_Capers | runtime | 98.0)
(Super_Capers | gross | 30955.0)","(""Super Capers"" | ""starring"" | ""Justin Whalin""),
(""Super Capers"" | ""budget"" | 2000000),
(""Super Capers"" | ""running time"" | 98),
(""Super Capers"" | ""box office"" | 309555.0)"
1277,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","A Leningrad State University graduate, Olga Bondareva now works in the field of Economics.","(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | professionalField | Economics)","(Olga Bondareva | almaMater | Leningrad State University)
(Olga Bondareva | profession | Economics)
(Olga Bondareva | occupation | works)
(Olga Bondareva | field | Economics)"
1278,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bionico is a dish containing raisins, served for dessert in Mexico.","(Bionico | course | Dessert)
(Bionico | ingredient | Raisin)
(Bionico | country | Mexico)","(""Bionico"" | ""typeOf"" | ""dish"")
(""Bionico"" | ""containsIngredient"" | ""raisins"")
(""Bionico"" | ""course"" | ""dessert"")
(""Bionico"" | ""countryOfOrigin"" | ""Mexico"")"
1279,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lionsgate distributed Super Capers, a 98 minute film with a budget of 2000000.","(Super_Capers | distributor | Lionsgate)
(Super_Capers | budget | 2000000.0)
(Super_Capers | runtime | 98.0)","(""Lionsgate"" | ""distributed"" | ""Super Capers""),
(""Super Capers"" | ""runtime"" | 98),
(""Super Capers"" | ""budget"" | 2000000)"
1280,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Israel's language is Modern Hebrew.,(Israel | language | Modern_Hebrew),"(Israel | language | ""Modern Hebrew"")"
1281,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Mason School of Business is located in Virginia in the US at Alan B Miller Hall, 101 Ukrop Way. The architect who designed the hall was Robert A.M. Stern and it began construction on the 30th of March 2007.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | location | Virginia)
(Mason_School_of_Business | country | United_States)","1. (Mason School of Business | location | Virginia)
2. (Mason School of Business | location | US)
3. (Mason School of Business | located at | Alan B Miller Hall, 101 Ukrop Way)
4. (Mason School of Business | location | 101 Ukrop Way)
5. (Alan B Miller Hall | location | Virginia)
6. (Alan B Miller Hall | location | US)
7. (Alan B Miller Hall | architect | Robert A.M. Stern)
8. (Alan B Miller Hall | construction start date | literal:30th of March 2007)"
1282,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The film ‘Death on a Factory Farm’, produced by Sarah Teale, lasts 83 minutes.","(Death_on_a_Factory_Farm | runtime | 83.0)
(Death_on_a_Factory_Farm | producer | Sarah_Teale)","('Death on a Factory Farm' | 'type' | 'Film')
('Death on a Factory Farm' | 'producer' | 'Sarah Teale')
('Death on a Factory Farm' | 'durationInMinutes' | 83)"
1283,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva whose birthplace was Leningrad, USSR, died in Saint Petersburg which is a city in Russia.The leader of Saint Petersburg is known as the Governor.","(Olga_Bondareva | birthPlace | Leningrad,_USSR)
(Saint_Petersburg | country | Russia)
(Olga_Bondareva | deathPlace | Saint_Petersburg)
(Saint_Petersburg | leaderTitle | Governor)","(Olga Bondareva | birthplace | Leningrad, USSR)
(Olga Bondareva | deathplace | Saint Petersburg)
(Saint Petersburg | locatedIn | Russia)
(Saint Petersburg | leaderTitle | Governor)"
1284,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Hobbit was released on September 21, 1937.",(The_Hobbit | releaseDate | 1937-09-21),"(""The Hobbit"" | ""releaseDate"" | ""September 21, 1937"")"
1285,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Tom Simon was both the director and producer of the film Death on a Factory Farm, which was broadcasted by HBO.","(Death_on_a_Factory_Farm | director | Tom_Simon)
(Death_on_a_Factory_Farm | producer | Tom_Simon)
(Death_on_a_Factory_Farm | broadcastedBy | HBO)","(""Tom Simon"" | ""type"" | ""Person""),
(""Tom Simon"" | ""job title"" | ""director""),
(""Tom Simon"" | ""job title"" | ""producer""),
(""Death on a Factory Farm"" | ""type"" | ""Film""),
(""Death on a Factory Farm"" | ""director"" | ""Tom Simon""),
(""Death on a Factory Farm"" | ""producer"" | ""Tom Simon""),
(""HBO"" | ""type"" | ""Broadcasting Company""),
(""Death on a Factory Farm"" | ""broadcastedBy"" | ""HBO"")"
1286,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, known for the Bondareva-Shapley theorem, died on the 9th of December, 1991, in Saint Petersburg. Her alma mater is Leningrad State University.","(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | deathDate | 1991-12-09)
(Olga_Bondareva | deathPlace | Saint_Petersburg)
(Olga_Bondareva | almaMater | Leningrad_State_University)","(Olga Bondareva | deathDate | ""1991-12-09"")
(Olga Bondareva | deathPlace | Saint Petersburg)
(Olga Bondareva | knownFor | Bondareva-Shapley theorem)
(Olga Bondareva | almaMater | Leningrad State University)"
1287,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Pontiac Rageous was first made in Michigan in 1197 and is currently assembled in Detroit.,"(Pontiac_Rageous | productionStartYear | 1997)
(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | assembly | Detroit)","(""Pontiac Rageous"" | ""place of origin"" | ""Michigan"")
(""Pontiac Rageous"" | ""year of creation"" | 1197)
(""Pontiac Rageous"" | ""current location of assembly"" | ""Detroit"")"
1288,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva was born as ""Olga Nikolaevna Bondareva"" on April 27, 1937 in Leningrad, USSR. She studied at Leningrad State University, and is known for developing the Bondareva-Shapley theorem. She died on December 9, 1991.","(Olga_Bondareva | birthPlace | Leningrad,_USSR)
(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | deathDate | 1991-12-09)","(""Olga Bondareva"" | ""birthName"" | ""Olga Nikolaevna Bondareva"")
(""Olga Bondareva"" | ""birthDate"" | ""April 27, 1937"")
(""Olga Bondareva"" | ""birthPlace"" | ""Leningrad, USSR"")
(""Olga Bondareva"" | ""almaMater"" | ""Leningrad State University"")
(""Olga Bondareva"" | ""knownFor"" | ""Bondareva-Shapley theorem"")
(""Olga Bondareva"" | ""deathDate"" | ""December 9, 1991"")"
1289,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bananaman, staring Bill Oddie was first aired by the BBC on 10/03/1983. The BBC which was founded by 1st Baron John Reith is housed by Broadcasting House based in London.","(BBC | city | Broadcasting_House)
(Bananaman | starring | Bill_Oddie)
(BBC | foundedBy | John_Reith,_1st_Baron_Reith)
(Bananaman | broadcastedBy | BBC)
(Bananaman | firstAired | ""1983-10-03"")","(""Bananaman"" | ""starring"" | ""Bill Oddie""),
(""Bananaman"" | ""first aired by"" | ""BBC""),
(""Bananaman"" | ""first aired on"" | ""10/03/1983""),
(""BBC"" | ""founded by"" | ""1st Baron John Reith""),
(""BBC"" | ""housed by"" | ""Broadcasting House""),
(""Broadcasting House"" | ""based in"" | ""London"")"
1290,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Hypermarcas is a pharmaceutical company located in Sao Paulo, Brazil. (Brazil is led by both Michel Temer and Carmen Lucia.).","(Hypermarcas | industry | Pharmaceuticals)
(Hypermarcas | location | São_Paulo)
(Hypermarcas | location | Brazil)
(Brazil | leader | Michel_Temer)
(Brazil | leader | Cármen_Lúcia)","(""Hypermarcas"" | ""type"" | ""pharmaceutical company"")
(""Hypermarcas"" | ""location"" | ""Sao Paulo"")
(""Sao Paulo"" | ""isIn"" | ""Brazil"")
(""Brazil"" | ""leader"" | ""Michel Temer"")
(""Brazil"" | ""leader"" | ""Carmen Lucia"")"
1291,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 230.05 minutes long rock album, The Bootleg Series Volume I: The Quine Tapes, preceded by the album Squeeze is produced and created by The Velvet Underground.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | genre | Rock_music)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | precededBy | Squeeze_(The_Velvet_Underground_album))","(""The Bootleg Series Volume I: The Quine Tapes"" | ""type"" | ""rock album"")
(""The Bootleg Series Volume I: The Quine Tapes"" | ""producer"" | ""The Velvet Underground"")
(""The Bootleg Series Volume I: The Quine Tapes"" | ""creator"" | ""The Velvet Underground"")
(""The Bootleg Series Volume I: The Quine Tapes"" | ""length"" | ""230.05 minutes"")
(""The Bootleg Series Volume I: The Quine Tapes"" | ""precededBy"" | ""Squeeze"")"
1292,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nord, an album in sludge metal genre, was produced by Year of No Light and released by the artist Year of No Light.","(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light)","(""Nord"" | rdf:type | ""Album"")
(""Nord"" | dbo:genre | ""Sludge Metal"")
(""Nord"" | dbo:producer | ""Year of No Light"")
(""Nord"" | dbo:artist | ""Year of No Light"")
(""Year of No Light"" | dbo:hasAlbum | ""Nord"")
(""Year of No Light"" | rdf:type | ""Artist"")
(""Year of No Light"" | dbo:produced | ""Nord"")
(""Year of No Light"" | dbo:released | ""Nord"")"
1293,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aleksandr Prudnikov (born 1989-02-24) plays for FC Amkar Perm. He previously played for FC Spartak Moscow's youth team at the Otkrytiye Arena.,"(Aleksandr_Prudnikov | club | FC_Amkar_Perm)
(Aleksandr_Prudnikov | birthDate | 1989-02-24)
(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(FC_Spartak_Moscow | ground | Otkrytiye_Arena)","(Aleksandr Prudnikov | birthDate | 1989-02-24)
(Aleksandr Prudnikov | playsFor | FC Amkar Perm)
(Aleksandr Prudnikov | previouslyPlayedFor | FC Spartak Moscow)
(FC Spartak Moscow | hasPart | youth team)
(youth team | location | Otkrytiye Arena)"
1294,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Akeem Ayers debuted with his former team the Tennessee Titans.,"(Akeem_Ayers | debutTeam | Tennessee_Titans)
(Akeem_Ayers | formerTeam | Tennessee_Titans)","(""Akeem Ayers"" | ""debut"" | ""Tennessee Titans"")
(""Akeem Ayers"" | ""former team"" | ""Tennessee Titans"")"
1295,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","There are 27400 students at the University of Burgundy of which 16,800 are undergraduates.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | numberOfStudents | 27400)","(""University of Burgundy"" | ""totalStudents"" | 27400)
(""University of Burgundy"" | ""undergraduateStudents"" | 16800)"
1296,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","American Alan Shepard, who was born in New Hampshire on Nov 18, 1923 and died in California, went to school at NWC and graduated with an MA in 1957. Shepard was the Chief of the Astronaut Office in 1963, and was a member of the Apollo 14 crew.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | servedAsChiefOfTheAstronautOfficeIn | 1963)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | almaMater | ""NWC, M.A. 1957"")
(Alan_Shepard | mission | Apollo_14)","(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | birthDate | Nov 18, 1923)
(Alan Shepard | deathPlace | California)
(Alan Shepard | almaMater | NWC)
(Alan Shepard | graduatedYear | 1957)
(Alan Shepard | jobTitle | Chief of the Astronaut Office)
(Alan Shepard | jobDate | 1963)
(Alan Shepard | memberOf | Apollo 14 crew)"
1297,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The song Mermaid, Written by the band Train, is on Columbia Records.","(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | recordLabel | Columbia_Records)","(""Mermaid"" | ""Written by"" | ""Train"")
(""Mermaid"" | ""on"" | ""Columbia Records"")
(""Train"" | ""wrote"" | ""Mermaid"") 
(""Train"" | ""hasRecord"" | ""Columbia Records"")"
1298,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Train song Mermaid belongs to the genre of pop rock.,(Mermaid_(Train_song) | genre | Pop_rock),"(""Mermaid"" | ""isSongOf"" | ""Train""),
(""Mermaid"" | ""belongsToGenre"" | ""pop rock"")"
1299,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Expect a Miracle is produced by Brian Kelly.,(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist)),"(""Expect a Miracle"" | ""producer"" | ""Brian Kelly"")"
1300,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",University of Cambridge is located in the United Kingdom.,(University_of_Cambridge | country | United_Kingdom),"(""University of Cambridge"" | ""is located in"" | ""United Kingdom"")"
1301,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Hypermarcas makes drugs.,(Hypermarcas | product | Drugs),(Hypermarcas | makes | drugs)
1302,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 94 minute, 1956's film ""It's Great to Be Young""was directed by Cyril Frankel and written by Ted Willis.","(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | director | Cyril_Frankel)
(""It's_Great_to_Be_Young_(1956_film) | writer | Ted_Willis"")","(""It's Great to Be Young"" | duration | ""94"" minutes)
(""It's Great to Be Young"" | releaseDate | 1956)
(""It's Great to Be Young"" | director | ""Cyril Frankel"")
(""It's Great to Be Young"" | writer | ""Ted Willis"")"
1303,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aaron Turner is a singer in the post metal band, Twilight.","(Aaron_Turner | genre | Post-metal)
(Aaron_Turner | instrument | Singing)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))","(Aaron Turner | type | Singer)
(Aaron Turner | member of | Twilight)
(Twilight | type | Post metal band)
(Twilight | has member | Aaron Turner)"
1304,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The compilation album Expect a Miracle was produced and authored by Brian Kelly and has a runtime of 54:56.,"(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | type | Compilation_Album)","(""Expect a Miracle"" | ""type"" | ""Compilation Album"")
(""Expect a Miracle"" | ""author"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""producer"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""runtime"" | ""54:56"")"
1305,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Cinemax’s sister station HBO released Death on a Factory Farm.,"(Death_on_a_Factory_Farm | broadcastedBy | HBO)
(HBO | sisterStation | Cinemax)","(""Cinemax"", ""sisterStation"", ""HBO"")
(""HBO"", ""released"", ""Death on a Factory Farm"")"
1306,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Train song Mermaid was produced by the production team Espionage and is in the reggae musical genre.,"(Mermaid_(Train_song) | genre | Reggae)
(Mermaid_(Train_song) | producer | Espionage_(production_team))","(""Mermaid"" | ""type"" | ""song"")
(""Mermaid"" | ""by"" | ""Train"")
(""Mermaid"" | ""produced by"" | ""Espionage"")
(""Mermaid"" | ""in genre"" | ""reggae"")"
1307,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",English Without Tears is an 89 minute movie written by Anatole de Grunwald and Terence Rattigan. Bernard Knowles conducted the cinematography.,"(English_Without_Tears | writer | Anatole_de_Grunwald)
(English_Without_Tears | cinematography | Bernard_Knowles)
(English_Without_Tears | writer | Terence_Rattigan)
(English_Without_Tears | runtime | 89.0)","(""English Without Tears"" | ""type"" | ""Movie"")
(""English Without Tears"" | ""durationInMinutes"" | 89)
(""English Without Tears"" | ""writtenBy"" | ""Anatole de Grunwald"")
(""English Without Tears"" | ""writtenBy"" | ""Terence Rattigan"")
(""English Without Tears"" | ""cinematographyBy"" | ""Bernard Knowles"")
(""Anatole de Grunwald"" | ""type"" | ""Person"")
(""Anatole de Grunwald"" | ""wrote"" | ""English Without Tears"")
(""Terence Rattigan"" | ""type""| ""Person"")
(""Terence Rattigan"" | ""wrote""| ""English Without Tears"")
(""Bernard Knowles"" | ""type"" | ""Person"")
(""Bernard Knowles"" | ""conductedCinematographyFor"" | ""English Without Tears"")"
1308,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Cecil Parker and John Mills starred in the 1956 movie It's Great to Be Young which was directed by Cyril Frankel. John Mills had a daughter, Juliet Mills, and another child Hayley Mills.","(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(John_Mills | child | Juliet_Mills)
(John_Mills | child | Hayley_Mills)
(""It's_Great_to_Be_Young_(1956_film) | starring | Cecil_Parker)
(""It's_Great_to_Be_Young_(1956_film) | director | Cyril_Frankel"")","(""Cecil Parker"" | ""starredIn"" | ""It's Great to Be Young"")
(""John Mills"" | ""starredIn"" | ""It's Great to Be Young"")
(""It's Great to Be Young"" | ""releaseYear"" | ""1956"")
(""It's Great to Be Young"" | ""directedBy"" | ""Cyril Frankel"")
(""John Mills"" | ""hasChild"" | ""Juliet Mills"")
(""John Mills"" | ""hasChild"" | ""Hayley Mills"")"
1309,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The runway length of the Bedford Aerodrome, which serves the Bedford Autodrome, is 1095.0. The aerodrome is at an elevation of 83.2104 above sea level.","(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | elevationAboveTheSeaLevel | 83.2104)
(Bedford_Aerodrome | runwayLength | 1095.0)","(""Bedford Aerodrome"" | ""runwayLength"" | 1095.0)
(""Bedford Aerodrome"" | ""serves"" | ""Bedford Autodrome"")
(""Bedford Aerodrome"" | ""elevation"" | 83.2104)"
1310,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","185 cm tall Aleksandr Prudnikov currently plays for the FC Amkar Perm football club. He trained at the FC Spartak, Moscow club, who play at the Otkrytiye Arena.","(Aleksandr_Prudnikov | club | FC_Amkar_Perm)
(Aleksandr_Prudnikov | height | 185.0 (centimetres))
(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(FC_Spartak_Moscow | ground | Otkrytiye_Arena)","(Aleksandr Prudnikov | height | 185 cm)
(Aleksandr Prudnikov | currentTeam | FC Amkar Perm)
(Aleksandr Prudnikov | pastTeam | FC Spartak)
(FC Spartak | location | Moscow)
(FC Spartak | stadium | Otkrytiye Arena)"
1311,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Trane is a subsidiary that was founded on 1913-01-01.,"(Trane | type | Subsidiary)
(Trane | foundingDate | 1913-01-01)","(""Trane"" | ""type"" | ""subsidiary"")
(""Trane"" | ""foundingDate"" | ""1913-01-01"")"
1312,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bionico food (found in Mexico) is a dish served for dessert. The main ingredients are chopped fruits, sour cream, condensed milk, granola, shredded coconut and raisins.","(Bionico | course | Dessert)
(Bionico | mainIngredient | ""Chopped Fruits, Sour Cream, Condensed Milk, Granola, Shredded Coconut, Raisins"")
(Bionico | country | Mexico)","(""Bionico food"" | ""location"" | ""Mexico"")
(""Bionico food"" | ""type"" | ""dish"")
(""Bionico food"" | ""course"" | ""dessert"")
(""Bionico food"" | ""ingredient"" | ""chopped fruits"")
(""Bionico food"" | ""ingredient"" | ""sour cream"")
(""Bionico food"" | ""ingredient"" | ""condensed milk"")
(""Bionico food"" | ""ingredient"" | ""granola"")
(""Bionico food"" | ""ingredient"" | ""shredded coconut"")
(""Bionico food"" | ""ingredient"" | ""raisins"")"
1313,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Company manufactures cars, including the Rageous.","(Pontiac_Rageous | manufacturer | Pontiac)
(Pontiac | product | Automobile)","(""Pontiac Company"" | ""type"" | ""Company"")
(""Pontiac Company"" | ""manufactures"" | ""cars"")
(""Pontiac Company"" | ""manufactures"" | ""Rageous"")
(""Rageous"" | ""type"" | ""car"")
(""Rageous"" | ""manufacturer"" | ""Pontiac Company"")"
1314,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","First aired in 1983, Bananaman is a children's programme created by Steve Bright and starring Bill Oddie. It was made by the BBC, which is based in London in Broadcasting House.","(BBC | city | Broadcasting_House)
(Bananaman | starring | Bill_Oddie)
(Bananaman | creator | Steve_Bright)
(Bananaman | broadcastedBy | BBC)
(Bananaman | firstAired | ""1983-10-03"")","(""Bananaman"" | ""airDate"" | 1983)
(""Bananaman"" | ""type"" | ""Children's programme"")
(""Bananaman"" | ""creator"" | ""Steve Bright"")
(""Bananaman"" | ""starring"" | ""Bill Oddie"")
(""Bananaman"" | ""productionCompany"" | ""BBC"")
(""BBC"" | ""location"" | ""Broadcasting House, London"")
(""Steve Bright"" | ""createdWork"" | ""Bananaman"")
(""Bill Oddie"" | ""actorIn"" | ""Bananaman"")"
1315,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brandon Carter's alma mater is the University of Cambridge which is a research university.,"(Brandon_Carter | almaMater | University_of_Cambridge)
(University_of_Cambridge | type | Research_university)","(Brandon Carter | alma mater | University of Cambridge)
(University of Cambridge | type | research university)"
1316,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",HBO has its headquarters in New York City.,"(HBO | headquarter | New_York_City,_New_York)","(""HBO"" | ""headquarters location"" | ""New York City"")"
1317,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Measuring 17068.8 millimeters in length, the ALCO RS-3 boasts a four-stroke engine.","(ALCO_RS-3 | engine | Four-stroke_engine)
(ALCO_RS-3 | length | 17068.8 (millimetres))","(""ALCO RS-3"" | ""length"" | ""17068.8 millimeters"")
(""ALCO RS-3"" | ""engine type"" | ""four-stroke engine"")"
1318,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Felipe Gozon is the key person for GMA New Media, which is a subsidiary of GMA Network.","(GMA_New_Media | keyPerson | Felipe_Gozon)
(GMA_New_Media | parentCompany | GMA_Network_(company))","(""Felipe Gozon"" | ""role"" | ""key person"")
(""Felipe Gozon"" | ""affiliation"" | ""GMA New Media"")
(""GMA New Media"" | ""is a subsidiary of"" | ""GMA Network"")"
1319,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Expect a Miracle, with a runtime of 54:56, was produced by Brian Kelly, the author of “Expect a Miracle”.","(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist))","(""Expect a Miracle"" | type | ""album"")
(""Expect a Miracle"" | runtime | ""54:56"")
(""Expect a Miracle"" | producedBy | ""Brian Kelly"")
(""Brian Kelly"" | type | ""author"")
(""Brian Kelly"" | authorOf | ""Expect a Miracle"")"
1320,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Massachusetts born singer Aaron Turner started performing in 1995. He is a musician in the Lotus Eaters band and his genre is post-metal.,"(Aaron_Turner | genre | Post-metal)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Lotus_Eaters_(band))
(Aaron_Turner | instrument | Singing)
(Aaron_Turner | origin | Massachusetts)
(Aaron_Turner | activeYearsStartYear | 1995)","(Aaron Turner | place of birth | Massachusetts)
(Aaron Turner | activity start year | 1995)
(Aaron Turner | profession | musician)
(Aaron Turner | member of | Lotus Eaters)
(Aaron Turner | genre | post-metal)"
1321,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Train song Mermaid was produced by the Espionage production team in the reggae music genre.,"(Mermaid_(Train_song) | genre | Reggae)
(Mermaid_(Train_song) | producer | Espionage_(production_team))","(""Mermaid"" | type | ""Song"")
(""Mermaid"" | creator | ""Train"")
(""Mermaid"" | producer | ""Espionage"")
(""Mermaid"" | genre | ""Reggae music"")
(""Espionage"" | type | ""production team"")"
1322,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Johnny Colt is a former band member for the group Train.,(Train_(band) | formerBandMember | Johnny_Colt),"(Johnny Colt | type | Person)
(Johnny Colt | occupation | Band Member)
(Johnny Colt | member of | Train)
(Train | type | Group)
(Train | had member | Johnny Colt)"
1323,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nicholas Brodszky composed music of the movie English Without Tears with a running time of 89 minutes whereas Alan Jaggs edited it.,"(English_Without_Tears | runtime | 89.0)
(English_Without_Tears | musicComposer | Nicholas_Brodszky)
(English_Without_Tears | editing | Alan_Jaggs)","(""Nicholas Brodszky"" | ""composed for"" | ""English Without Tears"")
(""English Without Tears"" | ""hasComposer"" | ""Nicholas Brodszky"")
(""English Without Tears"" | ""runningTime"" | 89)
(""Alan Jaggs"" | ""edited"" | ""English Without Tears"")
(""English Without Tears"" | ""hasEditor"" | ""Alan Jaggs"")"
1324,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Pontiac Rageous was first produced and last produced in 1997. It was assembled in Michigan and the assembly line was located in Detroit.,"(Pontiac_Rageous | productionStartYear | 1997)
(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | assembly | Detroit)
(Pontiac_Rageous | productionEndYear | 1997)","(""Pontiac Rageous"" | ""first produced"" | ""1997"")
(""Pontiac Rageous"" | ""last produced"" | ""1997"")
(""Pontiac Rageous"" | ""assembled in"" | ""Michigan"")
(""Pontiac Rageous"" | ""assembly line location"" | ""Detroit"")"
1325,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aaron Turner sings in the band post-metal, Twilight, for a living.","(Aaron_Turner | genre | Post-metal)
(Aaron_Turner | instrument | Singing)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))","(Aaron Turner | profession | singer)
(Aaron Turner | genre | post-metal)
(Aaron Turner | member of | Twilight)"
1326,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The author of The Hobbit is J.R.R. Tolkien.,(The_Hobbit | author | J._R._R._Tolkien),"(""The Hobbit"" | ""author"" | ""J.R.R. Tolkien"")"
1327,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Train song by Mermaid, with a total runtime of 3.16 minutes, is from the pop rock genre and was written by the band. It was released under the labels of Columbia Records and Sony Music Entertainment.","(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)","(""The Train song"" | ""by"" | ""Mermaid"")
(""The Train song"" | ""total runtime"" | ""3.16 minutes"")
(""The Train song"" | ""is from genre"" | ""pop rock"")
(""The Train song""  | ""was written by"" | ""Mermaid"")
(""The Train song"" | ""was released under"" | ""Columbia Records"")
(""The Train song"" | ""was released under"" | ""Sony Music Entertainment"")"
1328,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng took part in both the Shenzhou 6 mission and the Shenzhou 10 mission.,"(Nie_Haisheng | mission | Shenzhou_10)
(Nie_Haisheng | mission | Shenzhou_6)","(Nie Haisheng | took part in | Shenzhou 6 mission)
(Nie Haisheng | took part in | Shenzhou 10 mission)"
1329,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adolfo Suarez Madrid-Barajas airport is located at Madrid, Paracuellos de Jarama, San Sebastián de los Reyes and Alcobendas. The airport is operated by ENAIRE, has a runway length of 3500.0 and is 610 metres above sea level.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | ""Madrid, Paracuellos de Jarama, San Sebastián de los Reyes and Alcobendas"")","(""Adolfo Suarez Madrid-Barajas airport"" | ""location"" | ""Madrid"")
(""Adolfo Suarez Madrid-Barajas airport"" | ""location"" | ""Paracuellos de Jarama"")
(""Adolfo Suarez Madrid-Barajas airport"" | ""location"" | ""San Sebastián de los Reyes"")
(""Adolfo Suarez Madrid-Barajas airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suarez Madrid-Barajas airport"" | ""operator"" | ""ENAIRE"")
(""Adolfo Suarez Madrid-Barajas airport"" | ""runway length"" | 3500.0)
(""Adolfo Suarez Madrid-Barajas airport"" | ""altitude"" | 610)"
1330,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Jamie Lawrence, who played football with Ashford Town (Middlesex) F.C., is the music composer of Death on a Factory Farm which was broadcasted by HBO.","(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)
(Jamie_Lawrence | club | Ashford_Town_(Middlesex)_F.C.)
(Death_on_a_Factory_Farm | broadcastedBy | HBO)","(""Jamie Lawrence"" | ""occupation"" | ""music composer"")
(""Jamie Lawrence"" | ""memberOf"" | ""Ashford Town (Middlesex) F.C."")
(""Jamie Lawrence"" | ""associatedWith"" | ""Football"")
(""Jamie Lawrence"" | ""composerOf"" | ""Death on a Factory Farm"")
(""Death on a Factory Farm"" | ""broadcaster"" | ""HBO"")"
1331,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Universal Music Group distributes the Polydor Records label.,(Polydor_Records | distributingLabel | Universal_Music_Group),(Universal Music Group | distributes | Polydor Records label)
1332,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson was born in Darlington, England. She was a British national and resided in India for most of her life.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | nationality | Kingdom_of_England)
(Lady_Anne_Monson | residence | India)","(""Lady Anne Monson"" | ""place of birth"" | ""Darlington, England"")
(""Lady Anne Monson"" | ""nationality"" | ""British"")
(""Lady Anne Monson"" | ""residence"" | ""India"")"
1333,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adolfo Suarez Madrid-Barajas Airport is located in Madrid, Paracuellos de Jarama, San Sebastian de los Reyes and Alcobendas. It is operated by ENAIRE, has a runway length of 3500 and is 610.0 metres above sea level.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | ""Madrid, Paracuellos de Jarama, San Sebastián de los Reyes and Alcobendas"")","(""Adolfo Suarez Madrid-Barajas Airport"" | ""location"" | ""Madrid"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""location"" | ""Paracuellos de Jarama"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""location"" | ""San Sebastian de los Reyes"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""operator"" | ""ENAIRE"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""runway length"" | 3500)
(""Adolfo Suarez Madrid-Barajas Airport"" | ""elevation above sea level"" | 610.0)"
1334,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aaron Turner is from the United States, is a performer of the musical post metal genre and played with the band Twilight.","(Aaron_Turner | genre | Post-metal)
(Aaron_Turner | origin | United_States)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))","(Aaron Turner | type | Person)
(Aaron Turner | country | United States)
(Aaron Turner | genre | post metal)
(Aaron Turner | occupation | performer)
(Aaron Turner | performed_with | Twilight)"
1335,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Abraham A. Ribicoff was born and raised in the United States.,"(Abraham_A._Ribicoff | nationality | American)
(Abraham_A._Ribicoff | birthPlace | United_States)","(Abraham A. Ribicoff | was born in | United States)
(Abraham A. Ribicoff | was raised in | United States)"
1336,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","McVeagh of the South Seas is a film registered in IMDb with the ID 0004319 starring Harry Carey, who was born in 1878.","(McVeagh_of_the_South_Seas | imdbId | 0004319)
(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878))","(""McVeagh of the South Seas"" | type | ""Film"")
(""McVeagh of the South Seas"" | ""registeredIn"" | ""IMDb"")
(""McVeagh of the South Seas"" | ""IMDbID"" | ""0004319"")
(""McVeagh of the South Seas"" | ""starring"" | ""Harry Carey"")
(""Harry Carey"" | ""type"" | ""Actor"")
(""Harry Carey"" | ""bornIn"" | ""1878"")"
1337,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala is a city led by City Manager. The government type of this city is council-manager.,"(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | type | City)
(Ciudad_Ayala | governmentType | Council-manager_government)","(""Ciudad Ayala"" | ""type"" | ""City"")
(""Ciudad Ayala"" | ""leader"" | ""City Manager"")
(""Ciudad Ayala"" | ""governmentType"" | ""council-manager"")"
1338,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","English Without Tears is an 89 minute movie that was released on July 28th, 1944. The music was composed by Nicholas Brodszky and the editing was done by Alan Jaggs. The cinematography was completed by Bernard Knowles and the directing was done by Harold French. Anatole de Grunwald served as the film producer.","(English_Without_Tears | runtime | 89.0)
(English_Without_Tears | musicComposer | Nicholas_Brodszky)
(English_Without_Tears | releaseDate | 1944-07-28)
(English_Without_Tears | director | Harold_French)
(English_Without_Tears | editing | Alan_Jaggs)
(English_Without_Tears | producer | Anatole_de_Grunwald)
(English_Without_Tears | cinematography | Bernard_Knowles)","(""English Without Tears"" | ""type"" | ""Movie""),
(""English Without Tears"" | ""duration"" | ""89 minutes""),
(""English Without Tears"" | ""releaseDate"" | ""July 28th, 1944""),
(""Nicholas Brodszky"" | ""composedMusicFor"" | ""English Without Tears""),
(""Alan Jaggs"" | ""edited"" | ""English Without Tears""),
(""Bernard Knowles"" | ""didCinematographyFor"" | ""English Without Tears""),
(""Harold French"" | ""directed"" | ""English Without Tears""),
(""Anatole de Grunwald"" | ""produced"" | ""English Without Tears"")."
1339,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Bootleg Series Volume 1: The Quine Tapes were released on 10-16-2001, recorded in San Francisco by the record label Polydor Records under the Universal Music Group record label.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Polydor_Records)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | San_Francisco)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Universal_Music_Group)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | releaseDate | 2001-10-16)","(""Bootleg Series Volume 1: The Quine Tapes"" | ""release date"" | ""10-16-2001"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""record location"" | ""San Francisco"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""record label"" | ""Polydor Records"")
(""Polydor Records"" | ""under record label"" | ""Universal Music Group"")"
1340,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Brandon Carter was born in England on January 1, 1942. His doctoral advisor was Dennis William Sciama and his professional field was General Relativity.","(Brandon_Carter | professionalField | General_relativity)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)
(Brandon_Carter | birthPlace | England)
(Brandon_Carter | birthDate | 1942-01-01)","(""Brandon Carter"" | ""birthPlace"" | ""England"")
(""Brandon Carter"" | ""birthDate"" | ""January 1, 1942"")
(""Brandon Carter"" | ""doctoralAdvisor"" | ""Dennis William Sciama"")
(""Brandon Carter"" | ""profession"" | ""General Relativity"")"
1341,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The elevation above the sea level for Ciudad Ayala is 1147.0.,(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0),(Ciudad Ayala | elevation above sea level | 1147.0)
1342,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng was born in Zaoyang in the People's Republic of China on the 13th of October 1964 and also worked as a fighter pilot.,"(Nie_Haisheng | birthPlace | Zaoyang)
(""Nie_Haisheng | nationality | People's_Republic_of_China)
(Nie_Haisheng | birthDate | 1964-10-13)
(Nie_Haisheng | occupation | Fighter_pilot)","(""Nie Haisheng"" | ""birthPlace"" | ""Zaoyang"")
(""Nie Haisheng"" | ""birthPlace"" | ""People's Republic of China"")
(""Nie Haisheng"" | ""birthDate"" | ""13th of October 1964"")
(""Nie Haisheng"" | ""occupation"" | ""fighter pilot"")"
1343,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was an American born in New Hampshire on November 18th, 1923. He died in California. He was a test pilot.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | occupation | Test_pilot)","(Alan Shepard | type | American)
(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | birthDate | November 18th, 1923)
(Alan Shepard | deathPlace | California)
(Alan Shepard | occupation | test pilot)"
1344,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The dissolution of the Kingdom of England took place in 1707.,(Kingdom_of_England | dissolutionYear | 1707),"(""Kingdom of England"" | ""dissolutionYear"" | 1707)"
1345,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Danielle Harris had a main role in the movie Super Capers.,(Super_Capers | starring | Danielle_Harris),"(""Danielle Harris"" | ""hasRole"" | ""Main"")
(""Danielle Harris"" | ""participatedIn"" | ""Super Capers"")
(""Super Capers"" | ""hasParticipant"" | ""Danielle Harris"")"
1346,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Olga Bondareva’s given name is Olga Nikolaevna Bondareva and is on the most known professionals in the field of Mathematics. She graduated from Leningrad State University and works as an economist.,"(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | professionalField | Economics)
(Olga_Bondareva | professionalField | Mathematics)","(Olga Bondareva | given name | Olga Nikolaevna Bondareva)
(Olga Bondareva | profession | Mathematician)
(Olga Bondareva | alumni | Leningrad State University)
(Olga Bondareva | profession | Economist)"
1347,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","A monument to the 11th Mississippi Infantry was erected in 2000 in Adams County, Pennsylvania which has Carroll County, Maryland to the southeast. Interestingly, the 11th Mississippi Infantry Monument is categorised as a contributing property.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""A monument to the 11th Mississippi Infantry"" | ""date of creation"" | ""2000"")
(""A monument to the 11th Mississippi Infantry"" | ""location"" | ""Adams County, Pennsylvania"")
(""Adams County, Pennsylvania"" | ""has border with"" | ""Carroll County, Maryland"")
(""Carroll County, Maryland"" | ""geographical location"" | ""Southeast of Adams County, Pennsylvania"")
(""11th Mississippi Infantry Monument"" | ""is a"" | ""contributing property"")"
1348,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Year of No Light releases its albums with the record label E-Vinyl.,(Year_of_No_Light | recordLabel | E-Vinyl),"(Year of No Light | releases | albums)
(albums | with | E-Vinyl)
(Year of No Light | record label | E-Vinyl)"
1349,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",African Americans are an ethnic group in the U.S.A. where Ruth Ribicoff and Abraham A. Ribicoff were husband and wife. Abraham died in the US and was a US citizen who was in office while John F. Kennedy was president.,"(Abraham_A._Ribicoff | spouse | ""Ruth Ribicoff"")
(Abraham_A._Ribicoff | inOfficeWhilePresident | John_F._Kennedy)
(Abraham_A._Ribicoff | nationality | American)
(Abraham_A._Ribicoff | deathPlace | United_States)
(United_States | ethnicGroup | African_Americans)","(African Americans | are | ethnic group)
(African Americans | in | U.S.A.)
(Ruth Ribicoff | wife of | Abraham A. Ribicoff)
(Abraham A. Ribicoff | husband of | Ruth Ribicoff)
(Abraham A. Ribicoff | died in | U.S.)
(Abraham A. Ribicoff | citizenship | U.S.)
(Abraham A. Ribicoff | in office during | John F. Kennedy's presidency)
(John F. Kennedy | was president during | Abraham A. Ribicoff's office term)"
1350,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Jamie Lawrence is the music composer of the film 'Death on a Factory Farm' which lasts 83 minutes produced by Sarah Teale.,"(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)
(Death_on_a_Factory_Farm | runtime | 83.0)
(Death_on_a_Factory_Farm | producer | Sarah_Teale)","(Jamie Lawrence | type | Music Composer)
(Jamie Lawrence | composes music for | Death on a Factory Farm)
(Death on a Factory Farm | type | film)
(Death on a Factory Farm | duration | 83 minutes)
(Death on a Factory Farm | produced by | Sarah Teale)
(Sarah Teale | type | producer)
(Sarah Teale | produces | Death on a Factory Farm)"
1351,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Hypermarcas's revenue is $1,800,000,000.",(Hypermarcas | revenue | 1800000000),"(Hypermarcas | revenue | $1,800,000,000)"
1352,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Alan B Miller Hall, located in Virginia, was completed on June 1, 2009 and currently houses the Mason School of Business.","(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | completionDate | 2009-06-01)
(Alan_B._Miller_Hall | location | Virginia)","(Alan B Miller Hall | location | Virginia)
(Alan B Miller Hall | completion date | June 1, 2009)
(Alan B Miller Hall | houses | Mason School of Business)"
1353,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Hypermarcas is a pharmaceutical company that produces pharmaceutical drugs and healthcare products.,"(Hypermarcas | product | Drugs)
(Hypermarcas | industry | Pharmaceuticals)
(Hypermarcas | product | Healthcare)","(Hypermarcas | type | pharmaceutical company)
(Hypermarcas | produces | pharmaceutical drugs)
(Hypermarcas | produces | healthcare products)"
1354,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The postal codes of Karlsruhe are 76131–76229.,(Karlsruhe | postalCode | 76131–76229),"(""Karlsruhe"" | ""hasPostalCode"" | ""76131"")
(""Karlsruhe"" | ""hasPostalCode"" | ""76229"")"
1355,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Tom Simon directed and produced Death on a Factory Farm which was broadcasted by HBO. The movie had Geof Bartz as the editor and Jamie Lawrence as the music composer.,"(Death_on_a_Factory_Farm | director | Tom_Simon)
(Death_on_a_Factory_Farm | producer | Tom_Simon)
(Death_on_a_Factory_Farm | broadcastedBy | HBO)
(Death_on_a_Factory_Farm | editor | Geof_Bartz)
(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)","(""Tom Simon"" | ""directed"" | ""Death on a Factory Farm"")
(""Tom Simon"" | ""produced"" | ""Death on a Factory Farm"")
(""Death on a Factory Farm"" | ""broadcastedBy"" | ""HBO"")
(""Death on a Factory Farm"" | ""hasEditor"" | ""Geof Bartz"")
(""Death on a Factory Farm"" | ""hasMusicComposer"" | ""Jamie Lawrence"")"
1356,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Dennis William Sciama was doctoral advisor for Brandon Carter. Carter is known for the Carter Constant and his contributions to the no-hair theorem. His professional field is General Relativity.,"(Brandon_Carter | professionalField | General_relativity)
(Brandon_Carter | knownFor | Carter_constant)
(Brandon_Carter | knownFor | No-hair_theorem)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)","(Dennis William Sciama | doctoral advisor for | Brandon Carter)
(Brandon Carter | known for | Carter Constant)
(Brandon Carter | known for | his contributions to the no-hair theorem)
(Brandon Carter | professional field | General Relativity)"
1357,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Born in Saint Petersburg, Anatole de Grunwald grew up and later wrote ""English Without Tears"".","(Anatole_de_Grunwald | birthPlace | Saint_Petersburg)
(English_Without_Tears | writer | Anatole_de_Grunwald)","(""Anatole de Grunwald"" | ""birthPlace"" | ""Saint Petersburg""),
(""Anatole de Grunwald"" | ""wrote"" | ""English Without Tears"")"
1358,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Al Asad Airbase is operated by the United States Air Force and is found in Iraq.,"(Al_Asad_Airbase | operatingOrganisation | United_States_Air_Force)
(Al_Asad_Airbase | location | Iraq)","(""Al Asad Airbase"" | ""is operated by"" | ""United States Air Force""),
(""Al Asad Airbase"" | ""is found in"" | ""Iraq"")"
1359,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The total population in Mexico is 119530753.,(Mexico | populationTotal | 119530753),(Mexico | totalPopulation | 119530753)
1360,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Turn Me On is a punk blues album preceded by the albums Let it Breed and Love American Style.,"(Turn_Me_On_(album) | genre | Punk_blues)
(Turn_Me_On_(album) | precededBy | Let_It_Breed)
(Let_It_Breed | precededBy | Love_American_Style_(album))","(""Turn Me On"" | type | ""punk blues album"")
(""Turn Me On"" | preceded by | ""Let it Breed"")
(""Turn Me On"" | preceded by | ""Love American Style"")"
1361,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bionico is served at the dessert course in Mexico and one of the ingredients of this food is granola. In Mexico, the local currency is the peso and the ethnonym of the local people is ‘Mexican’. The leader of Mexico is Silvano Aureoles Conejo.","(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Mexico | leader | Silvano_Aureoles_Conejo)
(Bionico | ingredient | Granola)
(Bionico | country | Mexico)","(""Bionico"" | ""courseType"" | ""dessert"")
(""Bionico"" | ""isServedIn"" | ""Mexico"")
(""Bionico"" | ""hasIngredient"" | ""granola"")
(""Mexico"" | ""hasCurrency"" | ""peso"")
(""Mexico"" | ""hasEthnonym"" | ""Mexican"")
(""Mexico"" | ""hasLeader"" | ""Silvano Aureoles Conejo"")"
1362,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva is a citizen of the United States attended Humboldt University her professional field is Mathematical optimization,known by stochastic programming.","(Darinka_Dentcheva | citizenship | United_States)
(Darinka_Dentcheva | professionalField | Mathematical_optimization)
(Darinka_Dentcheva | knownFor | Stochastic_programming)
(Darinka_Dentcheva | almaMater | Humboldt_University)","(Darinka Dentcheva | citizenship | United States)
(Darinka Dentcheva | attended | Humboldt University)
(Darinka Dentcheva | professional field | Mathematical optimization)
(Darinka Dentcheva | known for | stochastic programming)"
1363,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The United States area total is 9,833,520.",(United_States | areaTotal | 9833520000000.0),"(United States | areaTotal | 9,833,520)"
1364,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, a Leningrad State University graduate worked in the field of Mathematics and Economics. She died in Saint Petersburg on ninth of December 1991.","(Olga_Bondareva | deathPlace | Saint_Petersburg)
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | deathDate | 1991-12-09)
(Olga_Bondareva | professionalField | Economics)
(Olga_Bondareva | professionalField | Mathematics)","(Olga Bondareva | type | Person)
(Olga Bondareva | graduateOf | Leningrad State University)
(Leningrad State University | type | University)
(Olga Bondareva | fieldOfWork | Mathematics)
(Olga Bondareva | fieldOfWork | Economics)
(Olga Bondareva | deathDate | ninth of December 1991)
(Olga Bondareva | deathPlace | Saint Petersburg)
(Saint Petersburg | type | City)
"
1365,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Piotr Hallmann, currently weighing 70.308 kg, was born on the 25th of August 1987, in Gdynia, Poland,.","(Piotr_Hallmann | birthDate | 1987-08-25)
(Piotr_Hallmann | birthPlace | Gdynia,_Poland)
(Piotr_Hallmann | weight | 70.308)","(Piotr Hallmann | birthDate | ""1987-08-25"")
(Piotr Hallmann | birthPlace | Gdynia)
(Gdynia | country | Poland)
(Piotr Hallmann | weight | 70.308)"
1366,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Online game producer GMA New Media, headquartered in the GMA Network Center in the Philippines, offers services concerning the World Wide Web.","(GMA_New_Media | location | GMA_Network_Center)
(GMA_New_Media | product | Online_Game)
(GMA_New_Media | location | Philippines)
(GMA_New_Media | product | World_Wide_Web)","(""GMA New Media"" | type | ""Online game producer"")
(""GMA New Media"" | location | ""GMA Network Center"")
(""GMA Network Center"" | location | ""Philippines"")
(""GMA New Media"" | offers | ""services"")
(""services"" | concerning | ""World Wide Web"")"
1367,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lionsgate, located in the United States, distributed the film Super Capers, along with Roadside Attractions.","(Super_Capers | distributor | Roadside_Attractions)
(Lionsgate | location | United_States)
(Super_Capers | distributor | Lionsgate)","(""Lionsgate"" | ""location"" | ""United States"")
(""Lionsgate"" | ""distributed"" | ""Super Capers"")
(""Roadside Attractions"" | ""distributed"" | ""Super Capers"")
(""Super Capers"" | ""distributedBy"" | ""Lionsgate"")
(""Super Capers"" | ""distributedBy"" | ""Roadside Attractions"")"
1368,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Danielle Harris stars in Super Capers, which was directed by Ray Griggs. The movie is 98 minutes long.","(Super_Capers | starring | Danielle_Harris)
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | runtime | 98.0)","(""Danielle Harris"" | ""starsIn"" | ""Super Capers"")
(""Super Capers"" | ""directedBy"" | ""Ray Griggs"")
(""Super Capers"" | ""runtimeMinutes"" | 98)"
1369,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","It’s Great to Be Young has taken 282,838 pounds at the box office.","(""It's_Great_to_Be_Young_(1956_film) | gross | 282838.0"")","(""It's Great to Be Young"" | revenue | 282838 pounds)
(""It's Great to Be Young"" | location | ""box office"")"
1370,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The metropolitan Mexican city Ciudad Ayala is led by the City Manager under a council-manager government and has a population of 1,777,539, and a population density of 1604.0.","(Ciudad_Ayala | populationMetro | 1777539)
(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | type | City)
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | governmentType | Council-manager_government)
(Ciudad_Ayala | country | Mexico)","(""Ciudad Ayala"" | ""type"" | ""Metropolitan City"")
(""Ciudad Ayala"" | ""country"" | ""Mexico"")
(""Ciudad Ayala"" | ""governmentType"" | ""Council-Manager"")
(""Ciudad Ayala"" | ""leaderTitle"" | ""City Manager"")
(""Ciudad Ayala"" | ""populationTotal"" | 1777539)
(""Ciudad Ayala"" | ""populationDensity"" | 1604.0)"
1371,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Born in 1878, Harry Carey stars in McVeagh of the South Seas, which he also wrote. The film is distributed by Alliance Films Corporation, and is registered in IMBD under the ID 0004319.","(McVeagh_of_the_South_Seas | imdbId | 0004319)
(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | writer | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | distributor | Alliance_Films_Corporation)","(Harry Carey | birthYear | 1878)
(Harry Carey | actedIn | McVeagh of the South Seas)
(Harry Carey | authored | McVeagh of the South Seas)
(McVeagh of the South Seas | stars | Harry Carey)
(McVeagh of the South Seas | writer | Harry Carey)
(McVeagh of the South Seas | distributor | Alliance Films Corporation)
(McVeagh of the South Seas | IMBD_ID | 0004319)
(Alliance Films Corporation | distributes | McVeagh of the South Seas)"
1372,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1147 Stavropolis, an asteroid discovered by Grigory Neujmin, has apoapsis of 418476000000.0 AU and magnitude of 11.5.","(1147_Stavropolis | discoverer | Grigory_Neujmin)
(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | absoluteMagnitude | 11.5)","(""1147 Stavropolis"" | ""discoveredBy"" | ""Grigory Neujmin""),
(""Grigory Neujmin"" | ""discovered"" | ""1147 Stavropolis""),
(""1147 Stavropolis"" | ""hasApoapsis"" | 418476000000.0 AU),
(""1147 Stavropolis"" | ""hasMagnitude"" | 11.5)"
1373,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Mermaid by Train is a pop rock song released on December 27th, 2012. It is three minutes and sixteen seconds long.","(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | releaseDate | 2012-12-27)","(""Mermaid"" | ""by"" | ""Train"")
(""Mermaid"" | ""is a"" | ""pop rock song"")
(""Mermaid"" | ""released on"" | ""December 27th, 2012"")
(""Mermaid"" | ""is"" | ""three minutes and sixteen seconds long"")"
1374,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Bootleg Series Volume one: The Quine Tapes was recorded in San Francisco, a city in the United States. San Francisco is in the Pacific timezone and its leader is Ed Lee.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | San_Francisco)
(San_Francisco | leader | Ed_Lee_(politician))
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | United_States)
(San_Francisco | timeZone | Pacific_Time_Zone)","(""The Bootleg Series Volume one: The Quine Tapes"" | wasRecordedIn | ""San Francisco"")
(""San Francisco"" | isLocatedIn | ""United States"")
(""San Francisco"" | hasTimezone | ""Pacific timezone"")
(""San Francisco"" | hasLeader | ""Ed Lee"")"
1375,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","A part of the state of Morelos, Ciudad Ayala's leader is known as the Governator. The city is based 1147 m above sea level and has a population of density of 1604.","(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | leaderTitle | Governator)
(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)","(""Ciudad Ayala"" | ""is part of"" | ""Morelos"")
(""Ciudad Ayala"" | ""has leader"" | ""Governator"")
(""Ciudad Ayala"" | ""elevation"" | ""1147 m"")
(""Ciudad Ayala"" | ""population density"" | ""1604"")"
1376,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva, born on January 1, 1958, is a mathematician working in the field of mathematical optimization.","(Darinka_Dentcheva | birthDate | 1958-01-01)
(Darinka_Dentcheva | professionalField | Mathematical_optimization)","(Darinka Dentcheva | birthDate | ""January 1, 1958"")
(Darinka Dentcheva | profession | ""mathematician"")
(Darinka Dentcheva | fieldOfWork | ""mathematical optimization"")"
1377,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Estádio Municipal Coaracy da Mata Fonseca ground belongs to Agremiacao Sportiva Arapiraquense and is located in Arapiraca. Agremiação Sportiva Arapiraquense play in 2015 in the Campeonato Brasileiro Série C league, which is based in Brazil. Vila Nova Futebol Clube are the champions of Campeonato Brasileiro Serie C.","(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Agremiação_Sportiva_Arapiraquense | season | 2015_Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | country | Brazil)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(""Estádio Municipal Coaracy da Mata Fonseca"" | ""belongsTo"" | ""Agremiacao Sportiva Arapiraquense"")
(""Estádio Municipal Coaracy da Mata Fonseca"" | ""location"" | ""Arapiraca"")
(""Agremiação Sportiva Arapiraquense"" | ""playsInLeague"" | ""Campeonato Brasileiro Série C"")
(""Agremiação Sportiva Arapiraquense"" | ""playYear"" | ""2015"")
(""Campeonato Brasileiro Série C"" | ""basedIn"" | ""Brazil"")
(""Vila Nova Futebol Clube"" | ""championOf"" | ""Campeonato Brasileiro Serie C"")"
1378,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The leader of France's title is ""President of the Senate.""","(France | leaderTitle | ""President of the Senate"")","(""leader of France"" | title | ""President of the Senate"")"
1379,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Mexican state of Morelos has a UTC offset of -6.,(Morelos | utcOffset | −6),"(Morelos | isLocatedInCountry | Mexico)
(Morelos | hasUTCOffset | ""-6"")"
1380,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Established in the year 2000, the 11th Mississippi Infantry Monument is located in Adams County, Pennsylvania. The monument falls under the category of Contributing Property and can be found northeast of Carroll County, Maryland.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | state | ""Pennsylvania"")
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""11th Mississippi Infantry Monument"" | ""dateEstablished"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Adams County, Pennsylvania"")
(""11th Mississippi Infantry Monument"" | ""category"" | ""Contributing Property"")
(""11th Mississippi Infantry Monument"" | ""nearLocation"" | ""Carroll County, Maryland"")"
1381,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina studied at the School of Applied Arts in Stuttgart.,(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart),"(""Liselotte Grschebina"" | ""studied at"" | ""School of Applied Arts in Stuttgart"")"
1382,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Pontiac Rageous went into production in 1997.,(Pontiac_Rageous | productionStartYear | 1997),"(""Pontiac Rageous"" | ""productionStartYear"" | ""1997"")"
1383,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Brandon Carter born in England, January 1, 1942 is a professional physicist in the field of General Relativity. Dennis William Sciama was his doctoral general advisor. The University of Cambridge is Brandon Carter's alma mater.","(Brandon_Carter | professionalField | General_relativity)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)
(Brandon_Carter | birthPlace | England)
(Brandon_Carter | birthDate | 1942-01-01)
(Brandon_Carter | almaMater | University_of_Cambridge)","(Brandon Carter | birthPlace | England)
(Brandon Carter | birthDate | January 1, 1942)
(Brandon Carter | profession | physicist)
(Brandon Carter | field | General Relativity)
(Dennis William Sciama | advisee | Brandon Carter)
(Brandon Carter | doctoralAdvisor | Dennis William Sciama)
(Brandon Carter | almaMater | University of Cambridge)"
1384,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala is a part of Morelos, has a population density of 1604.0 and has a UTC offset of -6.","(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | utcOffset | −6)
(Ciudad_Ayala | isPartOf | Morelos)","(Ciudad Ayala | part of | Morelos)
(Ciudad Ayala | hasPopulationDensity | 1604.0)
(Ciudad Ayala | hasUTCOffset | -6)"
1385,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Piotr Hallmann was born in Gdynia, Poland on August 23, 1987. Gdynia is governed by a vice president.","(Piotr_Hallmann | birthPlace | Gdynia,_Poland)
(Gdynia,_Poland | leaderTitle | ""Vice President"")
(Piotr_Hallmann | birthDate | 1987-08-25)","(Piotr Hallmann | birthDate | August 23, 1987)
(Piotr Hallmann | birthPlace | Gdynia)
(Piotr Hallmann | nationality | Poland)
(Gdynia | placeOfBirth | Piotr Hallmann)
(Gdynia | isPartOf | Poland)
(Gdynia | governedBy | vice president)"
1386,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The stylistic origin of reggae is ska.,(Reggae | stylisticOrigin | Ska),(reggae | stylistic origin | ska)
1387,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva, who was born on January 1, 1958, currently resides in New Jersey, USA. He is most known for Stochastic programming in the field of mathematical optimization influenced by Andrzej Piotr Ruszczyński.","(Darinka_Dentcheva | influencedBy | Andrzej_Piotr_Ruszczyński)
(Darinka_Dentcheva | citizenship | United_States)
(Darinka_Dentcheva | birthDate | 1958-01-01)
(Darinka_Dentcheva | professionalField | Mathematical_optimization)
(Darinka_Dentcheva | knownFor | Stochastic_programming)
(Darinka_Dentcheva | residence | New_Jersey)
(Darinka_Dentcheva | residence | United_States)","(""Darinka Dentcheva"" | ""birthDate"" | ""1958-01-01"")
(""Darinka Dentcheva"" | ""birthPlace"" | ""unknown"")
(""Darinka Dentcheva"" | ""residence"" | ""New Jersey, USA"")
(""Darinka Dentcheva"" | ""influencedBy"" | ""Andrzej Piotr Ruszczyński"")
(""Darinka Dentcheva"" | ""knownFor"" | ""Stochastic programming"")
(""Stochastic programming"" | ""isPartOf"" | ""mathematical optimization"")"
1388,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva, a citizen of the United states and alumni of Humboldt University known for her work with stochastic programming, has a residence in the state of New Jersey, United States.","(Darinka_Dentcheva | citizenship | United_States)
(Darinka_Dentcheva | knownFor | Stochastic_programming)
(Darinka_Dentcheva | almaMater | Humboldt_University)
(Darinka_Dentcheva | residence | New_Jersey)
(Darinka_Dentcheva | residence | United_States)","(Darinka Dentcheva | type | Person)
(Darinka Dentcheva | citizenship | United States)
(Darinka Dentcheva | alumni of | Humboldt University)
(Darinka Dentcheva | known for | stochastic programming)
(Darinka Dentcheva | residence | New Jersey)
(New Jersey | part of | United States)"
1389,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The ALCO RS-3 was produced between May 1950 and August 1956. It was 17068.8 millimetres long and boasted a 12-cylinder four-stroke engine.,"(ALCO_RS-3 | buildDate | ""May 1950 - August 1956"")
(ALCO_RS-3 | engine | Four-stroke_engine)
(ALCO_RS-3 | cylinderCount | 12)
(ALCO_RS-3 | length | 17068.8 (millimetres))","(ALCO_RS-3 | producedDate_start | ""May 1950"")
(ALCO_RS-3 | producedDate_end | ""August 1956"")
(ALCO_RS-3 | length_mm | 17068.8)
(ALCO_RS-3 | hasPart | 12_cylinder_engine)
(12_cylinder_engine | partOf | ALCO_RS-3)
(12_cylinder_engine | cylinderNumber | 12)
(12_cylinder_engine | cycleType | ""four-stroke"")"
1390,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy, who was born in Reşadiye, is now residing in in Tesvikiye.","(Nurhan_Atasoy | birthPlace | Reşadiye)
(Nurhan_Atasoy | residence | Teşvikiye)","(""Nurhan Atasoy"" | ""birthPlace"" | ""Reşadiye"")
(""Nurhan Atasoy"" | ""residence"" | ""Tesvikiye"")"
1391,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Cumberland county is to the north of Adams County, Pennsylvania, the location of the 11th Mississippi Infantry Monument.","(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsNorth | Cumberland_County,_Pennsylvania)","(""Cumberland county"" | ""location"" | ""north of Adams County, Pennsylvania"")
(""Adams County, Pennsylvania"" | ""location"" | ""Cumberland county"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Adams County, Pennsylvania"")"
1392,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, born ""Olga Nikolaevna Bondareva"", graduated from Leningrad State University and currently works in the fields of Economics and Mathematics.","(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | professionalField | Economics)
(Olga_Bondareva | professionalField | Mathematics)","(Olga Bondareva | birthName | ""Olga Nikolaevna Bondareva"")
(Olga Bondareva | almaMater | Leningrad State University)
(Olga Bondareva | occupation | Economics)
(Olga Bondareva | occupation | Mathematics)"
1393,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Hypermarcas is a type of S.A (corporation) that was founded on January 1, 2001.","(Hypermarcas | foundingDate | 2001-01-01)
(Hypermarcas | type | S.A._(corporation))","(Hypermarcas | type | S.A)
(Hypermarcas | foundedOn | January 1, 2001)"
1394,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva resides is in New Jersey, where English is commonly spoken.","(Darinka_Dentcheva | residence | New_Jersey)
(New_Jersey | language | English_language)","(""Darinka Dentcheva"" | ""residesIn"" | ""New Jersey"")
(""New Jersey"" | ""language"" | ""English"")"
1395,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry monument is located in Adams county, state of Pennsylvania .The Mississippi Infantry Monument is categorized as a contributing property.","(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | state | ""Pennsylvania"")
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""11th Mississippi Infantry monument"" | ""location"" | ""Adams county"")
(""11th Mississippi Infantry monument"" | ""isLocatedIn"" | ""Pennsylvania"")
(""Mississippi Infantry Monument"" | ""type"" | ""contributing property"")"
1396,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology established in the year 2000, is affiliated with the Visvesvaraya Technological University.","(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | established | 2000)","(""Acharya Institute of Technology"" | ""establishedIn"" | ""2000"")
(""Acharya Institute of Technology"" | ""affiliatedWith"" | ""Visvesvaraya Technological University"")"
1397,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The pop rock genre song, ""Mermaid"", was written by the band, Train. ""Mermaid"", which runs for 3.16 minutes, is on Columbia Records. ""Mermaid"", which was preceded by the Train hit song, ""This'll Be My Year"", was released under the record label, Sony Music Entertainment.","(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)
(""Mermaid_(Train_song) | precededBy | This'll_Be_My_Year"")","(""Mermaid"" | type | ""pop rock genre song"")
(""Mermaid"" | writtenBy | ""Train"")
(""Mermaid"" | duration | ""3.16 minutes"")
(""Mermaid"" | recordedOn | ""Columbia Records"")
(""Mermaid"" | predecessor | ""This'll Be My Year"")
(""Mermaid"" | releasedBy | ""Sony Music Entertainment"")
(""Train"" | wrote | ""Mermaid"")
(""Columbia Records"" | hasSong | ""Mermaid"")
(""This'll Be My Year"" | succeededBy | ""Mermaid"")
(""Sony Music Entertainment"" | release | ""Mermaid"")"
1398,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng was born in Zaoyang city which is in the Hubei province. He was part of the Shenzhou 6 and Shenzhou 10 missions.,"(Nie_Haisheng | mission | Shenzhou_10)
(Nie_Haisheng | mission | Shenzhou_6)
(Nie_Haisheng | birthPlace | Zaoyang)
(Zaoyang | isPartOf | Hubei)","(Nie Haisheng | birthPlace | Zaoyang city)
(Zaoyang city | locatedIn | Hubei province)
(Nie Haisheng | partOf | Shenzhou 6 mission)
(Nie Haisheng | partOf | Shenzhou 10 mission)"
1399,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The College of William and Mary is the owner of the Alan B. Miller Hall (completed on June 1st, 2009). Robert A. M. Stern was the architect.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | completionDate | 2009-06-01)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""The College of William and Mary"" | ""ownership"" | ""Alan B. Miller Hall"")
(""Alan B. Miller Hall"" | ""completionDate"" | ""June 1st, 2009"")
(""Robert A. M. Stern"" | ""architectOf"" | ""Alan B. Miller Hall"")"
1400,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",McVeagh of the South Seas IMDb Id is 0004319. It stars actor Harry Carey who was born in 1878. The movie was also written by him and distributed by Alliance Films Corporation.,"(McVeagh_of_the_South_Seas | imdbId | 0004319)
(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | writer | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | distributor | Alliance_Films_Corporation)","(McVeagh of the South Seas | IMDb Id | ""0004319"")
(McVeagh of the South Seas | stars | Harry Carey)
(Harry Carey | birthDate | ""1878"")
(McVeagh of the South Seas | writer | Harry Carey)
(McVeagh of the South Seas | distributor | Alliance Films Corporation)"
1401,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Mason School of Business is located in the United States at 101 Ukrop Way, Williamsburg Virginia in a building known as the Alan B. Miller Hall. The hall, which was designed by Robert A.M. Stern, is owned by The College of William and Mary and began construction on the 30th of March 2007.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | location | Williamsburg,_Virginia)
(Mason_School_of_Business | country | United_States)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(Mason School of Business | location | United States)
(Mason School of Business | address | 101 Ukrop Way, Williamsburg Virginia)
(Mason School of Business | housed in | Alan B. Miller Hall)
(Alan B. Miller Hall | architect | Robert A.M. Stern)
(Alan B. Miller Hall | owner | The College of William and Mary)
(Alan B. Miller Hall | construction start date | 30th of March 2007)"
1402,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Owned by the College of William and Mary and tenanted by the Mason School of Business, the Alan B Miller Hall's building is based at 101 Ukrop Way, Williamsburg, Virginia, USA. It was built by Robert Stern with building starting on 30 March of 2007.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | location | Williamsburg,_Virginia)
(Mason_School_of_Business | country | United_States)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(Alan B Miller Hall | owned by | College of William and Mary)
(Alan B Miller Hall | tenant | Mason School of Business)
(Alan B Miller Hall | location | 101 Ukrop Way, Williamsburg, Virginia, USA)
(Alan B Miller Hall | architect | Robert Stern)
(Alan B Miller Hall | building started on | 30 March 2007)"
1403,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",1147 Stavropolis epoch is 31 July 2016 (Julian Day 2457600.5).,(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5)),"(1147 Stavropolis | epoch | 31 July 2016)
(1147 Stavropolis | Julian Day | 2457600.5)"
1404,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","11th Mississippi Infantry Monument's location is Adams County, Pennsylvania and falls under the category of contributing property.","(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | state | ""Pennsylvania"")
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""11th Mississippi Infantry Monument"" | ""location"" | ""Adams County, Pennsylvania"")
(""11th Mississippi Infantry Monument"" | ""type"" | ""contributing property"")"
1405,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Parti Pesaka Bumiputera Bersatu member, Abdul Taib Mahmud was succeeded by Adenan Satem.","(Abdul_Taib_Mahmud | successor | Adenan_Satem)
(Abdul_Taib_Mahmud | party | Parti_Pesaka_Bumiputera_Bersatu)","(""Parti Pesaka Bumiputera Bersatu"" | ""member"" | ""Abdul Taib Mahmud"")
(""Abdul Taib Mahmud"" | ""succeeded by"" | ""Adenan Satem"")"
1406,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng was a crew member on Shenzhou 6.,(Nie_Haisheng | mission | Shenzhou_6),"(""Nie Haisheng"" | ""type"" | ""Person""),
(""Nie Haisheng"" | ""crewMemberOn"" | ""Shenzhou 6""),
(""Shenzhou 6"" | ""type"" | ""Spacecraft"")"
1407,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina was a photographer who was born on the 2nd of May 1908.,"(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | professionalField | Photographer)","(Liselotte Grschebina | type | Photographer)
(Liselotte Grschebina | birthDate | ""2nd of May 1908"")"
1408,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala is part of Morelos, it has a UTC offset of -6 and the population density is 1604.","(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | utcOffset | −6)
(Ciudad_Ayala | isPartOf | Morelos)","(""Ciudad Ayala"" | ""part of"" | ""Morelos""),
(""Ciudad Ayala"" | ""UTC offset"" | ""-6""),
(""Ciudad Ayala"" | ""population density"" | ""1604"")"
1409,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Super Capers is a 98 minute film starring Michael Rooker and Tom Sizemore.,"(Super_Capers | starring | Michael_Rooker)
(Super_Capers | starring | Tom_Sizemore)
(Super_Capers | runtime | 98.0)","(""Super Capers"" | ""type"" | ""Film"")
(""Super Capers"" | ""duration"" | ""98 minutes"")
(""Super Capers"" | ""starring"" | ""Michael Rooker"")
(""Super Capers"" | ""starring"" | ""Tom Sizemore"")"
1410,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiacao Sportiva Arapiraquense has 17000 members, playing in the Campeonato Brasileiro Serie C league. Estadio Municipal Coaracy da Mata Fonseca is the name of the ground of Agremiacao Sportiva Arapiraquense.","(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(Agremiacao Sportiva Arapiraquense | number of members | 17000)
(Agremiacao Sportiva Arapiraquense | participates in | Campeonato Brasileiro Serie C)
(Agremiacao Sportiva Arapiraquense | ground | Estadio Municipal Coaracy da Mata Fonseca)"
1411,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","First aired in October of 1983, Bananaman starred Bill Oddie and was created by Steve Bright. It was shown on the BBC, which have their headquarters at Broadcasting House.","(BBC | city | Broadcasting_House)
(Bananaman | starring | Bill_Oddie)
(Bananaman | creator | Steve_Bright)
(Bananaman | broadcastedBy | BBC)
(Bananaman | firstAired | ""1983-10-03"")","(""Bananaman"" | ""airDate"" | ""October of 1983"")
(""Bananaman"" | ""starring"" | ""Bill Oddie"")
(""Bananaman"" | ""creator"" | ""Steve Bright"")
(""Bananaman"" | ""broadcastedBy"" | ""BBC"")
(""BBC"" | ""headquarters"" | ""Broadcasting House"")"
1412,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology is affiliated with the Visvesvaraya Technological University and is located at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore-560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)","(Acharya Institute of Technology | affiliatedWith | Visvesvaraya Technological University)
(Acharya Institute of Technology | locatedAt | ""Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore-560090"")"
1413,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard is an American born on November 18th, 1923 in New Hampshire, graduated from NWC with an M.A. in 1957 where occupation was a test pilot. Alan Shepard was the Chief of the Astronaut Office in 1963 where he died in California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | servedAsChiefOfTheAstronautOfficeIn | 1963)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | almaMater | ""NWC, M.A. 1957"")
(Alan_Shepard | occupation | Test_pilot)","(Alan Shepard | type | Person)
(Alan Shepard | nationality | American)
(Alan Shepard | birthDate | November 18th, 1923)
(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | alumni | NWC)
(Alan Shepard | degree | M.A.)
(Alan Shepard | yearGraduated | 1957)
(Alan Shepard | occupation | test pilot)
(Alan Shepard | positionHeld | Chief of the Astronaut Office)
(Alan Shepard | yearPositionHeld | 1963)
(Alan Shepard | deathPlace | California)"
1414,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers, which had a running time of 98 minutes, was written and directed by Ray Griggs and starred Adam West.","(Super_Capers | starring | Adam_West)
(Super_Capers | writer | Ray_Griggs_(director))
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | runtime | 98.0)","(Super Capers | hadRunningTime | 98 minutes)
(Super Capers | wasWrittenBy | Ray Griggs)
(Super Capers | wasDirectedBy | Ray Griggs)
(Super Capers | starred | Adam West)"
1415,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy, located in the city of Dijon, has 27,400 students (16,800 being undergraduate) and 2,900 staff members.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfStudents | 27400)
(University_of_Burgundy | city | Dijon)","(""University of Burgundy"" | ""location"" | ""Dijon"")
(""University of Burgundy"" | ""totalStudents"" | ""27400"")
(""University of Burgundy"" | ""undergraduateStudents"" | ""16800"")
(""University of Burgundy"" | ""totalStaff"" | ""2900"")"
1416,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina (born on 1908-05-02 and died 14th of June, 1994) attended the School of Applied Arts in Stuttgart, before becoming a photographer.","(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)
(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | professionalField | Photographer)","(Liselotte Grschebina | birthDate | 1908-05-02)
(Liselotte Grschebina | deathDate | 1994-06-14)
(Liselotte Grschebina | attended | School of Applied Arts in Stuttgart)
(Liselotte Grschebina | occupation | photographer)"
1417,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Mermaid is a pop rock song by the band Train, written by Espen Lind with a length of 3 minutes and sixteen seconds, released on 26th December, 2012. The song came out after This’ll be my year.","(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | releaseDate | 2012-12-27)
(""Mermaid_(Train_song) | precededBy | This'll_Be_My_Year)
(Mermaid_(Train_song) | writer | Espen_Lind)","(""Mermaid"", ""type"", ""pop rock song"")
(""Mermaid"", ""by"", ""Train"")
(""Mermaid"", ""writtenBy"", ""Espen Lind"")
(""Mermaid"", ""length"", ""3 minutes and sixteen seconds"")
(""Mermaid"", ""releaseDate"", ""26th December, 2012"")
(""Mermaid"", ""follows"", ""This’ll be my year"")"
1418,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The University of Burgundy campus has staff members of 2900 is located in Dijon.,"(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | campus | Dijon)","(""The University of Burgundy"" | ""location"" | ""Dijon"")
(""The University of Burgundy"" | ""number of staff members"" | ""2900"")"
1419,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng worked as a fighter pilot.,(Nie_Haisheng | occupation | Fighter_pilot),"(""Nie Haisheng"" | ""rdf:type"" | ""Person"")
(""Nie Haisheng"" | ""profession"" | ""Fighter Pilot"")
(""Nie Haisheng"" | ""occupation"" | ""Fighter Pilot"")"
1420,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The pop rock song Mermaid by Train with runtime of three minutes and sixteen seconds was released on the date 2012-12-27 by Sony Music Entertainment and Columbia Records record labels.,"(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)
(Mermaid_(Train_song) | releaseDate | 2012-12-27)","(""Mermaid"" | type | ""pop rock song"")
(""Mermaid"" | creator | ""Train"")
(""Mermaid"" | duration | ""three minutes and sixteen seconds"")
(""Mermaid"" | release date | 2012-12-27)
(""Mermaid"" | published by | ""Sony Music Entertainment"")
(""Mermaid"" | published by | ""Columbia Records"")
(""Train"" | has created | ""Mermaid"")
(""Sony Music Entertainment"" | published | ""Mermaid"")
(""Columbia Records"" | published | ""Mermaid"")
(""Mermaid"" | type | ""song"")
(""Mermaid"" | genre | ""pop rock"")"
1421,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The population of the metropolitan area of Ciudad Ayala is 1,777,539 with a population density of 1604.0. One of the leaders from Ciudad Ayala is the City Manager.","(Ciudad_Ayala | populationMetro | 1777539)
(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | populationDensity | 1604.0)","(Ciudad Ayala | type | Metropolitan area)
(Ciudad Ayala | populationTotal | 1,777,539)
(Ciudad Ayala | populationDensity | 1604.0)
(City Manager | leaderOf | Ciudad Ayala)"
1422,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson was born in Darlington, a town in the United Kingdom.","(Lady_Anne_Monson | birthPlace | Darlington)
(Darlington | country | United_Kingdom)","(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington"")
(""Darlington"" | ""isPartOf"" | ""United Kingdom"")"
1423,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Thurleigh is in the United Kingdom.,(Thurleigh | country | United_Kingdom),(Thurleigh | location | United Kingdom)
1424,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",1634: The Bavarian Crisis was written by Virginia DeMarce and Eric Flint and is 448 pages long.,"(1634:_The_Bavarian_Crisis | numberOfPages | ""448"")
(1634:_The_Bavarian_Crisis | author | ""Virginia DeMarce and Eric Flint"")","(""1634: The Bavarian Crisis"" | ""author"" | ""Virginia DeMarce"")
(""1634: The Bavarian Crisis"" | ""author"" | ""Eric Flint"")
(""1634: The Bavarian Crisis"" | ""length (pages)"" | ""448"")"
1425,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Asteroid 1147 Stavropolis has an orbital period of 1249.6 days with a rotation period of 20378.5. It is characterized by: apoapsis of 418476000000.0, periapsis of 260855000000, absolute magnitude of 11.5 and its epoch is 31 July 2016(Julian Day 2457600.5).","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | absoluteMagnitude | 11.5)
(1147_Stavropolis | rotationPeriod | 20378.5)
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))
(1147_Stavropolis | orbitalPeriod | 1249.6)","(1147 Stavropolis | orbital period | 1249.6 days)
(1147 Stavropolis | rotation period | 20378.5)
(1147 Stavropolis | characterized by apoapsis of | 418476000000.0)
(1147 Stavropolis | characterized by periapsis of | 260855000000)
(1147 Stavropolis | absolute magnitude | 11.5)
(1147 Stavropolis | epoch | 31 July 2016)
(1147 Stavropolis | epoch | Julian Day 2457600.5)"
1426,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva resides in New Jersey, USA. Her alma mater was Humboldt University. Darinka is known for stochastic programming.","(Darinka_Dentcheva | citizenship | United_States)
(Darinka_Dentcheva | knownFor | Stochastic_programming)
(Darinka_Dentcheva | almaMater | Humboldt_University)
(Darinka_Dentcheva | residence | New_Jersey)
(Darinka_Dentcheva | residence | United_States)","(Darinka Dentcheva | residesIn | ""New Jersey, USA"")
(Darinka Dentcheva | almaMater | Humboldt University)
(Darinka Dentcheva | isKnownFor | ""stochastic programming"")"
1427,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The album Turn Me On created and produced by the Honeymoon Killers is a punk blues album with a run time of 35.1 minutes. It was preceded by the Let it Breed album.,"(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | artist | The_Honeymoon_Killers_(American_band))
(Turn_Me_On_(album) | genre | Punk_blues)
(Turn_Me_On_(album) | producer | The_Honeymoon_Killers_(American_band))
(Turn_Me_On_(album) | precededBy | Let_It_Breed)","(""Turn Me On"" | creator | ""Honeymoon Killers""),
(""Turn Me On"" | producer | ""Honeymoon Killers""),
(""Turn Me On"" | type | ""punk blues album""),
(""Turn Me On"" | runtime | ""35.1 minutes""),
(""Turn Me On"" | precededBy | ""Let it Breed"")"
1428,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Piotr Hallmann was born on August 25, 1987 in Gdynia, Poland, which has a UTC offset of +2.","(Piotr_Hallmann | birthDate | 1987-08-25)
(Piotr_Hallmann | birthPlace | Gdynia,_Poland)
(Gdynia,_Poland | utcOffset | +2)","(Piotr Hallman | birthDate | ""August 25, 1987"")
(Piotr Hallman | birthPlace | Gdynia)
(Gdynia | country | Poland)
(Gdynia | utcOffset | +2)"
1429,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The German Empire's anthem is Die Wacht Am Rhein.,(German_Empire | anthem | Die_Wacht_am_Rhein),"(""German Empire"" | ""anthem"" | ""Die Wacht Am Rhein"")"
1430,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Expect a Miracle was recorded by the artist Brian Kelly.,(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist)),"(""Expect a Miracle"" | ""recordedBy"" | ""Brian Kelly"")"
1431,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala is located in the country of Mexico which is led by Roberto Gil Zuarth.,"(Ciudad_Ayala | country | Mexico)
(Mexico | leader | Roberto_Gil_Zuarth)","(""Ciudad Ayala"" | ""isLocatedInCountry"" | ""Mexico""),
(""Mexico"" | ""isLedBy"" | ""Roberto Gil Zuarth"")"
1432,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Baymax first appeared as a film character in the film Big Hero 6.,"(Baymax | firstAppearanceInFilm | Big_Hero_6_(film))
(Baymax | series | Big_Hero_6_(film))","(Baymax | first appeared in | Big Hero 6)
(Baymax | type of | film character)
(Big Hero 6 | has character | Baymax)"
1433,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Born in Gdynia, Poland, Piotr Hallmann is 175.26 cm tall and weighs 70.308 kg.","(Piotr_Hallmann | height | 175.26)
(Piotr_Hallmann | birthPlace | Gdynia,_Poland)
(Piotr_Hallmann | weight | 70.308)","(Piotr Hallmann | birthPlace | Gdynia, Poland)
(Piotr Hallmann | height | 175.26 cm)
(Piotr Hallmann | weight | 70.308 kg)"
1434,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",1147 Stavropolis has a rotation period of 20378.5.,(1147_Stavropolis | rotationPeriod | 20378.5),"(""1147 Stavropolis"" | ""hasRotationPeriod"" | 20378.5)"
1435,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Formerly playing for FC Spartak Moscow's youth team, Aleksandr Prudnikov now plays for FC Terek Grozny.","(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(Aleksandr_Prudnikov | club | FC_Terek_Grozny)","(Aleksandr Prudnikov | formerTeam | FC Spartak Moscow's youth team)
(Aleksandr Prudnikov | currentTeam | FC Terek Grozny)"
1436,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1147 Stavropolis, discovered by Grigory Neujmin, has an apoapsis of 418476000000.0 and an absolute magnitude of 11.5.","(1147_Stavropolis | discoverer | Grigory_Neujmin)
(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | absoluteMagnitude | 11.5)","(""1147 Stavropolis"" | ""discoveredBy"" | ""Grigory Neujmin"")
(""1147 Stavropolis"" | ""hasApoapsis"" | 418476000000.0)
(""1147 Stavropolis"" | ""absoluteMagnitude"" | 11.5)"
1437,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Bedford Aerodrome has a runway named ""08/26"", located 83.2 meters above sea level.","(Bedford_Aerodrome | elevationAboveTheSeaLevel | 83.2104)
(Bedford_Aerodrome | runwayName | ""08/26"")","(""Bedford Aerodrome"" | ""hasRunway"" | ""08/26"")
(""08/26"" | ""locatedAt"" | ""Bedford Aerodrome"")
(""08/26""| ""elevation"" | ""83.2 meters"")"
1438,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Vivendi is the parent company of the Universal Music Group.,(Universal_Music_Group | parentCompany | Vivendi),"(""Vivendi"" | ""type"" | ""Company""),
(""Universal Music Group"" | ""type"" | ""Company""),
(""Vivendi"" | ""parentCompanyOf"" | ""Universal Music Group"")"
1439,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Hypermarcas, in the pharmaceutical industry, produces healthcare products and makes drugs.","(Hypermarcas | product | Drugs)
(Hypermarcas | industry | Pharmaceuticals)
(Hypermarcas | product | Healthcare)","(""Hypermarcas"" | ""type"" | ""Pharmaceutical Industry"")
(""Hypermarcas"" | ""industry"" | ""Pharmaceutical Industry"")
(""Hypermarcas"" | ""produces"" | ""Healthcare Products"")
(""Hypermarcas"" | ""makes"" | ""drugs"")"
1440,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Turkey has an area total of 783,356.0 km^2.",(Turkey | areaTotal | 783356.0),"(""Turkey"" | ""hasAreaTotal"" | 783356.0)"
1441,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was born on May 2, 1908 in Karlsruhe.","(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | birthDate | 1908-05-02)","(Liselotte Grschebina | birthDate | ""May 2, 1908"")
(Liselotte Grschebina | birthPlace | Karlsruhe)"
1442,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Bedford Aerodrome runway is made of concrete, and the aerodrome is 83.2 meters from above the sea level.","(Bedford_Aerodrome | elevationAboveTheSeaLevel | 83.2104)
(Bedford_Aerodrome | runwaySurfaceType | Concrete)","(Bedford Aerodrome | runwaySurface | ""concrete"")
(Bedford Aerodrome | elevation | 83.2)"
1443,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Istanbul's time zone is Eastern European Summer Time.,(Istanbul | timeZone | Eastern_European_Summer_Time),"(""Istanbul"" | ""timeZone"" | ""Eastern European Summer Time"")"
1444,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers, which was directed by Ray Griggs, starred Justin Whalin.","(Super_Capers | starring | Justin_Whalin)
(Super_Capers | director | Ray_Griggs_(director))","(""Super Capers"" | ""director"" | ""Ray Griggs""),
(""Super Capers"" | ""starring"" | ""Justin Whalin"")"
1445,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina (born May 2nd,1908) was a professional photographer.","(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | professionalField | Photographer)","(Liselotte Grschebina | type | Professional Photographer)
(Liselotte Grschebina | dateOfBirth | ""May 2, 1908"")"
1446,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was born in New Hampshire on 11/18/1923 then died in California, the state where Dianne Feinstein is a senator.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)
(California | senators | Dianne_Feinstein)","(Alan Shepard | birthPlace | New Hampshire)
(New Hampshire | dateOfBirth | ""11/18/1923""^^xsd:date)
(Alan Shepard | dateOfDeath | ""California"")
(Dianne Feinstein | positionHeld | ""senator"")
(Dianne Feinstein | stateAffiliation | California)"
1447,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Tom Sizemore, married to Maeve Quinlan, stars in the movie 'Super Capers'. The movie also stars Adam West.","(Super_Capers | starring | Tom_Sizemore)
(Tom_Sizemore | spouse | Maeve_Quinlan)
(Super_Capers | starring | Adam_West)","(Tom Sizemore | marriedTo | Maeve Quinlan)
(Tom Sizemore | starsIn | 'Super Capers')
('Super Capers' | stars | Tom Sizemore)
(Maeve Quinlan | marriedTo | Tom Sizemore)
(Adam West | starsIn | 'Super Capers')
('Super Capers' | stars | Adam West)"
1448,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Mexican currency of pesos can be used to buy a granola-containing dessert found in Guadalajara called Bionico, which the Mexicans inhabited Mexico eat. Cookie can also be eaten for dessert.","(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Bionico | region | Guadalajara)
(Bionico | ingredient | Granola)
(Dessert | dishVariation | Cookie)
(Bionico | country | Mexico)","(""Mexican currency"" | ""currencyType"" | ""pesos"")
(""pesos"" | ""canBeUsedToPurchase"" | ""Bionico"")
(""Bionico"" | ""type"" | ""granola-containing dessert"")
(""Bionico"" | ""location"" | ""Guadalajara"")
(""Mexico"" | ""inhabitedBy"" | ""Mexicans"")
(""Mexicans"" | ""consume"" | ""Bionico"")
(""Mexicans"" | ""consume"" | ""Cookie"")
(""Cookie"" | ""type"" | ""dessert"")"
1449,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Dennis William Sciama was the doctoral advisor of Brandon Carter, a physicist whose professional field was on General Relativity and was known for the invention of the Carter constant and for proving the no-hair theorem.","(Brandon_Carter | professionalField | General_relativity)
(Brandon_Carter | knownFor | Carter_constant)
(Brandon_Carter | knownFor | No-hair_theorem)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)","(Dennis William Sciama | doctoral advisor of | Brandon Carter)
(Brandon Carter | profession | physicist)
(Brandon Carter | field | General Relativity)
(Brandon Carter | known for | invention of the Carter constant)
(Brandon Carter | known for | proving the no-hair theorem)"
1450,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Mexico inhabited by Mexicans has peso as its currency. Bionico, a dessert with condensed milk, is found in Guadalajara, Mexico. Sandesh (confectionery) is also a dish that can be served as a dessert.","(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Bionico | region | Guadalajara)
(Dessert | dishVariation | Sandesh_(confectionery))
(Bionico | ingredient | Condensed_milk)
(Bionico | country | Mexico)","(""Mexico"" | ""hasCurrency"" | ""Peso"")
(""Mexico"" | ""inhabitant"" | ""Mexicans"")
(""Bionico"" | ""typeOfDish"" | ""dessert"")
(""Bionico"" | ""hasIngredient"" | ""condensed milk"")
(""Bionico"" | ""isFoundIn"" | ""Guadalajara, Mexico"")
(""Sandesh (confectionery)"" | ""typeOfDish"" | ""dessert"")"
1451,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Adolfo Suarez Madrid-Barajas Airport located in Alcobendas is operated by ENAIRE located in Madrid and has a runway length of 3500. Adolfo Suárez Madrid-Barajas Airport has an elevation of 610.0 metres above sea level.,"(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)","(""Adolfo Suarez Madrid-Barajas Airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""operatedBy"" | ""ENAIRE"")
(""ENAIRE"" | ""location"" | ""Madrid"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""runwayLength"" | literal 3500)
(""Adolfo Suarez Madrid-Barajas Airport"" | ""elevationInMeters"" | literal 610.0)"
1452,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Year of No Light, a post metal band, made an album called Nord, which record label Crucial Blast released on 06-09-2006.","(Nord_(Year_of_No_Light_album) | genre | Post-metal)
(Nord_(Year_of_No_Light_album) | recordLabel | Crucial_Blast)
(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)","(""Year of No Light"" | type | ""post metal band"")
(""Year of No Light"" | made | ""Nord"")
(""Nord"" | type | ""album"")
(""Crucial Blast"" | type | ""record label"")
(""Crucial Blast"" | released | ""Nord"")
(""Nord"" | releaseDate | ""06-09-2006"")"
1453,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Hypermarcas, founded on 2001-01-01, is an S.A. corporation in Brazil with a CEO as the key person.","(Hypermarcas | location | Brazil)
(Hypermarcas | keyPerson | CEO)
(Hypermarcas | foundingDate | 2001-01-01)
(Hypermarcas | type | S.A._(corporation))","(Hypermarcas | type | S.A. corporation)
(Hypermarcas | foundingDate | 2001-01-01)
(Hypermarcas | location | Brazil)
(Hypermarcas | keyPerson | CEO)"
1454,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Mexico is inhabited by Mexicans and their currency is the Peso. Cookies are a dessert but Mexicans also enjoy a dessert called Bionico which has sour cream, chopped fruit, condensed milk, granola, raisins and shredded coconut as its main ingredients.","(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Dessert | dishVariation | Cookie)
(Bionico | mainIngredient | ""Chopped Fruits, Sour Cream, Condensed Milk, Granola, Shredded Coconut, Raisins"")
(Bionico | country | Mexico)","(""Mexico"" | ""inhabitedBy"" | ""Mexicans"")
(""Mexico"" | ""hasCurrency"" | ""Peso"")
(""Cookies"" | ""typeOf"" | ""dessert"")
(""Mexicans"" | ""enjoy"" | ""Bionico"")
(""Bionico"" | ""typeOf"" | ""dessert"")
(""Bionico"" | ""hasIngredient"" | ""sour cream"")
(""Bionico"" | ""hasIngredient"" | ""chopped fruit"")
(""Bionico"" | ""hasIngredient"" | ""condensed milk"")
(""Bionico"" | ""hasIngredient"" | ""granola"")
(""Bionico"" | ""hasIngredient"" | ""raisins"")
(""Bionico"" | ""hasIngredient"" | ""shredded coconut"")"
1455,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Rageous coupe was assembled in Detroit, Michigan.","(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | assembly | Detroit)
(Pontiac_Rageous | bodyStyle | Coupe)","(""Pontiac Rageous coupe"" | ""was assembled in"" | ""Detroit, Michigan"")"
1456,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The movie ""It's great to be young"" written by Ted Willis was made in 1956 and ran 94 minutes. The movie starred John Mills and grossed 282,838 pounds at the box office. It was directed by Cyril Frankel with cinematography by Gilbert Taylor.","(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor)
(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | gross | 282838.0)
(""It's_Great_to_Be_Young_(1956_film) | director | Cyril_Frankel)
(""It's_Great_to_Be_Young_(1956_film) | writer | Ted_Willis"")","(""It's great to be young"" | writtenBy | ""Ted Willis"")
(""It's great to be young"" | year | 1956)
(""It's great to be young"" | runtimeMinutes | 94)
(""It's great to be young"" | starred | ""John Mills"")
(""It's great to be young"" | grossed | 282838)
(""It's great to be young"" | directedBy | ""Cyril Frankel"")
(""It's great to be young"" | cinematography | ""Gilbert Taylor"")"
1457,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson was born in Darlington in the Kingdom of England on 1726-01-01. Lady Anne Monson resided in India and was the spouse of George Monson. Lady Anne Monson died on February 18, 1776.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | deathDate | 1776-02-18)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | residence | India)
(Lady_Anne_Monson | spouse | George_Monson)","(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington"")
(""Lady Anne Monson"" | ""birthPlace.country"" | ""Kingdom of England"")
(""Lady Anne Monson"" | ""birthDate"" | ""1726-01-01""^^xsd:date)
(""Lady Anne Monson"" | ""residence"" | ""India"")
(""Lady Anne Monson"" | ""spouse"" | ""George Monson"")
(""Lady Anne Monson"" | ""deathDate"" | ""1776-02-18""^^xsd:date)"
1458,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Bedford Aerodrome in Thurleigh, has an operating organization called the MotorSport Vision and a runway length of 1095. Bedford Aerodrome serves the Bedford Autodrome and has a runway named ""08/26"".","(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | runwayLength | 1095.0)
(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | location | Thurleigh)
(Bedford_Aerodrome | runwayName | ""08/26"")","(""Bedford Aerodrome"" | ""location"" | ""Thurleigh"")
(""Bedford Aerodrome"" | ""hasOperatingOrganization"" | ""MotorSport Vision"")
(""Bedford Aerodrome"" | ""hasRunwayLength"" | 1095)
(""Bedford Aerodrome"" | ""serves"" | ""Bedford Autodrome"")
(""Bedford Aerodrome"" | ""hasRunway"" | ""08/26"")"
1459,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Turkey has a unitary form of government.,(Turkey | governmentType | Unitary_state),"(""Turkey"" | ""hasGovernmentForm"" | ""unitary form of government"")"
1460,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nurhan Atasoy was born on 1934-01-01 and currently resides and maintains citizenship in Turkey. He has a residence in Istanbul.,"(Nurhan_Atasoy | birthDate | 1934-01-01)
(Nurhan_Atasoy | residence | Istanbul)
(Nurhan_Atasoy | citizenship | Turkey)
(Nurhan_Atasoy | residence | Turkey)","(""Nurhan Atasoy"" | ""birthDate"" | ""1934-01-01"")
(""Nurhan Atasoy"" | ""residence"" | ""Turkey"")
(""Nurhan Atasoy"" | ""nationality"" | ""Turkey"")
(""Nurhan Atasoy"" | ""residence"" | ""Istanbul"")"
1461,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aleksandr Prudnikov was born on February 24, 1989 and played youth football for the FC Spartak Moscow and then for the FC Terek Grozny.","(Aleksandr_Prudnikov | birthDate | 1989-02-24)
(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(Aleksandr_Prudnikov | club | FC_Terek_Grozny)","(Aleksandr Prudnikov | birthDate | February 24, 1989)
(Aleksandr Prudnikov | youthClubs | FC Spartak Moscow)
(Aleksandr Prudnikov | youthClubs | FC Terek Grozny)"
1462,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Banking service, Chinabank, was founded on 1920-08-16.","(Chinabank | foundingDate | 1920-08-16)
(Chinabank | service | Banking)","(Chinabank | type | Banking service)
(Chinabank | foundingDate | 1920-08-16)"
1463,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nie Haisheng was born in Zaoyang, Hubei.","(Nie_Haisheng | birthPlace | Zaoyang)
(Nie_Haisheng | birthPlace | Hubei)","(""Nie Haisheng"" | birthPlace | ""Zaoyang, Hubei"")"
1464,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva was born in Leningrad, USSR, and studied at the Leningrad State University; she died in Saint Petersburg on December 9, 1991.","(Olga_Bondareva | birthPlace | Leningrad,_USSR)
(Olga_Bondareva | deathPlace | Saint_Petersburg)
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | deathDate | 1991-12-09)","(Olga Bondareva | was born in | Leningrad, USSR)
(Olga Bondareva | studied at | Leningrad State University)
(Olga Bondareva | died in | Saint Petersburg)
(Olga Bondareva | died on | December 9, 1991)"
1465,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","It's Great to Be Young, a 1956 film which received £282,838, had its music composed by Louis Levy and its cinematographer being Gilbert Taylor.","(""It's_Great_to_Be_Young_(1956_film) | gross | 282838.0)
(""It's_Great_to_Be_Young_(1956_film) | musicComposer | Louis_Levy)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor"")","(""It's Great to Be Young"" | type | ""Film"")
(""It's Great to Be Young"" | date | 1956)
(""It's Great to Be Young"" | received | £282,838)
(""It's Great to Be Young"" | musicComposer | ""Louis Levy"")
(""It's Great to Be Young"" | cinematographer | ""Gilbert Taylor"")"
1466,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adolfo Suárez Madrid–Barajas Airport can be found in Madrid, Paracuellos de Jarama, San Sebastián de los Reyes and Alcobendas. The airport is operated by ENAIRE and its runway length is 3,500. It has an elevation of 610.0 metres above sea level.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | ""Madrid, Paracuellos de Jarama, San Sebastián de los Reyes and Alcobendas"")","(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""Madrid"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""Paracuellos de Jarama"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""San Sebastián de los Reyes"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""is operated by"" | ""ENAIRE"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""runway length"" | ""3,500"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""elevation above sea level (metres)"" | ""610.0"")"
1467,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bedford Aerodrome is at an elevation of 83.2104 above sea level with its runway called 08/26.,"(Bedford_Aerodrome | elevationAboveTheSeaLevel | 83.2104)
(Bedford_Aerodrome | runwayName | ""08/26"")","(""Bedford Aerodrome"" | ""elevation"" | 83.2104)
(""Bedford Aerodrome"" | ""hasRunway"" | ""08/26"")"
1468,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","AmeriGas, located in King of Prussia, Pennsylvania, works and provides its services all in the United States. The United States covers a total area of 9833516.63 (square kilometres) and has a population of 324720797.","(AmeriGas | city | King_of_Prussia,_Pennsylvania)
(United_States | populationTotal | 324720797)
(AmeriGas | country | United_States)
(AmeriGas | regionServed | United_States)
(United_States | areaTotal | 9833516.63  (square kilometres))","(AmeriGas | located in | King of Prussia)
(AmeriGas | located in | Pennsylvania)
(AmeriGas | provides services in | United States)
(United States | covers area | 9833516.63)
(United States | has population | 324720797)"
1469,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The starring actor of the movie McVeagh of the South Seas was also the writer. His name was Harry Carey and he was born in 1878. According to the IMDb the ID is 0004319 and it is distributed by Alliance Films Corporation.,"(McVeagh_of_the_South_Seas | imdbId | 0004319)
(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | writer | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | distributor | Alliance_Films_Corporation)","(""McVeagh of the South Seas"" | ""starring actor"" | ""Harry Carey"")
(""McVeagh of the South Seas"" | ""writer"" | ""Harry Carey"")
(""Harry Carey"" | ""born in year"" | ""1878"")
(""Harry Carey"" | ""has IMDB ID"" | ""0004319"")
(""McVeagh of the South Seas"" | ""distributed by"" | ""Alliance Films Corporation"")"
1470,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Bedford Aerodrome serves the Bedford Autodrome; it is 83.2104 meters above sea level and has a runway length of 1095.,"(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | elevationAboveTheSeaLevel | 83.2104)
(Bedford_Aerodrome | runwayLength | 1095.0)","(""Bedford Aerodrome"" | ""serves"" | ""Bedford Autodrome"")
(""Bedford Aerodrome"" | ""elevation"" | 83.2104 meters)
(""Bedford Aerodrome"" | ""hasRunwayLength"" | 1095)"
1471,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Year of No Light album Nord's runtime is 58.41 minutes.,(Nord_(Year_of_No_Light_album) | runtime | 58.41),"(""Nord"" | ""type"" | ""Album"")
(""Nord"" | ""albumArtist"" | ""Year of No Light"")
(""Nord"" | ""runtime"" | ""58.41 minutes"")"
1472,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Fellowship of the Ring and the Two Towers were published by George Allen and Unwin.,"(The_Fellowship_of_the_Ring | followedBy | The_Two_Towers)
(The_Two_Towers | publisher | George_Allen_&_Unwin)","(""The Fellowship of the Ring"" | ""publishedBy"" | ""George Allen and Unwin"")
(""The Two Towers"" | ""publishedBy"" | ""George Allen and Unwin"")"
1473,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Espen Lind of the production team Stargate was one of the writers for the song by Train titled Mermaid, which was released on the Columbia Records label.","(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | writer | Espen_Lind)
(Mermaid_(Train_song) | writer | Stargate_(production_team))","(""Espen Lind"" | ""memberOf"" | ""Stargate"")
(""Espen Lind"" | ""jobTitle"" | ""writer"")
(""Espen Lind"" | ""contributesTo"" | ""Mermaid"")
(""Stargate"" | ""involves"" | ""Espen Lind"")
(""Mermaid"" | ""writer"" | ""Espen Lind"")
(""Mermaid"" | ""performedBy"" | ""Train"")
(""Mermaid"" | ""recordLabel"" | ""Columbia Records"")
(""Train"" | ""performs"" | ""Mermaid"")
(""Columbia Records"" | ""released"" | ""Mermaid"")"
1474,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Expect a Miracle a compilation album created and produced by Brian Kelly with runtime of 54.56 minutes is an easy listening album of the instrumental music genre. It was preceded by Pools of Light by Brian Kelly.,"(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | type | Compilation_Album)
(Expect_a_Miracle | precededBy | Pools_of_Light_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Instrumental_music)
(Expect_a_Miracle | genre | Easy_listening)","(""Expect a Miracle"" | creator | ""Brian Kelly"")
(""Expect a Miracle"" | producer | ""Brian Kelly"")
(""Expect a Miracle"" | runtime | 54.56)
(""Expect a Miracle"" | genre | ""easy listening"")
(""Expect a Miracle"" | genre | ""instrumental music"")
(""Expect a Miracle"" | precededBy | ""Pools of Light"")
(""Pools of Light"" | creator | ""Brian Kelly"")"
1475,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, born Olga Nikolaevna Bondareva in Leningrad, USSR on April 27, 1937 is know for the Bondareva-Shapley theorem.","(Olga_Bondareva | birthPlace | Leningrad,_USSR)
(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")","(""Olga Bondareva"" | ""birthName"" | ""Olga Nikolaevna Bondareva"")
(""Olga Bondareva"" | ""birthPlace"" | ""Leningrad, USSR"")
(""Olga Bondareva"" | ""birthDate"" | ""April 27, 1937"")
(""Olga Bondareva"" | ""knownFor"" | ""Bondareva-Shapley theorem"")"
1476,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Turn Me On album preceded by the Let it Breed album is produced by Wharton Tiers and its total length is 35 minutes 10 seconds.,"(Turn_Me_On_(album) | precededBy | Let_It_Breed)
(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | producer | Wharton_Tiers)","(""Turn Me On"" | ""precededBy"" | ""Let it Breed"")
(""Turn Me On"" | ""producer"" | ""Wharton Tiers"")
(""Turn Me On"" | ""totalLength"" | ""35 minutes 10 seconds"")"
1477,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nie Haisheng was born on the 13th of October, 1964 and he worked as a fighter pilot. He took part in the Shenzhou 6 mission and the Shenzhou 10 mission.","(Nie_Haisheng | mission | Shenzhou_10)
(Nie_Haisheng | mission | Shenzhou_6)
(Nie_Haisheng | birthDate | 1964-10-13)
(Nie_Haisheng | occupation | Fighter_pilot)","(""Nie Haisheng"" | ""birthDate"" | ""1964-10-13"")
(""Nie Haisheng"" | ""job"" | ""fighter pilot"")
(""Nie Haisheng"" | ""participation"" | ""Shenzhou 6 mission"")
(""Nie Haisheng"" | ""participation"" | ""Shenzhou 10 mission"")"
1478,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1147 Stavropolis was discovered on June 11, 1929 by Grigory Neujmin. It has an absolute magnitude of 11.5, the rotation period is 20378.5, its orbital period of the asteroid is 1249.6 days and the apoapsis is 418476000000.0.","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | discoverer | Grigory_Neujmin)
(1147_Stavropolis | absoluteMagnitude | 11.5)
(1147_Stavropolis | discovered | 1929-06-11)
(1147_Stavropolis | rotationPeriod | 20378.5)","(""1147 Stavropolis"" | ""was discovered on"" | ""June 11, 1929"")
(""1147 Stavropolis"" | ""was discovered by"" | ""Grigory Neujmin"")
(""1147 Stavropolis"" | ""has absolute magnitude"" | 11.5)
(""1147 Stavropolis"" | ""has rotation period"" | 20378.5)
(""1147 Stavropolis"" | ""has orbital period"" | 1249.6 days)
(""1147 Stavropolis"" | ""has apoapsis"" | 418476000000.0)"
1479,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Dijon is located in France.,(Dijon | country | France),(Dijon | location | France)
1480,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The ALCO RS-3 is 17068.8 millimetres long and was produced between May 1950 and August 1956 by the American Locomotive Company. The American Locomotive Company's foundation place is located in Schenectady, New York.","(ALCO_RS-3 | buildDate | ""May 1950 - August 1956"")
(American_Locomotive_Company | foundationPlace | Schenectady,_New_York)
(ALCO_RS-3 | builder | American_Locomotive_Company)
(ALCO_RS-3 | length | 17068.8 (millimetres))","(ALCO RS-3 | length | 17068.8 millimetres)
(ALCO RS-3 | productionStartDate | May 1950)
(ALCO RS-3 | productionEndDate | August 1956)
(ALCO RS-3 | producer | American Locomotive Company)
(American Locomotive Company | location | Schenectady, New York)"
1481,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Death on a Factory Farm is an HBO film owned by Time Warner. Born on March 8th 1970, Jamie Lawrence composed the music for the film.","(Death_on_a_Factory_Farm | broadcastedBy | HBO)
(HBO | owner | Time_Warner)
(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)
(Jamie_Lawrence | birthDate | 1970-03-08)","(""Death on a Factory Farm"" | ""type"" | ""film"")
(""Death on a Factory Farm"" | ""ownedBy"" | ""Time Warner"")
(""Death on a Factory Farm"" | ""provider"" | ""HBO"")
(""Jamie Lawrence"" | ""type"" | ""person"")
(""Jamie Lawrence"" | ""birthDate"" | ""March 8th 1970"")
(""Jamie Lawrence"" | ""composedMusicFor"" | ""Death on a Factory Farm"")"
1482,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was born November 18th, 1923 in New Hampshire.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | birthPlace | New_Hampshire)","(Alan Shepard | birthDate | ""November 18, 1923"")
(Alan Shepard | birthPlace | New Hampshire)"
1483,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument was established in 2000 in Adams County, Pennsylvania which has Franklin County, Pennsylvania to its west. The 11th Mississippi Infantry Monument is categorized as a Contributing Property.","(Adams_County,_Pennsylvania | hasToItsWest | Franklin_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""11th Mississippi Infantry Monument"" | ""established in"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""located in"" | ""Adams County, Pennsylvania"")
(""Adams County, Pennsylvania"" | ""has to its west"" | ""Franklin County, Pennsylvania"")
(""11th Mississippi Infantry Monument"" | ""is categorized as"" | ""Contributing Property"")"
1484,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The self-produced Year of No Light album Nord was released on 2006-09-06 and was followed by the band’s album Live at Roadburn 2008. The album was released on the record labels Crucial Blast and E-Vinyl.,"(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | recordLabel | Crucial_Blast)
(Nord_(Year_of_No_Light_album) | recordLabel | E-Vinyl)","(""Year of No Light album Nord"" | ""release date"" | ""2006-09-06"")
(""Year of No Light album Nord"" | ""producer"" | ""self"")
(""Year of No Light"" | ""follow up album"" | ""Live at Roadburn 2008"")
(""Live at Roadburn 2008"" | ""artist"" | ""Year of No Light"")
(""Year of No Light album Nord"" | ""record label"" | ""Crucial Blast"")
(""Year of No Light album Nord"" | ""record label"" | ""E-Vinyl"")"
1485,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The leader of Mexico is Enrique Peña Nieto and the local currency is the peso. In Mexico one food served as a dessert is called Bionico.,"(Mexico | currency | Mexican_peso)
(Bionico | course | Dessert)
(Bionico | country | Mexico)
(Mexico | leader | Enrique_Peña_Nieto)","(""Mexico"" | ""leader"" | ""Enrique Peña Nieto"")
(""Enrique Peña Nieto"" | ""isTheLeaderOf"" | ""Mexico"")
(""Mexico"" | ""localCurrency"" | ""peso"")
(""peso"" | ""isTheLocalCurrencyOf"" | ""Mexico"")
(""Mexico"" | ""hasDessert"" | ""Bionico"")
(""Bionico"" | ""isADessertIn"" | ""Mexico"")"
1486,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Super Capers is a movie that stars Justin Whalin and Michael Rooker. Whalin was a presenter and Rooker was born in 1955.,"(Super_Capers | starring | Justin_Whalin)
(Justin_Whalin | occupation | Presenter)
(Super_Capers | starring | Michael_Rooker)
(Michael_Rooker | birthYear | 1955-01-01)","(""Super Capers"" | type | ""movie"")
(""Super Capers"" | starring | ""Justin Whalin"")
(""Super Capers"" | starring | ""Michael Rooker"")
(""Justin Whalin"" | job | ""presenter"")
(""Michael Rooker"" | birthYear | ""1955"")"
1487,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Year of No Light released their sludge metal album Nord on June 9th, 2006. This album was followed by Live at Roadburn 2008.","(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light)","(""Year of No Light"" | ""release date"" | ""June 9th, 2006"")
(""Year of No Light"" | ""release"" | ""Nord"")
(""Year of No Light"" | ""music genre"" | ""sludge metal"")
(""Nord"" | ""by artist"" | ""Year of No Light"")
(""Nord"" | ""music genre"" | ""sludge metal"")
(""Nord"" | ""release date"" | ""June 9th, 2006"")
(""Live at Roadburn 2008"" | ""follows"" | ""Nord"")
(""Nord"" | ""followed by"" | ""Live at Roadburn 2008"")
(""Year of No Light"" | ""release"" | ""Live at Roadburn 2008"")"
1488,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aleksandr Prudnikov plays for FC Amkar Perm and is a member of the youth side of FC Spartak Moscow. He is 185 cm. tall.,"(Aleksandr_Prudnikov | club | FC_Amkar_Perm)
(Aleksandr_Prudnikov | height | 185.0 (centimetres))
(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(Aleksandr_Prudnikov | currentclub | FC_Amkar_Perm)","(Aleksandr Prudnikov | plays for | FC Amkar Perm)
(Aleksandr Prudnikov | member of | youth side of FC Spartak Moscow)
(Aleksandr Prudnikov | height | ""185 cm"")"
1489,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Mason School of Business are the current tenants of Alan B Miller Hall, located in the United States at 101 Ukrop Way and owned by the College of William and Mary.","(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Mason_School_of_Business | country | United_States)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""Mason School of Business"" | ""isTenantOf"" | ""Alan B Miller Hall"")
(""Alan B Miller Hall"" | ""isLocatedIn"" | ""United States"")
(""Alan B Miller Hall"" | ""hasAddress"" | ""101 Ukrop Way"")
(""Alan B Miller Hall"" | ""isOwnedBy"" | ""the College of William and Mary"")"
1490,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Dub music is a derivative of reggae.,(Reggae | derivative | Dub_music),"(""Dub music"" | derivativeOf | ""reggae"")"
1491,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The COSPAR ID of Shenzhou 6 is 2005-040A.,(Shenzhou_6 | cosparId | 2005-040A),"(""Shenzhou 6"" | ""COSPAR ID"" | ""2005-040A"")"
1492,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Nord was produced by the Year of No Light, which was produced by the Roadburn Festival and was followed by the album Live at Roadburn 2008.","(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Live_at_Roadburn_2008_(Year_of_No_Light_album) | producer | Roadburn_Festival)
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)","(""Nord"" | ""producer"" | ""Year of No Light"")
(""Year of No Light"" | ""producer"" | ""Roadburn Festival"")
(""Nord"" | ""followedBy"" | ""Live at Roadburn 2008"")"
1493,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology, affiliated with Visvesvaraya Technological University and given the Technical Campus status to the Acharya Institute of Technology by the All India Council for Technical Education, is located at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | city | Bangalore)
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)","(Acharya Institute of Technology | affiliatedWith | Visvesvaraya Technological University)
(Acharya Institute of Technology | statusGivenBy | All India Council for Technical Education)
(Acharya Institute of Technology | hasStatus | ""Technical Campus"")
(Acharya Institute of Technology | locatedAt | Soldevanahalli)
(Acharya Institute of Technology | locatedAt | Acharya Dr. Sarvapalli Radhakrishnan Road)
(Acharya Institute of Technology | locatedAt | Hessarghatta Main Road)
(Acharya Institute of Technology | locatedAt | Bangalore - 560090)"
1494,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Piotr Hallmann was born in Gdynia Poland. His height is 175.26 cm tall and he weighs 70.308kg.,"(Piotr_Hallmann | height | 175.26)
(Piotr_Hallmann | birthPlace | Gdynia,_Poland)
(Piotr_Hallmann | weight | 70.308)","(Piotr Hallmann | birthPlace | Gdynia, Poland)
(Piotr Hallmann | height | 175.26 cm)
(Piotr Hallmann | weight | 70.308 kg)"
1495,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Sandesh is a dessert much like Bionico, which is made using condensed milk, can be found in Guadalajara, Mexico which is inhabited by Mexicans and uses the peso as their currency.","(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Bionico | region | Guadalajara)
(Dessert | dishVariation | Sandesh_(confectionery))
(Bionico | ingredient | Condensed_milk)
(Bionico | country | Mexico)","(Sandesh | type | dessert)
(Sandesh | similarTo | Bionico)
(Bionico | isMadeUsing | condensed milk)
(Bionico | foundIn | Guadalajara)
(Guadalajara | locatedIn | Mexico)
(Mexico | inhabitants | Mexicans)
(Mexico | usesCurrency | peso)"
1496,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Mermaid, a 3.16 minute pop rock song was released on the 27th of December, 2012, by the musical band, Train.","(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | releaseDate | 2012-12-27)","(""Mermaid"" | ""type"" | ""pop rock song"")
(""Mermaid"" | ""duration"" | ""3.16 minutes"")
(""Mermaid"" | ""release date"" | ""27th of December, 2012"")
(""Mermaid"" | ""artist"" | ""Train"")"
1497,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Felipe Gozon is a key person in GMA New Media, a company founded on January 1st, 2000 that makes mobile applications.","(GMA_New_Media | foundingDate | 2000-01-01)
(GMA_New_Media | product | Mobile_Applications)
(GMA_New_Media | keyPerson | Felipe_Gozon)","(Felipe Gozon | role | ""key person"")
(Felipe Gozon | affiliation | GMA New Media)
(GMA New Media | foundingDate | ""January 1st, 2000"")
(GMA New Media | industry | ""mobile applications"")
(Felipe Gozon | affiliation.foundingDate | ""January 1st, 2000"")
(Felipe Gozon | affiliation.industry | ""mobile applications"")"
1498,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Live at Roadburn 2008 is by Year of No Light.,(Live_at_Roadburn_2008_(Year_of_No_Light_album) | artist | Year_of_No_Light),"(""Live at Roadburn 2008"" | ""is by"" | ""Year of No Light"")"
1499,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Akeem Ayers made his debut for the Tennessee Titans and used to play for them.,"(Akeem_Ayers | debutTeam | Tennessee_Titans)
(Akeem_Ayers | formerTeam | Tennessee_Titans)","(Akeem Ayers | debutTeam | Tennessee Titans)
(Akeem Ayers | pastTeams | Tennessee Titans)"
1500,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",1147 Stavropolis has an absolute magnitude of 11.5 and the orbital period of the asteroid is 1249.6 days.,"(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | absoluteMagnitude | 11.5)","(""1147 Stavropolis"" | ""hasAbsoluteMagnitude"" | ""11.5"")
(""1147 Stavropolis"" | ""hasOrbitalPeriod"" | ""1249.6 days"")"
1501,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Former FC Terek Grozny team member Aleksandr Prudnikov played youth soccer with FC Spartak Moscow.,"(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(Aleksandr_Prudnikov | club | FC_Terek_Grozny)","(Aleksandr Prudnikov | formerTeam | FC Terek Grozny)
(Aleksandr Prudnikov | playedFor | FC Terek Grozny)
(FC Terek Grozny | teamMember | Aleksandr Prudnikov)
(Aleksandr Prudnikov | youthClub | FC Spartak Moscow)
(FC Spartak Moscow | hasPlayerInYouthTeam | Aleksandr Prudnikov)
(Aleksandr Prudnikov | youthSoccerPlayedWith | FC Spartak Moscow)"
1502,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Bootleg Series Volume I: The Quine Tapes are recorded in San Francisco.,(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | San_Francisco),"(""The Bootleg Series Volume I: The Quine Tapes"" | ""location"" | ""San Francisco"")"
1503,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina attended the school of applied arts in Stuttgart and was a professional photographer. She was born on May 2nd 1908 and died on June 14 ,1994.","(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)
(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | professionalField | Photographer)","(Liselotte Grschebina | attended | the school of applied arts in Stuttgart)
(Liselotte Grschebina | profession | photographer)
(Liselotte Grschebina | birthDate | May 2nd 1908)
(Liselotte Grschebina | deathDate | June 14, 1994)"
1504,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bootleg Series Volume 1: The Quine Tapes was recorded in San Francisco.,(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | San_Francisco),"(""Bootleg Series Volume 1: The Quine Tapes"" | recordedIn | ""San Francisco"")"
1505,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The genre of the album Turn Me On are punk blues and noise rock, with derivatives industrial rock and post-hardcore.","(Turn_Me_On_(album) | genre | Punk_blues)
(Noise_rock | derivative | Industrial_rock)
(Turn_Me_On_(album) | genre | Noise_rock)
(Noise_rock | derivative | Post-hardcore)","(""Turn Me On"" | ""genre"" | ""punk blues"")
(""Turn Me On"" | ""genre"" | ""noise rock"")
(""Turn Me On"" | ""derivative genre"" | ""industrial rock"")
(""Turn Me On"" | ""derivative genre"" | ""post-hardcore"")"
1506,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","McVeagh of the South Seas, which was distributed by Alliance Films Corporation, was directed by Gregory Allen and produced by the Progressive Motion Picture Company.","(McVeagh_of_the_South_Seas | director | Gregory_Allen)
(McVeagh_of_the_South_Seas | producer | The_Progressive_Motion_Picture_Company)
(McVeagh_of_the_South_Seas | distributor | Alliance_Films_Corporation)","(""McVeagh of the South Seas"" | ""distributedBy"" | ""Alliance Films Corporation"")
(""McVeagh of the South Seas"" | ""director"" | ""Gregory Allen"")
(""McVeagh of the South Seas"" | ""producer"" | ""Progressive Motion Picture Company"")"
1507,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adolfo Suárez Madrid–Barajas Airport is in Alcobendas; it is operated by ENAIRE in Madrid and has a runway length of 3,500.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)","(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""operator"" | ""ENAIRE"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""locatedIn"" | ""Madrid"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""runwayLength"" | ""3,500"")
(""ENAIRE"" | ""operates"" | ""Adolfo Suárez Madrid–Barajas Airport"")
(""ENAIRE"" | ""isLocatedIn"" | ""Madrid"")"
1508,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adam West stars in Super Capers, a 98 minute long film written and directed by Ray Griggs.","(Super_Capers | starring | Adam_West)
(Super_Capers | writer | Ray_Griggs_(director))
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | runtime | 98.0)","(""Adam West"" | ""stars in"" | ""Super Capers"")
(""Super Capers"" | ""is starred by"" | ""Adam West"")
(""Super Capers"" | ""length"" | ""98 minutes"")
(""Super Capers"" | ""written and directed by"" | ""Ray Griggs"")
(""Ray Griggs"" | ""is the writer and director of"" | ""Super Capers"")"
1509,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Frank Giustra was the founder of Lionsgate.,(Lionsgate | foundedBy | Frank_Giustra),"(Frank Giustra | type | Person)
(Frank Giustra | founder of | Lionsgate)
(Lionsgate | type | Organisation)
(Lionsgate | founder | Frank Giustra)"
1510,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Baymax is a character who first appeared in the film Big Hero 6.,"(Baymax | firstAppearanceInFilm | Big_Hero_6_(film))
(Baymax | series | Big_Hero_6_(film))","(Baymax | type | Character)
(Baymax | firstAppearedIn | Big Hero 6)
(Big Hero 6 | hasCharacter | Baymax)"
1511,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Pontiac Rageous was assembled in Michigan until the end of production in 1997.,"(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | productionEndYear | 1997)","(""Pontiac Rageous"" | ""assembled in"" | ""Michigan"")
(""Pontiac Rageous"" | ""end of production"" | ""1997"")"
1512,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The length of Nord is 58.41.,(Nord_(Year_of_No_Light_album) | runtime | 58.41),"(""Nord"" | ""length"" | ""58.41"")"
1513,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Mexicans are people from Mexico and the local currency in Mexico is the Mexican peso. Bionico is a dish containing raisins which is served for dessert in the Mexican Guadalajara region. Sandesh is also a nice confectionery dessert.,"(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Bionico | region | Guadalajara)
(Bionico | ingredient | Raisin)
(Dessert | dishVariation | Sandesh_(confectionery))
(Bionico | country | Mexico)","(Mexicans | citizenship | Mexico)
(Mexico | currency | Mexican Peso)
(Bionico | ingredient | raisins)
(Bionico | course | dessert)
(Bionico | region | Guadalajara)
(Bionico | nationality | Mexican)
(Sandesh | type | confectionery dessert)"
1514,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard, born in New Hampshire, was a crew member of Apollo 14.","(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | mission | Apollo_14)","(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | occupation | crew member)
(Alan Shepard | memberOf | Apollo 14)"
1515,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina was born in the German Empire and died in Petah Tikva. The anthem of the German Empire is Die Wacht am Rhein.,"(Liselotte_Grschebina | birthPlace | German_Empire)
(German_Empire | anthem | Die_Wacht_am_Rhein)
(Liselotte_Grschebina | deathPlace | Petah_Tikva)","(""Liselotte Grschebina"" | ""birthPlace"" | ""German Empire"")
(""Liselotte Grschebina"" | ""deathPlace"" | ""Petah Tikva"")
(""German Empire"" | ""anthem"" | ""Die Wacht am Rhein"")"
1516,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Tom Sizemore is an actor.,(Tom_Sizemore | occupation | Actor),(Tom Sizemore | type | Actor)
1517,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Death on a Factory Farm is an HBO-released film produced and directed by Tom Simon. Geof Bartz is the editor and Jamie Lawrence wrote the music.,"(Death_on_a_Factory_Farm | director | Tom_Simon)
(Death_on_a_Factory_Farm | producer | Tom_Simon)
(Death_on_a_Factory_Farm | broadcastedBy | HBO)
(Death_on_a_Factory_Farm | editor | Geof_Bartz)
(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)","(""Death on a Factory Farm"" | ""release platform"" | ""HBO"")
(""Death on a Factory Farm"" | ""producer"" | ""Tom Simon"")
(""Death on a Factory Farm"" | ""director"" | ""Tom Simon"")
(""Death on a Factory Farm"" | ""editor"" | ""Geof Bartz"")
(""Death on a Factory Farm"" | ""music composer"" | ""Jamie Lawrence"")"
1518,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The total area of Saint Petersburg is 1439.0.,(Saint_Petersburg | areaTotal | 1439.0),(Saint Petersburg | total area | 1439.0)
1519,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Gdynia, Poland, is governed by a vice president.","(Gdynia,_Poland | leaderTitle | ""Vice President"")","(""Gdynia"" | ""location"" | ""Poland""),
(""Gdynia"" | ""governedBy"" | ""Vice President"")"
1520,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Bedford Aerodrome is located in Thurleigh, the ceremonial county of which is Bedfordshire. MotorSport Vision is the operating organisation for Bedford Aerodrome.","(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | location | Thurleigh)
(Thurleigh | ceremonialCounty | Bedfordshire)","(""Bedford Aerodrome"" | ""location"" | ""Thurleigh"")
(""Thurleigh"" | ""ceremonial county"" | ""Bedfordshire"")
(""MotorSport Vision"" | ""operation"" | ""Bedford Aerodrome"")"
1521,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ska is one of reggae's stylistic origins.,(Reggae | stylisticOrigin | Ska),"(""Ska"" | ""isStylisticOriginOf"" | ""Reggae"")"
1522,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The mobile app company GMA New Media can be found in the Philippines at the GMA Network Center. The mass media company was established by its key person Felipe Gozon on New Years Day, 2020.","(GMA_New_Media | foundingDate | 2000-01-01)
(GMA_New_Media | product | Mobile_Applications)
(GMA_New_Media | industry | Mass_Media)
(GMA_New_Media | keyPerson | Felipe_Gozon)
(GMA_New_Media | location | GMA_Network_Center)
(GMA_New_Media | location | Philippines)","(GMA New Media | rdf:type | Mobile App Company)
(GMA New Media | locatedIn | Philippines)
(GMA New Media | locationAddress | GMA Network Center)
(GMA New Media | establishedBy | Felipe Gozon)
(GMA New Media | dateEstablished | ""New Years Day, 2020""^^xsd:date)
(Felipe Gozon | rdf:type | keyPerson)"
1523,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Adolfo Suarez Madrid-Barajas airport is located in Alcobendas, is operated by ENAIRE based in Madrid, and has a runway length of 3500.0 which is named 14L/32R.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayName | ""14L/32R"")","(""Adolfo Suarez Madrid-Barajas airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suarez Madrid-Barajas airport"" | ""operator"" | ""ENAIRE"")
(""ENAIRE"" | ""location"" | ""Madrid"")
(""Adolfo Suarez Madrid-Barajas airport"" | ""runway length"" | 3500.0)
(""Adolfo Suarez Madrid-Barajas airport"" | ""runway name"" | ""14L/32R"")"
1524,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Trane is a company in the building materials industry that has 29000 employees.,"(Trane | numberOfEmployees | 29000)
(Trane | industry | Building_materials)","(""Trane"" | ""type"" | ""Company""),
(""Trane"" | ""industry"" | ""Building Materials""),
(""Trane"" | ""numberOfEmployees"" | ""29000"")"
1525,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Cecil Parker starred in and Max Benedict edited the 1956 movie It's Great to be Young.,"(""It's_Great_to_Be_Young_(1956_film) | starring | Cecil_Parker)
(""It's_Great_to_Be_Young_(1956_film) | editing | Max_Benedict"")","(Cecil Parker | starred in | It's Great to be Young)
(Max Benedict | edited | It's Great to be Young)
(It's Great to be Young | year | 1956)
(It's Great to be Young | actor | Cecil Parker)
(It's Great to be Young | editor | Max Benedict)"
1526,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Piotr Hallmann was born in Gdynia, Poland which has a time zone of UTC +2.","(Piotr_Hallmann | birthPlace | Gdynia,_Poland)
(Gdynia,_Poland | utcOffset | +2)","(Piotr Hallmann | birthPlace | Gdynia)
(Gdynia | country | Poland)
(Gdynia | utcOffset | +2)"
1527,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Established in 2000, Acharya Institute of Technology is affiliated with Visvesvaraya Technological University. All India Council for Technical Education, located in Mumbai, gave the Institute the status of Technical Campus. The current director is Dr. G. P. Prabhukumar. The address of the institute campus is Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore, 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(All_India_Council_for_Technical_Education | location | Mumbai)
(Acharya_Institute_of_Technology | director | ""Dr. G. P. Prabhukumar"")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | established | 2000)
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)","(""Acharya Institute of Technology"" | ""establishmentYear"" | 2000)
(""Acharya Institute of Technology"" | ""affiliatedWith"" | ""Visvesvaraya Technological University"")
(""All India Council for Technical Education"" | ""location"" | ""Mumbai"")
(""Acharya Institute of Technology"" | ""statusGivenBy"" | ""All India Council for Technical Education"")
(""Acharya Institute of Technology"" | ""status"" | ""Technical Campus"")
(""Acharya Institute of Technology"" | ""director"" | ""Dr. G. P. Prabhukumar"")
(""Acharya Institute of Technology"" | ""address"" | ""Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore, 560090"")"
1528,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument is located in municipality of Gettysburg, Adams County, which is west to Pennsylvania Franklin county, and is categorised as a contributing property. The monument to the 11th Mississippi Infantry was erected in 2000.","(Adams_County,_Pennsylvania | hasToItsWest | Franklin_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | municipality | Gettysburg,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""11th Mississippi Infantry Monument"" | ""location"" | ""Gettysburg"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Adams County"")
(""Gettysburg"" | ""part of"" | ""Adams County"")
(""Adams County"" | ""position"" | ""west to Pennsylvania Franklin county"")
(""11th Mississippi Infantry Monument"" | ""type"" | ""contributing property"")
(""11th Mississippi Infantry Monument"" | ""creation date"" | ""2000"")"
1529,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Adolfo Suárez Madrid–Barajas Airport, operated by ENAIRE, is in Alcobendas, while ENAIRE is in Madrid. The airport, which has an elevation of 610.0 metres above sea level, has a runway length of 3,500.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)","(""Adolfo Suárez Madrid–Barajas Airport"" | ""is operated by"" | ""ENAIRE""),
(""Adolfo Suárez Madrid–Barajas Airport"" | ""is in"" | ""Alcobendas""),
(""ENAIRE"" | ""is in"" | ""Madrid""),
(""Adolfo Suárez Madrid–Barajas Airport"" | ""has elevation"" | ""610.0 metres""),
(""Adolfo Suárez Madrid–Barajas Airport"" | ""has runway length"" | ""3500"")"
1530,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",McVeagh of the South Seas was directed by Gregory Allen and produced by the Progressive Motion Picture Company.,"(McVeagh_of_the_South_Seas | director | Gregory_Allen)
(McVeagh_of_the_South_Seas | producer | The_Progressive_Motion_Picture_Company)","(""McVeagh of the South Seas"" | ""director"" | ""Gregory Allen""),
(""McVeagh of the South Seas"" | ""producer"" | ""Progressive Motion Picture Company"")"
1531,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Detroit is a city in Michigan.,(Detroit | type | City_(Michigan)),"(Detroit | type | city)
(Detroit | locatedIn | Michigan)"
1532,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ted Willis wrote the 1956 movie “It’s great to be young”. The film stars Cecil Parker and includes John Mills in a main role. John Mills has two children named Juliet Mills and Hayley Mills.,"(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(John_Mills | child | Juliet_Mills)
(""It's_Great_to_Be_Young_(1956_film) | starring | Cecil_Parker)
(John_Mills | child | Hayley_Mills)
(""It's_Great_to_Be_Young_(1956_film) | writer | Ted_Willis"")","(""Ted Willis"" | ""wrote"" | ""It's great to be young"")
(""It's great to be young"" | ""releaseYear"" | ""1956"")
(""It's great to be young"" | ""stars"" | ""Cecil Parker"")
(""It's great to be young"" | ""stars"" | ""John Mills"")
(""John Mills"" | ""actedIn"" | ""It's great to be young"")
(""John Mills"" | ""hasChild"" | ""Juliet Mills"")
(""John Mills"" | ""hasChild"" | ""Hayley Mills"")"
1533,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Brandon Carter, born January 1st, 1942, is known for his work on the Anthropic Principle.","(Brandon_Carter | knownFor | Anthropic_principle)
(Brandon_Carter | birthDate | 1942-01-01)","(Brandon Carter | birthDate | ""January 1st, 1942"")
(Brandon Carter | knownFor | ""Anthropic Principle"")"
1534,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Harold French, who started his acting career in 1920, directed the 89 minute movie English Without Tears which was edited by Alan Jaggs and produced by Anatole de Grunwald.","(English_Without_Tears | editing | Alan_Jaggs)
(Harold_French | activeYearsStartYear | 1920-01-01)
(English_Without_Tears | director | Harold_French)
(English_Without_Tears | producer | Anatole_de_Grunwald)
(English_Without_Tears | runtime | 89.0)","(Harold French | started career | 1920)
(Harold French | career | ""acting"")
(Harold French | directed | English Without Tears)
(English Without Tears | durationInMinutes | 89)
(English Without Tears | editedBy | Alan Jaggs)
(English Without Tears | producedBy | Anatole de Grunwald)"
1535,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva resides in the US state of New Jersey. The United States has a total area of 9833520000000, and an ethnic group within its borders are Native Americans.","(Darinka_Dentcheva | citizenship | United_States)
(United_States | ethnicGroup | Native_American)
(Darinka_Dentcheva | residence | New_Jersey)
(United_States | areaTotal | 9833520000000.0)","(""Darinka Dentcheva"" | ""residesIn"" | ""New Jersey"")
(""New Jersey"" | ""partOf"" | ""United States"") 
(""United States"" | ""hasTotalArea"" | ""9833520000000"")
(""Native Americans"" | ""locatedIn"" | ""United States"")"
1536,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Expect a Miracle is a compilation album.,(Expect_a_Miracle | type | Compilation_Album),"(""Expect a Miracle"" | type | ""compilation album"")"
1537,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Casey Ribicoff’s husband Abraham A. Ribicoff was a citizen of the United States of America where one of the national ethnic groups is the African Americans.,"(Abraham_A._Ribicoff | spouse | Casey_Ribicoff)
(United_States | ethnicGroup | African_Americans)
(Abraham_A._Ribicoff | nationality | United_States)","(""Casey Ribicoff"" | ""spouse"" | ""Abraham A. Ribicoff"")
(""Abraham A. Ribicoff"" | ""citizenship"" | ""United States of America"")
(""United States of America"" | ""nationalEthnicGroup"" | ""African Americans"")"
1538,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Death on a Factory farm, which has a running time of 83.0 minutes, was produced by Sarah Teale and the music was composed by Jamie Lawrence.","(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)
(Death_on_a_Factory_Farm | runtime | 83.0)
(Death_on_a_Factory_Farm | producer | Sarah_Teale)","(""Death on a Factory farm"" | ""hasRunningTime"" | ""83.0 minutes""),
(""Death on a Factory farm"" | ""wasProducedBy"" | ""Sarah Teale""),
(""Death on a Factory farm"" | ""hasMusicComposer"" | ""Jamie Lawrence"")"
1539,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was born on November 18, 1923 in New Hampshire graduated from NWC in 1957 with an M.A.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | almaMater | ""NWC, M.A. 1957"")","(Alan Shepard | date of birth | ""November 18, 1923"")
(Alan Shepard | place of birth | New Hampshire)
(Alan Shepard | date of graduation | ""1957"")
(Alan Shepard | Alma Mater | NWC)
(Alan Shepard | degree | M.A.)"
1540,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adolfo Suárez Madrid–Barajas Airport is located in Alcobendas, Spain, 610 meters above sea level. This airport is operated by ENAIRE, which is located in Madrid. The runway is 4349 meters long.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 4349.0)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Alcobendas | country | Spain)","(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""Alcobendas, Spain"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""elevation"" | ""610 meters"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""operator"" | ""ENAIRE"")
(""ENAIRE"" | ""location"" | ""Madrid"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""runway length"" | ""4349 meters"")"
1541,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Mason School of Business are the current tenants of Alan B Miller Hall at 101 Ukrop Way.,"(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)","(""Mason School of Business"" | ""isTenantOf"" | ""Alan B Miller Hall"")
(""Alan B Miller Hall"" | ""isLocatedAt"" | ""101 Ukrop Way"")
(""Mason School of Business"" | ""isLocatedAt"" | ""101 Ukrop Way"")"
1542,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson (born in Darlington, Kingdom of England on January 1, 1726) was an English woman who died on February 18, 1776.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | deathDate | 1776-02-18)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | nationality | Kingdom_of_England)","(Lady Anne Monson | birthPlace | Darlington)
(Lady Anne Monson | birthPlace | Kingdom of England)
(Lady Anne Monson | birthDate | January 1, 1726)
(Lady Anne Monson | deathDate | February 18, 1776)
(Lady Anne Monson | nationality | English)"
1543,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nurhan Atasoy was born in Turkey where they speak the Turkish language.,"(Nurhan_Atasoy | birthPlace | Turkey)
(Turkey | language | Turkish_language)","(""Nurhan Atasoy"" | ""place of birth"" | ""Turkey"")
(""Turkey"" | ""language spoken"" | ""Turkish"")
(""Nurhan Atasoy"" | ""nationality"" | ""Turkey"")"
1544,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","A monument to the 11th Mississippi Infantry was erected in 2000 and categorised as a contributing property in the municipality of Gettysburg in Pennsylvania, located in Adams County in the United States. Carroll County Maryland is southeast of Adams County Pennsylvania.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | state | ""Pennsylvania"")
(11th_Mississippi_Infantry_Monument | municipality | Gettysburg,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)
(11th_Mississippi_Infantry_Monument | country | ""United States"")","(""11th Mississippi Infantry"" | ""monument"" | ""Monument to the 11th Mississippi Infantry"")
(""Monument to the 11th Mississippi Infantry"" | ""year of creation"" | ""2000"")
(""Monument to the 11th Mississippi Infantry"" | ""location"" | ""Gettysburg"")
(""Gettysburg"" | ""part of"" | ""Adams County"")
(""Adams County"" | ""located in the administrative territorial entity"" | ""Pennsylvania"")
(""Adams County"" | ""located in the administrative territorial entity"" | ""United States"")
(""Monument to the 11th Mississippi Infantry"" | ""isContributingProperty"" | ""Yes"")
(""Carroll County Maryland"" | ""located southeast of"" | ""Adams County Pennsylvania"")"
1545,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiacao Sportiva Arapiraquense 'Agremiacao Sportiva Arapiraquense', is a club that has 17000 members and plays in the Campeonato Brasileiro Serie C league.","(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | fullName | ""Agremiação Sportiva Arapiraquense"")","(""Agremiacao Sportiva Arapiraquense"" | ""type"" | ""club""),
(""Agremiacao Sportiva Arapiraquense"" | ""hasMembers"" | ""17000""),
(""Agremiacao Sportiva Arapiraquense"" | ""playsIn"" | ""Campeonato Brasileiro Serie C"")"
1546,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","It's Great to Be Young (1956 film) is in Gilbert Taylor's cinematography which runs 94 minutes long, that was edited by Max Benedict and Louis Levy was the music composer.","(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | editing | Max_Benedict)
(""It's_Great_to_Be_Young_(1956_film) | musicComposer | Louis_Levy)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor"")","(""It's Great to Be Young (1956 film)"" | ""hasCinematographer"" | ""Gilbert Taylor"")
(""It's Great to Be Young (1956 film)"" | ""runtime"" | ""94 minutes"")
(""It's Great to Be Young (1956 film)"" | ""hasEditor"" | ""Max Benedict"")
(""It's Great to Be Young (1956 film)"" | ""hasComposer"" | ""Louis Levy"")"
1547,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Year of No Light album Nord in sludge metal and the post-metal genre that lasts 58.41 minutes was released on the Crucial Blast label on the date 2006-09-06.,"(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | genre | Post-metal)
(Nord_(Year_of_No_Light_album) | recordLabel | Crucial_Blast)
(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | runtime | 58.41)","(""Nord"" | ""type"" | ""album"")
(""Nord"" | ""by"" | ""Year of No Light"")
(""Nord"" | ""genre"" | ""sludge metal"")
(""Nord"" | ""genre"" | ""post-metal"")
(""Nord"" | ""runTime"" | ""58.41 minutes"")
(""Nord"" | ""onLabel"" | ""Crucial Blast"")
(""Nord"" | ""releaseDate"" | ""2006-09-06"")"
1548,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The budget for Super Capers was 2000000.,(Super_Capers | budget | 2000000.0),(Super Capers | budget | 2000000)
1549,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina was born in the German Empire and studied at the School of Applied Arts in Stuttgart.,"(Liselotte_Grschebina | birthPlace | German_Empire)
(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)","(Liselotte Grschebina | birthPlace | German Empire)
(Liselotte Grschebina | studiedAt | School of Applied Arts in Stuttgart)"
1550,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Expect a Miracle was produced by Brian Kelly.,(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist)),"(""Expect a Miracle"" | ""producer"" | ""Brian Kelly"")"
1551,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The song Mermaid by Train is a reggae song that was written by Amund Bjorklund and the Stargate production team.,"(Mermaid_(Train_song) | genre | Reggae)
(Mermaid_(Train_song) | writer | Amund_Bjørklund)
(Mermaid_(Train_song) | writer | Stargate_(production_team))","(""Mermaid"" | ""type"" | ""Song"")
(""Mermaid"" | ""artist"" | ""Train"")
(""Mermaid"" | ""genre"" | ""Reggae"")
(""Mermaid"" | ""writer"" | ""Amund Bjorklund"")
(""Mermaid"" | ""writer"" | ""Stargate production team"")"
1552,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Turkish language is the primary language of Turkey.,(Turkey | language | Turkish_language),"(""Turkish language"" | ""isPrimaryLanguageOf"" | ""Turkey""),
(""Turkey"" | ""hasPrimaryLanguage"" | ""Turkish language"")"
1553,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The song, Mermaid, by the band Train was written by Espen Lind and the production team Stargate and released by Columbia records.","(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | writer | Espen_Lind)
(Mermaid_(Train_song) | writer | Stargate_(production_team))","(""Mermaid"" | ""written by"" | ""Espen Lind"")
(""Mermaid"" | ""written by"" | ""Stargate"")
(""Mermaid"" | ""performed by"" | ""Train"")
(""Mermaid"" | ""released by"" | ""Columbia records"")"
1554,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The total population of the United States is 324720797.,(United_States | populationTotal | 324720797),(United States | total population | 324720797)
1555,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1147 Stavropolis, which had its epoch on July 31, 2016, has a periapsis of 260855000000.0 and an orbital period of 1249.6.","(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))
(1147_Stavropolis | orbitalPeriod | 1249.6)","(""1147 Stavropolis"" | ""hasEpochOn"" | ""July 31, 2016"")
(""1147 Stavropolis"" | ""hasPeriapsis"" | 260855000000.0)
(""1147 Stavropolis"" | ""hasOrbitalPeriod"" | 1249.6)"
1556,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Hypermarcas is a company in the pharmaceuticals industry located in São Paulo, Brazil. Both Michel Temer and Cármen Lúcia are Brazilian leaders.","(Hypermarcas | industry | Pharmaceuticals)
(Hypermarcas | location | São_Paulo)
(Hypermarcas | location | Brazil)
(Brazil | leader | Michel_Temer)
(Brazil | leader | Cármen_Lúcia)","(""Hypermarcas"" | ""type"" | ""Company""),
(""Hypermarcas"" | ""industry"" | ""pharmaceuticals""),
(""Hypermarcas"" | ""location"" | ""São Paulo, Brazil""),
(""Michel Temer"" | ""nationality"" | ""Brazilian""),
(""Michel Temer"" | ""type"" | ""Leader""),
(""Cármen Lúcia"" | ""nationality"" | ""Brazilian""),
(""Cármen Lúcia"" | ""type"" | ""Leader"")"
1557,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","J.R.R. Tolkien, who was born on January 3, 1892, wrote the Fellowship of the Ring that was released on July 29, 1954 after the release of The Hobbit.","(The_Fellowship_of_the_Ring | author | J._R._R._Tolkien)
(J._R._R._Tolkien | birthDate | 1892-01-03)
(The_Fellowship_of_the_Ring | releaseDate | 1954-07-29)
(The_Fellowship_of_the_Ring | precededBy | The_Hobbit)","(J.R.R. Tolkien | birthDate | ""January 3, 1892"")
(J.R.R. Tolkien | wrote | The Fellowship of the Ring)
(The Fellowship of the Ring | releaseDate | ""July 29, 1954"")
(J.R.R. Tolkien | wrote | The Hobbit)
(The Fellowship of the Ring | releaseAfter | The Hobbit)"
1558,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",An ethnic group called African Americans are from the United States. Casey Ribicoff whose husband Abraham A. Ribicoff is from the United States.,"(Abraham_A._Ribicoff | spouse | Casey_Ribicoff)
(United_States | ethnicGroup | African_Americans)
(Abraham_A._Ribicoff | nationality | United_States)","(""African Americans"" | country | ""United States"")
(""Casey Ribicoff"" | spouse | ""Abraham A. Ribicoff"")
(""Abraham A. Ribicoff"" | country | ""United States"")
(""Casey Ribicoff"" | country | ""United States"")"
1559,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala is in the Pacific Standard time zone and in its version, Pacific Daylight Time.","(Ciudad_Ayala | timeZone | Pacific_Daylight_Time)
(Ciudad_Ayala | timeZone | Pacific_Standard_Time_Zone)","(""Ciudad Ayala"" | ""isIn"" | ""Pacific Standard time zone""),
(""Ciudad Ayala"" | ""isIn"" | ""Pacific Daylight Time"")"
1560,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Piotr Hallmann was born on August 25. 1987 in Gdynia, Poland, which is in the time zone UTC +2.","(Piotr_Hallmann | birthDate | 1987-08-25)
(Piotr_Hallmann | birthPlace | Gdynia,_Poland)
(Gdynia,_Poland | utcOffset | +2)","(Piotr Hallmann | birthDate | ""August 25, 1987"")
(Piotr Hallmann | birthPlace | Gdynia)
(Gdynia | locatedIn | Poland)
(Gdynia | timeZone | ""UTC+2"")
(Poland | contains | Gdynia)"
1561,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard died in California and was born on November 18, 1923 in New Hampshire, which is home to the Purple finch.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | deathPlace | California)
(New_Hampshire | bird | Purple_finch)
(Alan_Shepard | birthPlace | New_Hampshire)","(""Alan Shepard"" | ""deathPlace"" | ""California"")
(""Alan Shepard"" | ""birthDate"" | ""November 18, 1923"")
(""Alan Shepard"" | ""birthPlace"" | ""New Hampshire"")
(""New Hampshire"" | ""homeTo"" | ""Purple finch"")"
1562,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Located in Sao Paulo and managed my their CEO, Hypermarcas sells healthcare products. The company has a net income of $108.6M and currently employs 10,252 people.","(Hypermarcas | keyPerson | CEO)
(Hypermarcas | netIncome | 108600000)
(Hypermarcas | numberOfEmployees | 10252)
(Hypermarcas | product | Healthcare)
(Hypermarcas | location | São_Paulo)","(""Hypermarcas"" | ""location"" | ""Sao Paulo"")
(""Hypermarcas"" | ""CEO"" | ""their CEO"")
(""Hypermarcas"" | ""industry"" | ""healthcare products"")
(""Hypermarcas"" | ""netIncome"" | ""$108.6M"")
(""Hypermarcas"" | ""numberOfEmployees"" | ""10,252"")"
1563,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Production of the coupe style Pontiac Rageous ended in 1997.,"(Pontiac_Rageous | productionEndYear | 1997)
(Pontiac_Rageous | bodyStyle | Coupe)","(""Pontiac Rageous"" | ""type"" | ""coupe style"")
(""Pontiac Rageous"" | ""production end year"" | ""1997"")"
1564,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was an American who was born on Nov 18, 1923 in New Hampshire, was selected by NASA in 1959, was a member of the Apollo 14 crew and died in California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | selectedByNasa | 1959)
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | mission | Apollo_14)","(Alan Shepard | type | American)
(Alan Shepard | birthDate | Nov 18, 1923)
(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | wasSelectedBy | NASA)
(NASA | dateOfSelection | 1959)
(Alan Shepard | wasMemberOf | Apollo 14 crew)
(Apollo 14 crew | hasMember | Alan Shepard)
(Alan Shepard | deathPlace | California)"
1565,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, whose alma mater is Leningrad State University and is one of the known economists in the field of Mathematics, died in Saint Petersburg on the 9th of December, 1991.","(Olga_Bondareva | deathPlace | Saint_Petersburg)
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | deathDate | 1991-12-09)
(Olga_Bondareva | professionalField | Economics)
(Olga_Bondareva | professionalField | Mathematics)","(Olga Bondareva | alma mater | Leningrad State University)
(Olga Bondareva | profession | economist)
(Olga Bondareva | field of study | Mathematics)
(Olga Bondareva | death place | Saint Petersburg)
(Olga Bondareva | death date | 9th of December, 1991)"
1566,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darlington is located in the United Kingdom,.",(Darlington | country | United_Kingdom),(Darlington | location | United Kingdom)
1567,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology campus, directed by Dr. G. Prabhukumar and located in Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090, India, was given the Technical Campus status by the All India Council for Technical Education, located in Mumbai, India.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(All_India_Council_for_Technical_Education | location | Mumbai)
(Acharya_Institute_of_Technology | director | ""Dr. G. P. Prabhukumar"")
(Acharya_Institute_of_Technology | city | Bangalore)
(Acharya_Institute_of_Technology | country | ""India"")
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)","(""Acharya Institute of Technology campus"" | ""directed by"" | ""Dr. G. Prabhukumar"")
(""Acharya Institute of Technology campus"" | ""location"" | ""Soldevanahalli"")
(""Acharya Institute of Technology campus"" | ""located on"" | ""Acharya Dr. Sarvapalli Radhakrishnan Road"")
(""Acharya Institute of Technology campus"" | ""located on"" | ""Hessarghatta Main Road"")
(""Acharya Institute of Technology campus"" | ""city location"" | ""Bangalore"")
(""Acharya Institute of Technology campus"" | ""postal code"" | ""560090"")
(""Acharya Institute of Technology campus"" | ""country location"" | ""India"")
(""Acharya Institute of Technology campus"" | ""status given by"" | ""All India Council for Technical Education"")
(""Acharya Institute of Technology campus"" | ""status"" | ""Technical Campus"")
(""All India Council for Technical Education"" | ""location"" | ""Mumbai, India"")"
1568,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",New Hampshire born Alan Shepard died in California.,"(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | status | ""Deceased"")","(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | deathPlace | California)"
1569,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala's elevation above the sea level is 1147.0.,(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0),"(""Ciudad Ayala"" | ""elevationAboveTheSeaLevel"" | ""1147.0"")"
1570,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Mexico (inhabited by Mexicans) is led by Silvano Aureoles Conejo and the country currency is the peso. Bionico, a dessert, is also a food found there. It requires granola as one of its ingredients.","(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Mexico | leader | Silvano_Aureoles_Conejo)
(Bionico | ingredient | Granola)
(Bionico | country | Mexico)","(""Mexico"" | ""type"" | ""Country"")
(""Mexico"" | ""leader"" | ""Silvano Aureoles Conejo"")
(""Mexico"" | ""currency"" | ""Peso"")
(""Mexico"" | ""inhabitant"" | ""Mexican"")
(""Bionico"" | ""type"" | ""Dessert"")
(""Bionico"" | ""ingredient"" | ""Granola"")
(""Mexico"" | ""food"" | ""Bionico"")"
1571,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiação Sportiva Arapiraquense, who are managed by Vica, play in the Campeonato Brasileiro Série C league.","(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | manager | Vica)","(Agremiação Sportiva Arapiraquense | managedBy | Vica)
(Agremiação Sportiva Arapiraquense | league | Campeonato Brasileiro Série C)"
1572,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Turn Me On with noise rock genre,is preceded by the album Let IT breed and followed by the album Take It Off.","(Turn_Me_On_(album) | genre | Noise_rock)
(Turn_Me_On_(album) | precededBy | Let_It_Breed)
(Turn_Me_On_(album) | followedBy | Take_It_Off!)","(""Turn Me On"" | type | ""album"")
(""Turn Me On"" | genre | ""noise rock"")
(""Turn Me On"" | precededBy | ""Let IT breed"")
(""Turn Me On"" | followedBy | ""Take It Off"")
(""Let IT breed"" | type | ""album"")
(""Take It Off"" | type | ""album"")"
1573,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Abraham A. Ribicoff was an American citizen who died in the United States where African Americans are an ethnic group. Abraham A. Ribicoff’s wife was Ruth Ribicoff and he was in office while John F. Kennedy was president.,"(Abraham_A._Ribicoff | spouse | ""Ruth Ribicoff"")
(Abraham_A._Ribicoff | inOfficeWhilePresident | John_F._Kennedy)
(Abraham_A._Ribicoff | nationality | American)
(Abraham_A._Ribicoff | deathPlace | United_States)
(United_States | ethnicGroup | African_Americans)","(Abraham A. Ribicoff | type | American citizen)
(Abraham A. Ribicoff | deathPlace | United States)
(Abraham A. Ribicoff | spouse | Ruth Ribicoff)
(Abraham A. Ribicoff | officeTermOverlapWith | John F. Kennedy)
(African Americans | type | ethnic group)
(African Americans | location | United States)
(John F. Kennedy | type | president)
(John F. Kennedy | officeTermOverlapWith | Abraham A. Ribicoff)
(Ruth Ribicoff | spouse | Abraham A. Ribicoff)
(United States | containsEthnicGroup | African Americans)
(United States | deathPlaceOf | Abraham A. Ribicoff)"
1574,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The total population of the United States is 324,720,797.",(United_States | populationTotal | 324720797),(United States | totalPopulation | 324720797)
1575,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The debut team for Akeem Ayers was Tennessee Titans, and his current team is Los Angeles Rams.","(Akeem_Ayers | currentteam | ""Los Angeles Rams"")
(Akeem_Ayers | debutTeam | Tennessee_Titans)","(""Akeem Ayers"" | ""debutTeam"" | ""Tennessee Titans"")
(""Akeem Ayers"" | ""currentTeam"" | ""Los Angeles Rams"")"
1576,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Born in April 27, 1937, Olga Bondareva studied at Leningrad State University, where she went on to specialize in the field of Economics until her death on December 9, 1991.","(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | deathDate | 1991-12-09)
(Olga_Bondareva | professionalField | Economics)","(Olga Bondareva | birthDate | ""April 27, 1937"")
(Olga Bondareva | deathDate | ""December 9, 1991"")
(Olga Bondareva | placeOfBirth | ""Leningrad State University"")
(Olga Bondareva | almaMater | ""Leningrad State University"")
(Olga Bondareva | field | ""Economics"")"
1577,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",MotorSport Vision is the operating organisation for Bedford Aerodrome which serves the Bedford Autodrome. Its runway length is 1095.0.,"(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | runwayLength | 1095.0)
(Bedford_Aerodrome | cityServed | Bedford_Autodrome)","(""MotorSport Vision"" | ""isOperatingOrganisationFor"" | ""Bedford Aerodrome""),
(""Bedford Aerodrome"" | ""serves"" | ""Bedford Autodrome""),
(""Bedford Aerodrome"" | ""hasRunwayLength"" | ""1095.0"")"
1578,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The area of Saint Petersburg is 1439.0.,(Saint_Petersburg | areaTotal | 1439.0),(Saint Petersburg | area | 1439.0)
1579,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard, the Chief of the Astronaut Office in 1963, was born November 18th in New Hampshire,1923 and is from the United States. He graduated from NWC with an M.A. in 1957. He retired on 1974-08-01 and died in California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | servedAsChiefOfTheAstronautOfficeIn | 1963)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | dateOfRetirement | ""1974-08-01"")
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | almaMater | ""NWC, M.A. 1957"")","(Alan Shepard | type | Chief of the Astronaut Office)
(Alan Shepard | yearOfPosition | 1963)
(Alan Shepard | birthDate | November 18, 1923)
(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | nationality | United States)
(Alan Shepard | graduationYear | 1957)
(Alan Shepard | graduationPlace | NWC)
(Alan Shepard | degree | M.A.)
(Alan Shepard | retirementDate | 1974-08-01)
(Alan Shepard | deathPlace | California)"
1580,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","It's Great to Be Young is a 94 minute film featuring Gilbert Taylor's cinematography that was written by Ted Willis, directed by Cyril Frankel and starring John Mills which cost £282,838 to produce in 1956.","(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor)
(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | gross | 282838.0)
(""It's_Great_to_Be_Young_(1956_film) | director | Cyril_Frankel)
(""It's_Great_to_Be_Young_(1956_film) | writer | Ted_Willis"")","(""It's Great to Be Young"" | duration | 94)
(""It's Great to Be Young"" | hasCinematography | Gilbert Taylor)
(""It's Great to Be Young"" | screenplayWriter | Ted Willis)
(""It's Great to Be Young"" | director | Cyril Frankel)
(""It's Great to Be Young"" | starring | John Mills)
(""It's Great to Be Young"" | cost | £282,838)
(""It's Great to Be Young"" | releaseDate-Year | 1956)"
1581,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The BBC is located in the Broadcasting House in London. The BBC first broadcasted the show, Bananaman, on October 10,1983 which starred Bill Oddie who is Kate Hardie's father.","(BBC | city | Broadcasting_House)
(Bananaman | starring | Bill_Oddie)
(Bill_Oddie | child | Kate_Hardie)
(Bananaman | broadcastedBy | BBC)
(Bananaman | firstAired | ""1983-10-03"")","(BBC | location | Broadcasting House)
(Broadcasting House | locatedIn | London)
(BBC | broadcasted | Bananaman)
(Bananaman | broadcastedOn | ""October 10,1983"")
(Bananaman | starActor | Bill Oddie)
(Bill Oddie | isFatherOf | Kate Hardie)"
1582,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","It’s Great to Be Young is a 1956 film that runs for 94 minutes. It stars John Mills and has Gilbert Taylor as the movie's cinematographer. Max Benedict was the editor while Louis Levy composed the music. The movie made 282,838 pounds. Cyril Frankel was the director.","(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor)
(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | gross | 282838.0)
(""It's_Great_to_Be_Young_(1956_film) | director | Cyril_Frankel)
(""It's_Great_to_Be_Young_(1956_film) | musicComposer | Louis_Levy)
(""It's_Great_to_Be_Young_(1956_film) | editing | Max_Benedict"")","(""It’s Great to Be Young"" | type | ""film"")
(""It’s Great to Be Young"" | releaseYear | ""1956"")
(""It’s Great to Be Young"" | durationMinutes | ""94"")
(""It’s Great to Be Young"" | starring | ""John Mills"")
(""It’s Great to Be Young"" | cinematographer | ""Gilbert Taylor"")
(""It’s Great to Be Young"" | editor | ""Max Benedict"")
(""It’s Great to Be Young"" | musicComposer | ""Louis Levy"")
(""It’s Great to Be Young"" | grossRevenuePounds | ""282,838"")
(""It’s Great to Be Young"" | director | ""Cyril Frankel"")"
1583,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bananaman, the TV series, was created by Steve Bright and first aired on the BBC on 03/10/1983.","(Bananaman | creator | Steve_Bright)
(Bananaman | broadcastedBy | BBC)
(Bananaman | firstAired | ""1983-10-03"")","(""Bananaman"" | ""type"" | ""TV series""),
(""Bananaman"" | ""creator"" | ""Steve Bright""),
(""Bananaman"" | ""broadcastedBy"" | ""BBC""),
(""Bananaman"" | ""startDate"" | ""03/10/1983"")"
1584,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Louis Levy is the music composer of It's Great to Be Young a 1956 film starring Cecil Parker.,"(""It's_Great_to_Be_Young_(1956_film) | musicComposer | Louis_Levy)
(""It's_Great_to_Be_Young_(1956_film) | starring | Cecil_Parker"")","(""Louis Levy"" | ""occupation"" | ""music composer"")
(""Louis Levy"" | ""contribution"" | ""It's Great to Be Young"")
(""It's Great to Be Young"" | ""type"" | ""film"")
(""It's Great to Be Young"" | ""year of production"" | ""1956"")
(""It's Great to Be Young"" | ""starring"" | ""Cecil Parker"")
(""Cecil Parker"" | ""profession"" | ""actor"")"
1585,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Cecil Parker's birth name was Cecil Schwabe.,(Cecil_Parker | birthName | Cecil Schwabe),"(""Cecil Parker"" | ""birth name"" | ""Cecil Schwabe"")"
1586,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Hypermarcas produces pharmaceutical drugs.,(Hypermarcas | product | Drugs),(Hypermarcas | produces | pharmaceutical drugs)
1587,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala is a city in Mexico.,(Ciudad_Ayala | country | Mexico),"(""Ciudad Ayala"" | location | ""Mexico"")"
1588,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The University of Burgundy has 27400 students and 2900 staff members at its campus in Dijon. The majority of the students (16800) are undergraduates while postgraduates number 9400. In addition there are 1299 doctoral students.,"(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfStudents | 27400)
(University_of_Burgundy | numberOfDoctoralStudents | 1299)
(University_of_Burgundy | campus | Dijon)
(University_of_Burgundy | numberOfPostgraduateStudents | 9400)","(University of Burgundy | hasTotalStudents | 27400)
(University of Burgundy | hasTotalStaff | 2900)
(University of Burgundy | location | Dijon)
(University of Burgundy | hasUndergraduateStudents | 16800)
(University of Burgundy | hasPostgraduateStudents | 9400)
(University of Burgundy | hasDoctoralStudents | 1299)"
1589,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bananaman first aired on 3rd October 1983 and was broadcast by the BBC based at Broadcasting House in London. One of the stars of the show was Bill Oddie.,"(BBC | city | Broadcasting_House)
(Bananaman | starring | Bill_Oddie)
(Bananaman | broadcastedBy | BBC)
(Bananaman | firstAired | ""1983-10-03"")","(""Bananaman"" | ""firstAiredOn"" | ""3rd October 1983"")
(""Bananaman"" | ""wasBroadcastBy"" | ""BBC"")
(""BBC"" | ""isBasedAt"" | ""Broadcasting House"")
(""Broadcasting House"" | ""isLocatedIn"" | ""London"")
(""Bill Oddie"" | ""isStarOf"" | ""Bananaman"")"
1590,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument, which is a contributing property, is located in Adams County, in the state of Pennsylvania.","(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | state | ""Pennsylvania"")
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""11th Mississippi Infantry Monument"" | ""type"" | ""contributing property""),
(""11th Mississippi Infantry Monument"" | ""location"" | ""Adams County""),
(""11th Mississippi Infantry Monument"" | ""isInState"" | ""Pennsylvania""),
(""Adams County"" | ""isInState"" | ""Pennsylvania"")"
1591,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Death on a Factory Farm (on HBO), was edited by Geof Bartz for a running time of 83 minutes. Jamie Lawrence composed the movie's music.","(Death_on_a_Factory_Farm | broadcastedBy | HBO)
(Death_on_a_Factory_Farm | editor | Geof_Bartz)
(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)
(Death_on_a_Factory_Farm | runtime | 83.0)","(""Death on a Factory Farm"" | ""platform"" | ""HBO"")
(""Death on a Factory Farm"" | ""edit"" | ""Geof Bartz"")
(""Death on a Factory Farm"" | ""running time"" | ""83 minutes"")
(""Death on a Factory Farm"" | ""composer"" | ""Jamie Lawrence"")"
1592,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The orbital period of 1147 Stavropolis is 1249.6 while it has a periapsis of 260855000000.0. It has an apoapsis of 418476000000.0 with an epoch of July 31st, 2016 (JD2457600.5).","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)","(1147 Stavropolis | orbital period | 1249.6)
(1147 Stavropolis | periapsis | 260855000000.0)
(1147 Stavropolis | apoapsis | 418476000000.0)
(1147 Stavropolis | epoch | ""July 31st, 2016 (JD2457600.5)"")"
1593,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","It’s Great to Be Young (1956) was edited by Max Benedict, who later died in London. The movie stars Cecil Parker, and includes John Mills in a main role.","(""It's_Great_to_Be_Young_(1956_film) | editing | Max_Benedict)
(Max_Benedict | deathPlace | London)
(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | starring | Cecil_Parker"")","(""It’s Great to Be Young (1956)"" | ""edited by"" | ""Max Benedict""),
(""Max Benedict"" | ""death place"" | ""London""),
(""It’s Great to Be Young (1956)"" | ""stars"" | ""Cecil Parker""),
(""It’s Great to Be Young (1956)"" | ""includes actor"" | ""John Mills"")"
1594,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Cyril Frankel directed the 1956 film It's Great to be Young in which John Mills played the leading role and Cecil Parker had a main role. Juliet Mills and Hayley Mills are both John Mills' children.,"(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(John_Mills | child | Juliet_Mills)
(John_Mills | child | Hayley_Mills)
(""It's_Great_to_Be_Young_(1956_film) | starring | Cecil_Parker)
(""It's_Great_to_Be_Young_(1956_film) | director | Cyril_Frankel"")","(""Cyril Frankel"" | ""directed"" | ""It's Great to be Young"")
(""It's Great to be Young"" | ""releaseYear"" | ""1956"")
(""John Mills"" | ""actedIn"" | ""It's Great to be Young"")
(""John Mills"" | ""roleIn"" | ""It's Great to be Young"")
(""Cecil Parker"" | ""actedIn"" | ""It's Great to be Young"")
(""Cecil Parker"" | ""roleIn"" | ""It's Great to be Young"")
(""Juliet Mills"" | ""childOf"" | ""John Mills"")
(""Hayley Mills"" | ""childOf"" | ""John Mills"")"
1595,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Mermaid, a song written by Espen Lind, was released by the group Train on December 27, 2012, following its recording of the song This’ll Be My Year.","(Mermaid_(Train_song) | releaseDate | 2012-12-27)
(""Mermaid_(Train_song) | precededBy | This'll_Be_My_Year)
(Mermaid_(Train_song) | writer | Espen_Lind)","(""Mermaid"" | ""type"" | ""song"")
(""Mermaid"" | ""writer"" | ""Espen Lind"")
(""Mermaid"" | ""performer"" | ""Train"")
(""Mermaid"" | ""release date"" | ""December 27, 2012"")
(""Train"" | ""song"" | ""Mermaid"")
(""Train"" | ""song"" | ""This’ll Be My Year"")
(""This’ll Be My Year"" | ""type"" | ""song"")
(""This’ll Be My Year"" | ""performer"" | ""Train"")"
1596,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Mason School of Business is located at 101 Ukrop Way in Virginia USA. The company is a tenant at the Alan B Miller Hall which was designed by Robert A M Stern and was completed on the 1st of June 2009. The building had begun construction on the 30th of March 2007.,"(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | completionDate | 2009-06-01)
(Alan_B._Miller_Hall | location | Virginia)
(Mason_School_of_Business | country | United_States)","(""Mason School of Business"" | ""location"" | ""101 Ukrop Way, Virginia USA"")
(""Mason School of Business"" | ""tenant at"" | ""Alan B Miller Hall"")
(""Alan B Miller Hall"" | ""designer"" | ""Robert A M Stern"")
(""Alan B Miller Hall"" | ""completion date"" | ""1st of June 2009"")
(""Alan B Miller Hall"" | ""construction start date"" | ""30th of March 2007"")"
1597,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Expect a Miracle is an easy listening album in the instrumental music genre. It was followed by Brian Kelly's album Afterplay.,"(Expect_a_Miracle | genre | Instrumental_music)
(Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Easy_listening)","(""Expect a Miracle"" | rdf:type | ""Album"")
(""Expect a Miracle"" | rdf:type | ""Easy Listening Album"")
(""Expect a Miracle"" | rdf:type | ""Instrumental music album"")
(""Expect a Miracle"" | dbo:followedBy | ""Afterplay"")
(""Brian Kelly"" | dbo:album | ""Afterplay"")"
1598,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",John Mills' birth date is 01-01-1908.,(John_Mills | birthDate | 1908-01-01),(John Mills | birth date | 01-01-1908)
1599,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",It's Great to Be Young was edited by Max Benedict.,"(""It's_Great_to_Be_Young_(1956_film) | editing | Max_Benedict"")","(""It's Great to Be Young"" | ""editor"" | ""Max Benedict"")"
1600,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy is located in France, whose leader's title is ""President of the Senate.""","(University_of_Burgundy | country | France)
(France | leaderTitle | ""President of the Senate"")","(University of Burgundy | location | France)
(France | leader's title | ""President of the Senate"")"
1601,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","MotorSport Vision is the operating organisation for Bedford Aerodrome. This aerodrome has a runway called 08/26, and its runway surface is made of concrete with the length of 1095.0. It is located in Thurleigh, where it serves the Bedford Autodrome. Bedford Aerodrome's International Civil Aviation Organization (ICAO) identifier is EGBF.","(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | runwayLength | 1095.0)
(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | location | Thurleigh)
(Bedford_Aerodrome | icaoLocationIdentifier | EGBF)
(Bedford_Aerodrome | runwayName | ""08/26"")
(Bedford_Aerodrome | runwaySurfaceType | Concrete)","(""MotorSport Vision"" | ""is the operating organisation for"" | ""Bedford Aerodrome"")
(""Bedford Aerodrome"" | ""has a runway"" | ""08/26"")
(""08/26"" | ""is a runway of"" | ""Bedford Aerodrome"")
(""08/26"" | ""has runway surface"" | ""concrete"")
(""08/26"" | ""has length"" | 1095.0)
(""Bedford Aerodrome"" | ""is located in"" | ""Thurleigh"")
(""Bedford Aerodrome"" | ""serves"" | ""Bedford Autodrome"")
(""Bedford Aerodrome"" | ""has International Civil Aviation Organization identifier"" | ""EGBF"")"
1602,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The ALCO RS-3 was produced between May 1950 and August 1956. It has a four-stroke engine, a cylinder count of 12 and has the length of 17068.8 millimetres.","(ALCO_RS-3 | buildDate | ""May 1950 - August 1956"")
(ALCO_RS-3 | engine | Four-stroke_engine)
(ALCO_RS-3 | cylinderCount | 12)
(ALCO_RS-3 | length | 17068.8 (millimetres))","(ALCO RS-3 | dateOfProductionStart | ""May 1950"")
(ALCO RS-3 | dateOfProductionEnd | ""August 1956"")
(ALCO RS-3 | hasEngineType | ""four-stroke engine"")
(ALCO RS-3 | hasCylinderCount | 12)
(ALCO RS-3 | hasLength | 17068.8)"
1603,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The birthplace of Grigory Neujmin was Tbilisi.,(Grigory_Neujmin | birthPlace | Tbilisi),"(""Grigory Neujmin"" | ""birthPlace"" | ""Tbilisi"")"
1604,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was an American who was born on November 18, 1923 in New Hampshire. He was a member of the Apollo 14 crew. Shepard retired on August 1, 1974 and died in California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | dateOfRetirement | ""1974-08-01"")
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | mission | Apollo_14)","(Alan Shepard | type | American)
(Alan Shepard | birthDate | November 18, 1923)
(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | memberOf | Apollo 14)
(Alan Shepard | retirementDate | August 1, 1974)
(Alan Shepard | deathPlace | California)"
1605,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",It's Great to be Young is a 94 minute film starring John Mills and was released in 1956. The director and cinematographer was Gilbert Taylor and Cyril Frankel.,"(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor)
(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | director | Cyril_Frankel"")","(""It's Great to be Young"" | length (minutes) | 94)
(""It's Great to be Young"" | starring | ""John Mills"")
(""It's Great to be Young"" | release year | 1956)
(""It's Great to be Young"" | director | ""Gilbert Taylor"")
(""It's Great to be Young"" | cinematographer | ""Gilbert Taylor"")
(""It's Great to be Young"" | director | ""Cyril Frankel"")
(""It's Great to be Young"" | cinematographer | ""Cyril Frankel"")"
1606,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Associated with the group Theatre of Eternal Music, The Velvet Underground created Bootleg Series Volume 1: The Quine Tapes.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(The_Velvet_Underground | associatedBand/associatedMusicalArtist | Theatre_of_Eternal_Music)","(""The Velvet Underground"" | ""associatedWith"" | ""Theatre of Eternal Music"")
(""The Velvet Underground"" | ""created"" | ""Bootleg Series Volume 1: The Quine Tapes"")"
1607,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bootleg Series Volume 1: The Quine Tapes is by The Velvet Underground.,(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground),"(""Bootleg Series Volume 1: The Quine Tapes"" | ""isBy"" | ""The Velvet Underground"")"
1608,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Adolfo Suarez Madrid-Barajas Airport is located in Madrid and is operated by ENAIRE. The airport has a runway with the length of 3500 and is 610.0 metres above sea level.,"(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Madrid)","(Adolfo Suarez Madrid-Barajas Airport | location | Madrid)
(Adolfo Suarez Madrid-Barajas Airport | operator | ENAIRE)
(Adolfo Suarez Madrid-Barajas Airport | hasRunway | Literal:True)
(Adolfo Suarez Madrid-Barajas Airport | runwayLength | 3500)
(Adolfo Suarez Madrid-Barajas Airport | elevationAboveSeaLevel | 610.0)"
1609,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The album Take It Off! is followed by the EP 'Til Death Do Us Part.,"(""Take_It_Off! | followedBy | 'Til_Death_Do_Us_Part_(EP)"")","(""Take It Off!"" | ""is followed by"" | ""'Til Death Do Us Part"")"
1610,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","African Americans are an ethnic group in the USA where Abraham A. Ribicoff was born and died. Before dying in New York, Abraham A. Ribicoff was the husband of Ruth Ribicoff.","(Abraham_A._Ribicoff | spouse | ""Ruth Ribicoff"")
(Abraham_A._Ribicoff | birthPlace | United_States)
(Abraham_A._Ribicoff | deathPlace | New_York_City)
(United_States | ethnicGroup | African_Americans)","(African Americans | isEthnicGroupIn | USA)
(Abraham A. Ribicoff | birthPlace | USA)
(Abraham A. Ribicoff | deathPlace | New York)
(Abraham A. Ribicoff | spouse | Ruth Ribicoff)"
1611,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Eric Flint, who was born in Burbank California, is the author of 1634: The Bavarian Crisis.","(Eric_Flint | birthPlace | Burbank,_California)
(1634:_The_Bavarian_Crisis | author | Eric_Flint)","(""Eric Flint"" | ""place of birth"" | ""Burbank, California"")
(""Eric Flint"" | ""profession"" | ""author"")
(""Eric Flint"" | ""book"" | ""1634: The Bavarian Crisis"")"
1612,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Year of No Light album Nord, a sludge metal album, was followed by Year of No Light's album Live at Roadburn 2008.","(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)","(""Nord"" | ""type"" | ""album"")
(""Nord"" | ""by"" | ""Year of No Light"")
(""Nord"" | ""genre"" | ""sludge metal"")
(""Nord"" | ""followed by"" | ""Live at Roadburn 2008"")
(""Live at Roadburn 2008"" | ""type"" | ""album"")
(""Live at Roadburn 2008"" | ""by"" | ""Year of No Light"")"
1613,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Born in New Hampshire in 1923, Alan Shepard died in California. The Purple Finch is a native bird from his home state.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | deathPlace | California)
(New_Hampshire | bird | Purple_finch)
(Alan_Shepard | birthPlace | New_Hampshire)","(Alan Shepard | birthYear | 1923)
(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | deathPlace | California)
(Purple Finch | location | New Hampshire)"
1614,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Turkish people primarily speak the Turkish language.,(Turkish_people | language | Turkish_language),"(""The Turkish people"" | primarily speak | ""the Turkish language"")"
1615,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was an American, born November 18th, 1923 in New Hampshire and he died in California. He graduated from NWC with an M.A. in 1957, was Chief of the Astronaut Office in 1963 and retired August 1st, 1974.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | servedAsChiefOfTheAstronautOfficeIn | 1963)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | dateOfRetirement | ""1974-08-01"")
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | almaMater | ""NWC, M.A. 1957"")","(Alan Shepard | type | American)
(Alan Shepard | birthDate | November 18th, 1923)
(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | deathPlace | California)
(Alan Shepard | almaMater | NWC)
(Alan Shepard | academicDegree | M.A)
(Alan Shepard | graduationYear | 1957)
(Alan Shepard | jobTitle | Chief of the Astronaut Office)
(Alan Shepard | jobStartYear | 1963)
(Alan Shepard | retirementDate | August 1st, 1974)"
1616,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument, erected in 2000, is located in Adams County, Pennsylvania. It is categorized as a contributing property. Frederick County, Maryland is southwest of Adams County, Pennsylvania, while Carroll County, Maryland is to the southeast.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSouthwest | Frederick_County,_Maryland)
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""11th Mississippi Infantry Monument"" | ""date of establishment"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Adams County, Pennsylvania"")
(""11th Mississippi Infantry Monument"" | ""type"" | ""contributing property"")
(""Frederick County, Maryland"" | ""location relation"" | ""Adams County, Pennsylvania"")
(""Frederick County, Maryland"" | ""cardinal direction"" | ""southwest"")
(""Carroll County, Maryland"" | ""location relation"" | ""Adams County, Pennsylvania"")
(""Carroll County, Maryland"" | ""cardinal direction"" | ""southeast"")"
1617,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Anatole de Grunwald and Terence Rattigan wrote the movie ""English Without Tears"". Bernard Knowles was the cinematographer.","(English_Without_Tears | writer | Anatole_de_Grunwald)
(English_Without_Tears | cinematography | Bernard_Knowles)
(English_Without_Tears | writer | Terence_Rattigan)","(""Anatole de Grunwald"" | ""wrote"" | ""English Without Tears"")
(""Terence Rattigan"" | ""wrote"" | ""English Without Tears"")
(""Bernard Knowles"" | ""was the cinematographer of"" | ""English Without Tears"")"
1618,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Super Capers is a movie starring Tom Sizemore.,(Super_Capers | starring | Tom_Sizemore),"(""Super Capers"" | type | ""movie"")
(""Super Capers"" | starring | ""Tom Sizemore"")
(""Tom Sizemore"" | isStarOf | ""Super Capers"")"
1619,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The College of William and Mary is the owner of the Alan B. Miller Hall which is situated at 101 Ukrop Way in the USA. The Mason School of Business are the current tenants of the building which was designed by Robert A.M. Stern and whose construction began on the 30th of March, 2007.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | tenant | Mason_School_of_Business)
(Mason_School_of_Business | country | United_States)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""The College of William and Mary"" | ""ownership"" | ""Alan B. Miller Hall""),
(""Alan B. Miller Hall"" | ""location"" | ""101 Ukrop Way""),
(""Alan B. Miller Hall"" | ""country"" | ""USA""),
(""Mason School of Business"" | ""tenancy"" | ""Alan B. Miller Hall""),
(""Alan B. Miller Hall"" | ""architect"" | ""Robert A.M. Stern""),
(""Alan B. Miller Hall"" | ""constructionStartDate"" | ""30th of March, 2007"")"
1620,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","One of the leaders of Ciudad Ayala, which is located in the Pacific Standard Time Zone, is the City Manager.","(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | timeZone | Pacific_Standard_Time_Zone)","(""Ciudad Ayala"" | ""type"" | ""City"")
(""Ciudad Ayala"" | ""location"" | ""Pacific Standard Time Zone"")
(""City Manager"" | ""role"" | ""leader"")
(""City Manager"" | ""location"" | ""Ciudad Ayala"")"
1621,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album titled, Year of No Light was produced by the sludge metal band, Nord.","(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light)","(""Year of No Light"" | type | ""Album"")
(""Year of No Light"" | produced by | ""Nord"")
(""Nord"" | type | ""Sludge metal band"")
(""Nord"" | produced | ""Year of No Light"")"
1622,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina has Israeli nationality and died in Israel. The population density of Israel is 387.63.,"(Liselotte_Grschebina | deathPlace | Israel)
(Israel | populationDensity | 387.63)
(Liselotte_Grschebina | nationality | Israel)","(Liselotte Grschebina | nationality | ""Israeli"")
(Liselotte Grschebina | deathPlace | ""Israel"")
(Israel | populationDensity | 387.63)"
1623,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nurhan Atasoy has a residence in Istanbul.,(Nurhan_Atasoy | residence | Istanbul),"(""Nurhan Atasoy"" | ""hasResidence"" | ""Istanbul"")"
1624,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brandon Carter (born in England) is known for the Carter constant as well as the No-hair theorem. His doctoral advisor is Dennis William Sciama.,"(Brandon_Carter | knownFor | Carter_constant)
(Brandon_Carter | knownFor | No-hair_theorem)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)
(Brandon_Carter | birthPlace | England)","1. (Brandon Carter | birthPlace | England)
2. (Brandon Carter | knownFor | Carter constant)
3. (Brandon Carter | knownFor | No-hair theorem)
4. (Brandon Carter | doctoralAdvisor | Dennis William Sciama)"
1625,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adolfo Suárez Madrid Barajas Airport is found in Alcobendas and is operated by ENAIRE. The runway length at the airport is 3500 and it is 610 metres above sea level, with a runway named 14L/32R.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayName | ""14L/32R"")","(""Adolfo Suárez Madrid Barajas Airport"" | ""isFoundIn"" | ""Alcobendas"")
(""Adolfo Suárez Madrid Barajas Airport"" | ""isOperatedBy"" | ""ENAIRE"")
(""Adolfo Suárez Madrid Barajas Airport"" | ""hasRunwayLength"" | ""3500"")
(""Adolfo Suárez Madrid Barajas Airport"" | ""isAboveSeaLevel"" | ""610 metres"")
(""Adolfo Suárez Madrid Barajas Airport"" | ""hasRunway"" | ""14L/32R"")"
1626,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Harold French was born in 1897.,(Harold_French | birthYear | 1897),(Harold French | was born in | 1897)
1627,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bionico is a dessert found in Mexico.,"(Bionico | course | Dessert)
(Bionico | country | Mexico)","(""Bionico"" | ""isA"" | ""Dessert""),
(""Bionico"" | ""foundIn"" | ""Mexico"")"
1628,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","A cookie is a type of dessert, much like Bionico, which has granola in it and can be found in Guadalajara, Mexico. Mexico is inhabited by Mexicans and uses the peso as its currency.","(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Bionico | region | Guadalajara)
(Bionico | ingredient | Granola)
(Dessert | dishVariation | Cookie)
(Bionico | country | Mexico)","(""cookie"" | ""type"" | ""dessert"")
(""Bionico"" | ""type"" | ""dessert"")
(""Bionico"" | ""ingredient"" | ""granola"")
(""Bionico"" | ""location"" | ""Guadalajara"")
(""Guadalajara"" | ""partOf"" | ""Mexico"")
(""Mexico"" | ""hasInhabitant"" | ""Mexicans"")
(""Mexico"" | ""usesCurrency"" | ""peso"")"
1629,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Noise rock is a fusion genre based on rock music an example of which is The Bootleg Series Volume I: The Quine Tapes.,"(Bootleg_Series_Volume_1:_The_Quine_Tapes | genre | Rock_music)
(Rock_music | musicFusionGenre | Noise_rock)","(""Noise rock"" | rdf:type | ""fusion genre""),
(""Noise rock"" | basedOn | ""rock music""),
(""The Bootleg Series Volume I: The Quine Tapes"" | rdf:type | ""Noise rock"")"
1630,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aaron Turner is a singer who began his career in 1995. He played with the band Twilight.,"(Aaron_Turner | instrument | Singing)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))
(Aaron_Turner | activeYearsStartYear | 1995)","(Aaron Turner | type | Singer)
(Aaron Turner | careerStartYear | 1995)
(Aaron Turner | memberOf | Twilight)"
1631,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","A New Hampshire native, Alan Shepard died in California on July 21, 1998.","(Alan_Shepard | deathPlace | California)
(Alan_Shepard | deathDate | ""1998-07-21"")
(Alan_Shepard | birthPlace | New_Hampshire)","(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | deathPlace | California)
(Alan Shepard | deathDate | July 21, 1998)"
1632,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina, born in the German Empire, did her studies at the School of Applied Arts in Stuttgart.","(Liselotte_Grschebina | birthPlace | German_Empire)
(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)","(""Liselotte Grschebina"" | ""birthPlace"" | ""German Empire"")
(""Liselotte Grschebina"" | ""almaMater"" | ""School of Applied Arts in Stuttgart"")"
1633,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",It’s Great to Be Young was a movie edited by Max Benedict. It stars John Mills and Cecil Parker and it was released in 1956. Max Benedict passed away in London.,"(""It's_Great_to_Be_Young_(1956_film) | editing | Max_Benedict)
(Max_Benedict | deathPlace | London)
(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | starring | Cecil_Parker"")","(""It’s Great to Be Young"" | type | ""movie"")
(""It’s Great to Be Young"" | editor | ""Max Benedict"")
(""It’s Great to Be Young"" | starring | ""John Mills"")
(""It’s Great to Be Young"" | starring | ""Cecil Parker"")
(""It’s Great to Be Young"" | release date | 1956)
(""Max Benedict"" | edited | ""It’s Great to Be Young"")
(""Max Benedict"" | death place | ""London"")
(""John Mills"" | acted in | ""It’s Great to Be Young"")
(""Cecil Parker"" | acted in | ""It’s Great to Be Young"")"
1634,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiação Sportiva Arapiraquense play in the Campeonato Brasileiro Série C league, Campeonato Brasileiro Série C is from Brazil, Agremiação Sportiva Arapiraquense has 17000 members, Agremiacao Sportiva Arapiraquense are managed by Vica.","(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | country | Brazil)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | manager | Vica)","(Agremiação Sportiva Arapiraquense | play in | Campeonato Brasileiro Série C)
(Campeonato Brasileiro Série C | is from | Brazil)
(Agremiação Sportiva Arapiraquense | has | 17000 members)
(Agremiação Sportiva Arapiraquense | is managed by | Vica)"
1635,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nie Haisheng was a fighter pilot from the People's Republic of China who was born on October 13, 1964, took part in the Shenzhou 6 mission and was part of the mission Shenzhou 10.","(Nie_Haisheng | mission | Shenzhou_10)
(Nie_Haisheng | mission | Shenzhou_6)
(""Nie_Haisheng | nationality | People's_Republic_of_China)
(Nie_Haisheng | birthDate | 1964-10-13)
(Nie_Haisheng | occupation | Fighter_pilot)","(""Nie Haisheng"" | ""type"" | ""Person"")
(""Nie Haisheng"" | ""birthDate"" | ""October 13, 1964"")
(""Nie Haisheng"" | ""nationality"" | ""People's Republic of China"")
(""Nie Haisheng"" | ""occupation"" | ""fighter pilot"")
(""Nie Haisheng"" | ""participatedIn"" | ""Shenzhou 6"")
(""Nie Haisheng"" | ""participatedIn"" | ""Shenzhou 10"")"
1636,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Bootleg Series Volume 1: The Quine Tapes was recorded in St. Louis, Missouri, United States. It was released under Polydor Records and Universal Music Group on October 16th, 2001.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | United_States)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | St._Louis,_Missouri)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Polydor_Records)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Universal_Music_Group)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | releaseDate | 2001-10-16)","(""The Bootleg Series Volume 1: The Quine Tapes"" | ""recorded in"" | ""St. Louis, Missouri, United States"")
(""The Bootleg Series Volume 1: The Quine Tapes"" | ""released under"" | ""Polydor Records"")
(""The Bootleg Series Volume 1: The Quine Tapes"" | ""released under"" | ""Universal Music Group"")
(""The Bootleg Series Volume 1: The Quine Tapes"" | ""release date"" | ""October 16th, 2001"")"
1637,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The town of Darlington is in the country of the United Kingdom.,(Darlington | country | United_Kingdom),"(""Darlington"" | ""type"" | ""Town""),
(""Darlington"" | ""isIn"" | ""United Kingdom"")"
1638,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Mermaid song by Train was written by Espen Lind and released on 12/27/2012, which was preceded by the song This'll Be My Year.","(Mermaid_(Train_song) | releaseDate | 2012-12-27)
(""Mermaid_(Train_song) | precededBy | This'll_Be_My_Year)
(Mermaid_(Train_song) | writer | Espen_Lind)","(""The Mermaid"" | ""artist"" | ""Train"")
(""The Mermaid"" | ""writtenBy"" | ""Espen Lind"")
(""The Mermaid"" | ""releaseDate"" | ""12/27/2012"")
(""The Mermaid"" | ""precededBy"" | ""This'll Be My Year"")"
1639,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Max Benedict died in 1986.,(Max_Benedict | deathYear | 1986),"(""Max Benedict"" | ""deathYear"" | ""1986"")"
1640,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Recep Tayyip Erdoğan is a leader of Turkey.,(Turkey | leader | Recep_Tayyip_Erdoğan),"(Recep Tayyip Erdoğan | type | leader)
(Recep Tayyip Erdoğan | leaderOf | Turkey)"
1641,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Although Hypermarcas is in the pharmaceuticals industry and its main product is drugs, it also sells healthcare products.","(Hypermarcas | product | Drugs)
(Hypermarcas | industry | Pharmaceuticals)
(Hypermarcas | product | Healthcare)","(""Hypermarcas"" | ""industry"" | ""pharmaceuticals""),
(""Hypermarcas"" | ""sells"" | ""drugs""),
(""Hypermarcas"" | ""sells"" | ""healthcare products"")"
1642,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Espen Lind was a writer of the song Mermaid by Train.,(Mermaid_(Train_song) | writer | Espen_Lind),"(Espen Lind | type | Writer)
(Espen Lind | wrote | Mermaid)
(Mermaid | type | Song)
(Mermaid | writtenBy | Espen Lind)
(Mermaid | performedBy | Train)
(Train | type | Band)
(Train | performs | Mermaid)"
1643,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, or Olga Nikolaevna Bondareva, was born on April 27,1937 in Leningrad, USSR. She is known for the Bondareva-Shapley theorem.","(Olga_Bondareva | birthPlace | Leningrad,_USSR)
(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")","(Olga Bondareva | name | ""Olga Nikolaevna Bondareva"")
(Olga Bondareva | born on | ""April 27, 1937"")
(Olga Bondareva | birthPlace | ""Leningrad, USSR"")
(Olga Bondareva | known for | ""Bondareva-Shapley theorem"")"
1644,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Michael Rooker was in Super Capers, a 98 minute film starring Tom Sizemore.","(Super_Capers | starring | Michael_Rooker)
(Super_Capers | starring | Tom_Sizemore)
(Super_Capers | runtime | 98.0)","(""Michael Rooker"" | ""participated in"" | ""Super Capers"")
(""Super Capers"" | ""has participant"" | ""Michael Rooker"")
(""Super Capers"" | ""has duration"" | ""98 minutes"")
(""Super Capers"" | ""stars"" | ""Tom Sizemore"")
(""Tom Sizemore"" | ""starring in"" | ""Super Capers"")"
1645,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Bootleg Series Volume I: The Quine Tapes have a runtime of 230.05 minutes.,(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05),"(""The Bootleg Series Volume I: The Quine Tapes"" | hasRuntime | ""230.05"")"
1646,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","AmeriGas, located in the city of King of Prussia, Pennsylvania, serves all regions of the United States, which has a population of 324,720,797 and total area of 9833516.63 (square kilometres).","(AmeriGas | city | King_of_Prussia,_Pennsylvania)
(United_States | populationTotal | 324720797)
(AmeriGas | country | United_States)
(AmeriGas | regionServed | United_States)
(United_States | areaTotal | 9833516.63  (square kilometres))","(""AmeriGas"" | ""location"" | ""King of Prussia"")
(""King of Prussia"" | ""locatedIn"" | ""Pennsylvania"")
(""AmericanGas"" | ""servesRegion"" | ""United States"")
(""United States"" | ""hasPopulation"" | ""324,720,797"")
(""United States"" | ""hasTotalArea"" | ""9833516.63 square kilometres"")"
1647,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Death on a Factory Farm was originally featured on HBO. Tom Simon produced the film and Geof Bartz edited it.,"(Death_on_a_Factory_Farm | producer | Tom_Simon)
(Death_on_a_Factory_Farm | broadcastedBy | HBO)
(Death_on_a_Factory_Farm | editor | Geof_Bartz)","(""Death on a Factory Farm"" | ""originally featured on"" | ""HBO"")
(""Tom Simon"" | ""produced"" | ""Death on a Factory Farm"")
(""Geof Bartz"" | ""edited"" | ""Death on a Factory Farm"")"
1648,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Tom Simon produced 'Death on a Factory Farm' which features music written by Jamie Lawrence.,"(Death_on_a_Factory_Farm | producer | Tom_Simon)
(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)","(Tom Simon | type | Person)
(Tom Simon | produced | Death on a Factory Farm)
(Death on a Factory Farm | type | Film)
(Death on a Factory Farm | featuresMusicWrittenBy | Jamie Lawrence)
(Jamie Lawrence | type | Person)
(Jamie Lawrence | wroteMusicFor | Death on a Factory Farm)"
1649,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Super Capers is starring Adam West who started his career in 1954.,"(Super_Capers | starring | Adam_West)
(Adam_West | activeYearsStartYear | 1954-01-01)","(""Super Capers"" | ""starring"" | ""Adam West""),
(""Adam West"" | ""started career"" | ""1954"")"
1650,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Following the album Squeeze, The Velvet Underground produced the rock album The Bootleg Series Volume I: The Quine Tapes. The project was recorded through Polydor Records under the Universal Music Group label.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | genre | Rock_music)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | precededBy | Squeeze_(The_Velvet_Underground_album))
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Polydor_Records)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Universal_Music_Group)","(""Squeeze"" | ""followedBy"" | ""The Bootleg Series Volume I: The Quine Tapes"")
(""The Velvet Underground"" | ""produced"" | ""The Bootleg Series Volume I: The Quine Tapes"")
(""The Bootleg Series Volume I: The Quine Tapes"" | ""producer"" | ""The Velvet Underground"")
(""The Bootleg Series Volume I: The Quine Tapes"" | ""genre"" | ""rock"")
(""The Bootleg Series Volume I: The Quine Tapes"" | ""recordedThrough"" | ""Polydor Records"")
(""Polydor Records"" | ""underLabel"" | ""Universal Music Group"")
(""Universal Music Group"" | ""hasLabel"" | ""Polydor Records"")
(""The Bootleg Series Volume I: The Quine Tapes"" | ""underLabel"" | ""Universal Music Group"")"
1651,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy, which has 16,800 undergraduate students, employs 2900 staff and 1299 doctoral students.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfDoctoralStudents | 1299)","(""University of Burgundy"" | ""hasNumberOfStudents"" | 16800)
(""University of Burgundy"" | ""employs"" | 2900)
(""University of Burgundy"" | ""studentDoctoral"" | 1299)"
1652,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The construction of Alan B. Miller Hall lasted from March 30th, 2007 to June 1st, 2009. Robert A. M. Stern is the architect of the building. Alan B. Miller Hall is located at 101 Ukrop Way, Virginia, and is owned by the College of William and Mary.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | completionDate | 2009-06-01)
(Alan_B._Miller_Hall | location | Virginia)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""Alan B. Miller Hall"", ""constructionStartDate"", ""March 30th, 2007"")
(""Alan B. Miller Hall"", ""constructionEndDate"", ""June 1st, 2009"")
(""Alan B. Miller Hall"", ""architect"", ""Robert A. M. Stern"")
(""Alan B. Miller Hall"", ""location"", ""101 Ukrop Way, Virginia"")
(""Alan B. Miller Hall"", ""owner"", ""College of William and Mary"")"
1653,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Cyril Bruce was the director of the McVeagh of the South Seas.,(McVeagh_of_the_South_Seas | director | Cyril_Bruce),"(""Cyril Bruce"" | ""type"" | ""Person""),
(""Cyril Bruce"" | ""jobTitle"" | ""Director""),
(""McVeagh of the South Seas"" | ""type"" | ""Movie""),
(""Cyril Bruce"" | ""directed"" | ""McVeagh of the South Seas"")"
1654,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","It's Great to Be Young is a 1956 film which cost £282,838.","(""It's_Great_to_Be_Young_(1956_film) | gross | 282838.0"")","(""It's Great to Be Young"" | type | ""film"")
(""It's Great to Be Young"" | date | ""1956"")
(""It's Great to Be Young"" | cost | ""£282,838"")"
1655,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva was born on January 1st, 1958. She is now a citizen of the United States and resides in New Jersey. Dentcheva is a professional in the field of mathematical optimization, and is known for her work with stochastic programming. She was influenced by Andrzej Piotr Ruszczynski.","(Darinka_Dentcheva | influencedBy | Andrzej_Piotr_Ruszczyński)
(Darinka_Dentcheva | citizenship | United_States)
(Darinka_Dentcheva | birthDate | 1958-01-01)
(Darinka_Dentcheva | professionalField | Mathematical_optimization)
(Darinka_Dentcheva | knownFor | Stochastic_programming)
(Darinka_Dentcheva | residence | New_Jersey)
(Darinka_Dentcheva | residence | United_States)","(Darinka Dentcheva | birthDate | ""1958-01-01"")
(Darinka Dentcheva | citizenship | United States)
(Darinka Dentcheva | residence | New Jersey)
(Darinka Dentcheva | profession | ""mathematical optimization"")
(Darinka Dentcheva | knownFor | ""work with stochastic programming"")
(Darinka Dentcheva | influencedBy | Andrzej Piotr Ruszczynski)"
1656,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The academic staff size of the University of Cambridge is 6,645.",(University_of_Cambridge | academicStaffSize | 6645),"(University of Cambridge | academic staff size | 6,645)"
1657,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The American Locomotive Company made ALCO RS-3 has a 12 cylinder engine.,"(ALCO_RS-3 | builder | American_Locomotive_Company)
(ALCO_RS-3 | cylinderCount | 12)","(American Locomotive Company | made | ALCO RS-3)
(ALCO RS-3 | has | 12 cylinder engine)"
1658,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson, lived from January 1st, 1726 to February 18th, 1776, was born in Darlington, Kingdom of England. She was married to George Monson and resided in India for a majority of her life.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | deathDate | 1776-02-18)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | residence | India)
(Lady_Anne_Monson | spouse | George_Monson)","(""Lady Anne Monson"" | ""birthDate"" | ""1726-01-01"")
(""Lady Anne Monson"" | ""deathDate"" | ""1776-02-18"")
(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington, Kingdom of England"")
(""Lady Anne Monson"" | ""spouse"" | ""George Monson"")
(""Lady Anne Monson"" | ""residence"" | ""India"")"
1659,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Pontiac Rageous was first produced in 1997.,(Pontiac_Rageous | productionStartYear | 1997),"(""Pontiac Rageous"" | ""productionStartYear"" | 1997)"
1660,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Darinka Dentcheva is a US citizen and resides in New Jersey. Her alma mater is Humboldt University and she is known for her work with stochastic programming.,"(Darinka_Dentcheva | citizenship | United_States)
(Darinka_Dentcheva | knownFor | Stochastic_programming)
(Darinka_Dentcheva | almaMater | Humboldt_University)
(Darinka_Dentcheva | residence | New_Jersey)
(Darinka_Dentcheva | residence | United_States)","(Darinka Dentcheva | citizenship | US)

(Darinka Dentcheva | residence | New Jersey)

(Darinka Dentcheva | almaMater | Humboldt University)

(Darinka Dentcheva | knownFor | stochastic programming)"
1661,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Estádio Municipal Coaracy da Mata Fonseca is the name of the ground of Agremiação Sportiva Arapiraquense & located in Arapiraca. Agremiação Sportiva Arapiraquense play in the Campeonato Brasileiro Série C league from Brazil (champions were The Vila Nova Futebol Clube), played in the 2015 season, and has 17000 members.","(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | season | 2015)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Campeonato_Brasileiro_Série_C | country | Brazil)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(""Estádio Municipal Coaracy da Mata Fonseca"" | ""name of the ground"" | ""Agremiação Sportiva Arapiraquense"")
(""Estádio Municipal Coaracy da Mata Fonseca"" | ""located in"" | ""Arapiraca"")
(""Agremiação Sportiva Arapiraquense"" | ""play in"" | ""Campeonato Brasileiro Série C"")
(""Campeonato Brasileiro Série C"" | ""located in"" | ""Brazil"")
(""Campeonato Brasileiro Série C"" | ""champions were"" | ""The Vila Nova Futebol Clube"")
(""Agremiação Sportiva Arapiraquense"" | ""played in"" | ""2015 season"")
(""Agremiação Sportiva Arapiraquense"" | ""has"" | ""17000 members"")"
1662,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Year of No Light album Live at Roadburn 2008 had been produced by Roadburn Festival and followed The Year of No Light album Nord that was produced by the band.,"(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Live_at_Roadburn_2008_(Year_of_No_Light_album) | producer | Roadburn_Festival)
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)","(""Live at Roadburn 2008"" | ""producer"" | ""Roadburn Festival"")
(""Live at Roadburn 2008"" | ""precededBy"" | ""Nord"")
(""Live at Roadburn 2008"" | ""albumArtist"" | ""Year of No Light"")
(""Nord"" | ""producer"" | ""Year of No Light"")
(""Nord"" | ""albumArtist"" | ""Year of No Light"")"
1663,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Bedford Aerodrome elevation above the sea level is 83.2104 meters and the runway name is 08/26.,"(Bedford_Aerodrome | elevationAboveTheSeaLevel | 83.2104)
(Bedford_Aerodrome | runwayName | ""08/26"")","(""Bedford Aerodrome"" | ""elevationAboveTheSeaLevel"" | 83.2104)
(""Bedford Aerodrome"" | ""hasRunway"" | ""08/26"")"
1664,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers is a 98 minute movie written and directed by Ray Griggs. It starts Michael Rooker and Tom Sizemore . The budget was $2,000,000 while the income was only $30,955.","(Super_Capers | starring | Michael_Rooker)
(Super_Capers | starring | Tom_Sizemore)
(Super_Capers | budget | 2000000.0)
(Super_Capers | writer | Ray_Griggs_(director))
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | runtime | 98.0)
(Super_Capers | gross | 30955.0)","(""Super Capers"" | ""duration"" | ""98 minutes"")
(""Super Capers"" | ""writtenBy"" | ""Ray Griggs"")
(""Super Capers"" | ""directedBy"" | ""Ray Griggs"")
(""Super Capers"" | ""starring"" | ""Michael Rooker"")
(""Super Capers"" | ""starring"" | ""Tom Sizemore"")
(""Super Capers"" | ""budget"" | ""$2,000,000"")
(""Super Capers"" | ""income"" | ""$30,955"")"
1665,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Year of No Light album Nord, which is in the post-metal genre, was released on the Crucial Blast label on 09/06/2006 and has a runtime of 58.41 minutes.","(Nord_(Year_of_No_Light_album) | genre | Post-metal)
(Nord_(Year_of_No_Light_album) | recordLabel | Crucial_Blast)
(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | runtime | 58.41)","(""Nord"" | ""type"" | ""Album"")
(""Nord"" | ""creator"" | ""Year of No Light"")
(""Nord"" | ""genre"" | ""post-metal"")
(""Nord"" | ""publisher"" | ""Crucial Blast"")
(""Nord"" | ""release date"" | ""09/06/2006"")
(""Nord"" | ""runtime"" | 58.41)"
1666,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument (established in PA, US in 2000), categorized as a Contributing Property, is located in the municipality of Gettysburg in the Adams County that has the Franklin County to its west and the Cumberland county to its north.","(Adams_County,_Pennsylvania | hasToItsWest | Franklin_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | municipality | Gettysburg,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)
(Adams_County,_Pennsylvania | hasToItsNorth | Cumberland_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | country | ""United States"")","(""11th Mississippi Infantry Monument"" | ""establishedIn"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""locatedIn"" | ""Gettysburg"")
(""11th Mississippi Infantry Monument"" | ""belongs_to"" | ""Contributing Property"")
(""Gettysburg"" | ""partOf"" | ""Adams County"")
(""Adams County"" | ""locatedIn"" | ""PA, US"")
(""Adams County"" | ""borders"" | ""Franklin County"")
(""Franklin County"" | ""direction"" | ""west"")
(""Adams County"" | ""borders"" | ""Cumberland County"")
(""Cumberland county"" | ""direction"" | ""north"")"
1667,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Sony Music Entertainment is owned by Sony Corporation.,(Sony_Music_Entertainment | owner | Sony_Corporation),(Sony Music Entertainment | ownership | Sony Corporation)
1668,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aaron Turner is a post-metal singer born in Massachusetts who started performing in 1995 and is a musician in the Lotus Eaters band.,"(Aaron_Turner | genre | Post-metal)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Lotus_Eaters_(band))
(Aaron_Turner | instrument | Singing)
(Aaron_Turner | origin | Massachusetts)
(Aaron_Turner | activeYearsStartYear | 1995)","(Aaron Turner | type | post-metal singer)
(Aaron Turner | bornIn | Massachusetts)
(Aaron Turner | startedPerforming | 1995)
(Aaron Turner | memberOf | Lotus Eaters band)"
1669,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The ALCO RS-30, which is 17068.8 millimeters in length, was built by the American Locomotive Company between May 1950 and August 1956. The company was founded in Schenectady, New York.","(ALCO_RS-3 | buildDate | ""May 1950 - August 1956"")
(American_Locomotive_Company | foundationPlace | Schenectady,_New_York)
(ALCO_RS-3 | builder | American_Locomotive_Company)
(ALCO_RS-3 | length | 17068.8 (millimetres))","(ALCO RS-30 | length | ""17068.8 millimeters"")
(ALCO RS-30 | built by | American Locomotive Company)
(ALCO RS-30 | build start date | ""May 1950"")
(ALCO RS-30 | build end date | ""August 1956"")
(American Locomotive Company | foundedIn | Schenectady)
(American Locomotive Company | locatedIn | New York)"
1670,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Expect a Miracle, which has a runtime of 54:56, was preceded by Pools of Light by Brian Kelly and followed by the album Afterplay.","(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | precededBy | Pools_of_Light_(Brian_Kelly_album))
(Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album))","(""Expect a Miracle"" | runtime | ""54:56"")
(""Expect a Miracle"" | preceded by | ""Pools of Light"")
(""Expect a Miracle"" | followed by | ""Afterplay"")
(""Pools of Light"" | artist | ""Brian Kelly"")
(""Pools of Light"" | followed by | ""Expect a Miracle"")
(""Afterplay"" | preceded by | ""Expect a Miracle"")"
1671,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was born in Karlsruhe on February 5, 1908. In 1994, she died on June 14 in Israel.","(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | deathPlace | Israel)","(Liselotte Grschebina | birthPlace | Karlsruhe)
(Liselotte Grschebina | birthDate | ""February 5, 1908"")
(Liselotte Grschebina | deathPlace | Israel)
(Liselotte Grschebina | deathDate | ""June 14, 1994"")"
1672,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brandon Carter's alma mater is the University of Cambridge.,(Brandon_Carter | almaMater | University_of_Cambridge),(Brandon Carter | alma mater | University of Cambridge)
1673,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The album Take It Off! was preceded by the 35 minute 10 second album Turn Me On.,"(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | followedBy | Take_It_Off!)","(""Take It Off!"" | wasPrecededBy | ""Turn Me On"")

(""Turn Me On"" | duration | ""35 minute 10 second"")"
1674,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1147 Stavropolis, which has an apoapsis of 418476000000.0 and a periapsis of 260855000000.0, had its epoch on July 31 2016.","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))","(""1147 Stavropolis"" | ""hasApoapsis"" | ""418476000000.0"")
(""1147 Stavropolis"" | ""hasPeriapsis"" | ""260855000000.0"")
(""1147 Stavropolis"" | ""hasEpoch"" | ""July 31 2016"")"
1675,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adolfo Suarez Madrid-Barajas Airport is located in Madrid, Paracuellos de Jarama, San Sebastian de los Reyes and Alcobendas. This airport has a runway length of 3500 and is operated by ENAIRE, which is also located in Madrid.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | ""Madrid, Paracuellos de Jarama, San Sebastián de los Reyes and Alcobendas"")","(""Adolfo Suarez Madrid-Barajas Airport"" | ""location"" | ""Madrid"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""location"" | ""Paracuellos de Jarama"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""location"" | ""San Sebastian de los Reyes"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""runway length"" | ""3500"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""operator"" | ""ENAIRE"")
(""ENAIRE"" | ""location"" | ""Madrid"")"
1676,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Lady Anne Monson was born in the Darlington location of the United Kingdom.,"(Lady_Anne_Monson | birthPlace | Darlington)
(Darlington | country | United_Kingdom)","(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington"")
(""Darlington"" | ""isPartOf"" | ""United Kingdom"")
(""Lady Anne Monson"" | ""birthPlace"" | ""United Kingdom"")"
1677,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Abraham A. Ribicoff is married to Ruth Ribicoff and was succeeded by John N. Dempsey. He was born in the United States where African Americans are an ethnic group.,"(Abraham_A._Ribicoff | spouse | ""Ruth Ribicoff"")
(Abraham_A._Ribicoff | successor | John_N._Dempsey)
(Abraham_A._Ribicoff | birthPlace | United_States)
(United_States | ethnicGroup | African_Americans)","(""Abraham A. Ribicoff"" | ""spouse"" | ""Ruth Ribicoff""),
(""Abraham A. Ribicoff"" | ""succeededBy"" | ""John N. Dempsey""),
(""Abraham A. Ribicoff"" | ""birthPlace"" | ""United States""),
(""United States"" | ""ethnicGroup"" | ""African Americans"")"
1678,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Led by a City Manager, the city of Ciudad Ayala is based in Morelos state. It has a population density of 1604 and its metropolitan area population is 1777539.","(Ciudad_Ayala | populationMetro | 1777539)
(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | type | City)
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | isPartOf | Morelos)","(Ciudad Ayala | leader | City Manager)
(Ciudad Ayala | locatedIn | Morelos state)
(Ciudad Ayala | populationDensity | 1604)
(Ciudad Ayala | metropolitanAreaPopulation | 1777539)"
1679,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ray Griggs wrote and directed the $2000000 budgeted movie Super Capers which was edited by Stacy Katzman and runs 98 minutes.,"(Super_Capers | editing | Stacy_Katzman)
(Super_Capers | runtime | 98.0)
(Super_Capers | budget | 2000000.0)
(Super_Capers | writer | Ray_Griggs_(director))
(Super_Capers | director | Ray_Griggs_(director))","(""Ray Griggs"" | ""wrote"" | ""Super Capers"")
(""Ray Griggs"" | ""directed"" | ""Super Capers"")
(""Super Capers"" | ""budget"" | ""$2000000"")
(""Super Capers"" | ""was edited by"" | ""Stacy Katzman"")
(""Super Capers"" | ""runs"" | ""98 minutes"")"
1680,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Velvet Underground created the album Bootleg Series Volume 1: The Quine Tapes.,(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground),"(""The Velvet Underground"" | ""created"" | ""the album Bootleg Series Volume 1: The Quine Tapes"")"
1681,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","""McVeagh of the South Seas"" was directed by actor Harry Carey, born in 1878.",(McVeagh_of_the_South_Seas | director | Harry_Carey_(actor_born_1878)),"(""McVeagh of the South Seas"" | director | ""Harry Carey"")
(""Harry Carey"" | birthDate | 1878)"
1682,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was born on November 18, 1923 in New Hampshire, United States. He graduated from NWC in 1957 with an M.A., and served as Chief of the Astronaut Office in 1963 and as a test pilot before he died in California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | servedAsChiefOfTheAstronautOfficeIn | 1963)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | almaMater | ""NWC, M.A. 1957"")
(Alan_Shepard | occupation | Test_pilot)","(Alan Shepard | birthDate | ""November 18, 1923"")
(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | birthPlace | United States)
(Alan Shepard | education | NWC)
(Alan Shepard | graduationYear | 1957)
(Alan Shepard | degree | M.A.)
(Alan Shepard | servedAs | Chief of the Astronaut Office)
(Alan Shepard | servedInYear | 1963)
(Alan Shepard | occupation | test pilot)
(Alan Shepard | deathPlace | California)"
1683,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Pontiac Rageous began and ended production in 1997 and has a coupe body style.,"(Pontiac_Rageous | productionStartYear | 1997)
(Pontiac_Rageous | productionEndYear | 1997)
(Pontiac_Rageous | bodyStyle | Coupe)","(""Pontiac Rageous"" | ""beganProductionIn"" | ""1997"")
(""Pontiac Rageous"" | ""endedProductionIn"" | ""1997"")
(""Pontiac Rageous"" | ""hasBodyStyle"" | ""coupe"")"
1684,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The distributing label of Polydor Records is Universal Music Group.,(Polydor_Records | distributingLabel | Universal_Music_Group),"(""Polydor Records"" | ""distributing label"" | ""Universal Music Group"")"
1685,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Based in the Pacific Time Zone, the city of Ciudad Ayala has a population density of 1604. Its leader is Juan Nolasco.","(Ciudad_Ayala | timeZone | Pacific_Daylight_Time)
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | timeZone | Pacific_Standard_Time_Zone)
(Ciudad_Ayala | leader | Juan_Nolasco)","(""Ciudad Ayala"" | ""location"" | ""Pacific Time Zone"")
(""Ciudad Ayala"" | ""populationDensity"" | 1604)
(""Ciudad Ayala"" | ""leader"" | ""Juan Nolasco"")"
1686,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Brandon Carter (born in England) a physicist in the field of General Relativity. He is a graduate of the University of Cambridge, where his advisor was Dennis William Sciama.","(Brandon_Carter | professionalField | General_relativity)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)
(Brandon_Carter | birthPlace | England)
(Brandon_Carter | almaMater | University_of_Cambridge)","1. (Brandon Carter | type | Physicist)
2. (Brandon Carter | wasBornIn | England)
3. (Brandon Carter | worksIn | General Relativity)
4. (Brandon Carter | alumniOf | University of Cambridge)
5. (Brandon Carter | advisor | Dennis William Sciama)
6. (Dennis William Sciama | type | Academic advisor)
7. (England | birthPlaceOf | Brandon Carter)
8. (Physicist | worksIn | General Relativity)
9. (University of Cambridge | graduate | Brandon Carter)"
1687,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Michael Rooker's birthplace is Jasper, Alabama.","(Michael_Rooker | birthPlace | Jasper,_Alabama)","(Michael Rooker | birthplace | Jasper, Alabama)"
1688,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Alan B. Miller Hall which is owned by the College of William and Mary was designed by Robert A.M. Stern.,"(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""Alan B. Miller Hall"" | ""ownedBy"" | ""College of William and Mary"")
(""Alan B. Miller Hall"" | ""designedBy"" | ""Robert A.M. Stern"")"
1689,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiação Sportiva Arapiraquense has 17000 members, their full name is ""Agremiação Sportiva Arapiraquense, and they play in the Campeonato Brasileiro Série C league.","(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | fullName | ""Agremiação Sportiva Arapiraquense"")","(Agremiação Sportiva Arapiraquense | hasMembers | 17000)
(Agremiação Sportiva Arapiraquense | fullName | ""Agremiação Sportiva Arapiraquense"")
(Agremiação Sportiva Arapiraquense | playsIn | Campeonato Brasileiro Série C)"
1690,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala is in the country of Mexico.,(Ciudad_Ayala | country | Mexico),"(""Ciudad Ayala"" | ""is in"" | ""Mexico"")"
1691,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Estadio Municipal Coaracy da Mata Fonseca, located in Arapiraca, is the name of the ground of Agremiacao Sportiva Arapiraquense which has 17000 members. Agremiacao Sportiva Arapiraquense play in the Campeonato Brasileiro Serie C league. They also played in the 2015 season. Vila Nova Futebol Clube, from Brazil, have been champions of Campeonato Brasileiro Serie C.","(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | season | 2015)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Campeonato_Brasileiro_Série_C | country | Brazil)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(Estadio Municipal Coaracy da Mata Fonseca | location | Arapiraca)
(Estadio Municipal Coaracy da Mata Fonseca | groundOf | Agremiacao Sportiva Arapiraquense)
(Agremiacao Sportiva Arapiraquense | memberNumber | 17000)
(Agremiacao Sportiva Arapiraquense | playIn | Campeonato Brasileiro Serie C)
(Agremiacao Sportiva Arapiraquense | playedIn | 2015 season)
(Vila Nova Futebol Clube | location | Brazil)
(Vila Nova Futebol Clube | championOf | Campeonato Brasileiro Serie C)"
1692,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","J. R. R. Tolkien who wrote The Fellowship of the Ring was born on January 3rd, 1892.","(The_Fellowship_of_the_Ring | author | J._R._R._Tolkien)
(J._R._R._Tolkien | birthDate | 1892-01-03)","(J. R. R. Tolkien | birthDate | ""January 3rd, 1892"")
(J. R. R. Tolkien | author | The Fellowship of the Ring)"
1693,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",With a runtime of 54.56 minutes the instrumental album Expect a Miracle was preceded by the Brian Kelly album Pools of Light.,"(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | precededBy | Pools_of_Light_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Instrumental_music)","(""Expect a Miracle"" | runtime | ""54.56 minutes"")
(""Expect a Miracle"" | type | ""instrumental album"")
(""Expect a Miracle"" | preceded_by | ""Pools of Light"")
(""Pools of Light"" | creator | ""Brian Kelly"")"
1694,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Mason School of Business are the current tenants of Alan B Miller Hall in Williamsburg, Virginia, which is owned by The College of William and Mary. The address of the hall is 101 Ukrop Way and the designer of the hall, which began construction on 30/03/2007, is Robert A M Stern.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | location | Williamsburg,_Virginia)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""Mason School of Business"" | ""isTenantOf"" | ""Alan B Miller Hall"")
(""Alan B Miller Hall"" | ""isLocatedIn"" | ""Williamsburg, Virginia"")
(""Alan B Miller Hall"" | ""isOwnedBy"" | ""The College of William and Mary"")
(""Alan B Miller Hall"" | ""hasAddress"" | ""101 Ukrop Way"")
(""Alan B Miller Hall"" | ""hasDesigner"" | ""Robert A M Stern"")
(""Alan B Miller Hall"" | ""beganConstructionOn"" | ""30/03/2007"")"
1695,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina, born in the German Empire, attended the school of Applied Arts in Stuttgart.","(Liselotte_Grschebina | birthPlace | German_Empire)
(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)","(""Liselotte Grschebina"" | ""birthPlace"" | ""German Empire"")
(""Liselotte Grschebina"" | ""almaMater"" | ""School of Applied Arts in Stuttgart"")"
1696,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Brandon Carter was born on January 1, 1942 in England. He graduated from the University of Cambridge and was known for the Carter Constant and his contributions to the no-hair theorem.","(Brandon_Carter | knownFor | Carter_constant)
(Brandon_Carter | knownFor | No-hair_theorem)
(Brandon_Carter | birthPlace | England)
(Brandon_Carter | birthDate | 1942-01-01)
(Brandon_Carter | almaMater | University_of_Cambridge)","(Brandon Carter | birthDate | ""January 1, 1942"")
(Brandon Carter | birthPlace | England)
(Brandon Carter | almaMater | University of Cambridge)
(Brandon Carter | knownFor | Carter Constant)
(Brandon Carter | knownFor | no-hair theorem)
(Brandon Carter | contributedTo | no-hair theorem)"
1697,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng was born on 10/13/1964. He is a fighter pilot who took part in the Shenzhou 6 and Shenzhou 10 missions.,"(Nie_Haisheng | mission | Shenzhou_10)
(Nie_Haisheng | mission | Shenzhou_6)
(Nie_Haisheng | birthDate | 1964-10-13)
(Nie_Haisheng | occupation | Fighter_pilot)","(""Nie Haisheng"" | ""birthDate"" | ""1964-10-13"")
(""Nie Haisheng"" | ""occupation"" | ""fighter pilot"")
(""Nie Haisheng"" | ""participatedIn"" | ""Shenzhou 6"")
(""Nie Haisheng"" | ""participatedIn"" | ""Shenzhou 10"")"
1698,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala ruled by governator with a population density of 1604.0 as well as above the sea level 1147.0 is a part of Morelos.,"(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | leaderTitle | Governator)
(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)","(""Ciudad Ayala"" | ""ruleBy"" | ""governator""),
(""Ciudad Ayala"" | ""populationDensity"" | 1604.0),
(""Ciudad Ayala"" | ""elevation"" | 1147.0),
(""Ciudad Ayala"" | ""isPartOf"" | ""Morelos"")"
1699,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adolfo Suárez Madrid–Barajas Airport has runway length of 3,500 and an elevation of 610.0 metres above sea level. It can be found in Paracuellos de Jarama and is operated by ENAIRE.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Paracuellos_de_Jarama)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)","(""Adolfo Suárez Madrid–Barajas Airport"" | ""hasRunwayLength"" | 3500),
(""Adolfo Suárez Madrid–Barajas Airport"" | ""hasElevation"" | 610.0),
(""Adolfo Suárez Madrid–Barajas Airport"" | ""elevationAboveTheSeaLevel"" | ""610.0 metres""),
(""Adolfo Suárez Madrid–Barajas Airport"" | ""locatedIn"" | ""Paracuellos de Jarama""),
(""Adolfo Suárez Madrid–Barajas Airport"" | ""isOperatedBy"" | ""ENAIRE"")"
1700,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Fellowship of the Ring was preceded by the Hobbit and followed by The Lord of the Rings.,"(The_Fellowship_of_the_Ring | precededBy | The_Hobbit)
(The_Hobbit | followedBy | The_Lord_of_the_Rings)","(""The Fellowship of the Ring"" | ""preceded by"" | ""The Hobbit"")
(""The Fellowship of the Ring"" | ""followed by"" | ""The Lord of the Rings"")"
1701,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nord, which has a runtime of 58.41 minutes, is an album in the post metal genre by Year of No Light.","(Nord_(Year_of_No_Light_album) | genre | Post-metal)
(Nord_(Year_of_No_Light_album) | runtime | 58.41)","(""Nord"" | ""type"" | ""album"")
(""Nord"" | ""runtime"" | ""58.41 minutes"")
(""Nord"" | ""genre"" | ""post metal"")
(""Nord"" | ""by"" | ""Year of No Light"")
(""Year of No Light"" | ""type"" | ""band"")
(""Year of No Light"" | ""produced"" | ""Nord"")"
1702,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",It’s Great to be Young is a movie that is 94 minutes long and released in 1956. It’s edited by Max Benedict and the score is composed by Louis Levy. Gilbert Taylor is the cinematographer.,"(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | editing | Max_Benedict)
(""It's_Great_to_Be_Young_(1956_film) | musicComposer | Louis_Levy)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor"")","(""It’s Great to be Young"" | type | ""Movie"")
(""It’s Great to be Young"" | ""duration"" | 94)
(""It’s Great to be Young"" | ""releaseYear"" | 1956)
(""It’s Great to be Young"" | ""editedBy"" | ""Max Benedict"")
(""It’s Great to be Young"" | ""scoreComposer"" | ""Louis Levy"")
(""It’s Great to be Young"" | ""cinematographer"" | ""Gilbert Taylor"")"
1703,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Shown on the BBC, Bananaman was a TV series and character created by John Geering.","(Bananaman | creator | John_Geering)
(Bananaman | broadcastedBy | BBC)","(""Bananaman"" | ""shownOn"" | ""BBC"")
(""Bananaman"" | ""type"" | ""TV series"")
(""Bananaman"" | ""type"" | ""character"")
(""Bananaman"" | ""createdBy"" | ""John Geering"")"
1704,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Chopped fruits, sour cream, condensed milk, granola, shredded coconut and raisins are the main ingredients in bionico, a food found in Mexico.","(Bionico | mainIngredient | ""Chopped Fruits, Sour Cream, Condensed Milk, Granola, Shredded Coconut, Raisins"")
(Bionico | country | Mexico)","(""bionico"" | ""ingredient"" | ""Chopped fruits"")
(""bionico"" | ""ingredient"" | ""sour cream"")
(""bionico"" | ""ingredient"" | ""condensed milk"")
(""bionico"" | ""ingredient"" | ""granola"")
(""bionico"" | ""ingredient"" | ""shredded coconut"")
(""bionico"" | ""ingredient"" | ""raisins"")
(""bionico"" | ""location"" | ""Mexico"")"
1705,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The asteroid 1147 Stavropolis discovered by Grigory Neujmin on June 11, 1929 with an absolute magnitude of 11.5 has an apoapsis of 418476000000.0. The orbital period of this asteroid is 1249.6 days.","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | discoverer | Grigory_Neujmin)
(1147_Stavropolis | absoluteMagnitude | 11.5)
(1147_Stavropolis | discovered | 1929-06-11)","(1147 Stavropolis | discoverer | Grigory Neujmin)
(1147 Stavropolis | discovery date | June 11, 1929)
(1147 Stavropolis | absolute magnitude | 11.5)
(1147 Stavropolis | apoapsis | 418476000000.0)
(1147 Stavropolis | orbital period | 1249.6 days)"
1706,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The University of Cambridge has an academic staff size of 6645 people.,(University_of_Cambridge | academicStaffSize | 6645),"(""University of Cambridge"" | ""hasAcademicStaffSize"" | 6645)"
1707,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The fantasy novel “The Fellowship of the Ring”, was published on July 29, 1954 by George Allen & Unwin.","(The_Fellowship_of_the_Ring | publisher | George_Allen_&_Unwin)
(The_Fellowship_of_the_Ring | literaryGenre | Fantasy_(genre))
(The_Fellowship_of_the_Ring | releaseDate | 1954-07-29)","(""The Fellowship of the Ring"" | type | ""fantasy novel"")
(""The Fellowship of the Ring"" | publicationDate | ""July 29, 1954"")
(""The Fellowship of the Ring"" | publisher | ""George Allen & Unwin"")"
1708,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Espen Lind was a writer of the song Mermaid by Train released on 2012-12-27, preceding it was the song This'll be my year.","(Mermaid_(Train_song) | releaseDate | 2012-12-27)
(""Mermaid_(Train_song) | precededBy | This'll_Be_My_Year)
(Mermaid_(Train_song) | writer | Espen_Lind)","(Espen Lind | type | Person)
(Espen Lind | occupation | Writer)
(Train | type | Band)
(Mermaid | type | Song)
(Mermaid | writer | Espen Lind)
(Mermaid | performed_by | Train)
(Mermaid | release_date | 2012-12-27)
(This'll be my year | type | Song)
(This'll be my year | succeeded_by | Mermaid)"
1709,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bootleg Series Volume 1: The Quine Tapes was recorded in San Francisco in the United States. In San Francisco the local time zone is Pacific Time and Ed Lee is a political leader there.,"(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | San_Francisco)
(San_Francisco | leader | Ed_Lee_(politician))
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | United_States)
(San_Francisco | timeZone | Pacific_Time_Zone)","(""Bootleg Series Volume 1: The Quine Tapes"" | ""was recorded in"" | ""San Francisco"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""was recorded in"" | ""United States"")
(""San Francisco"" | ""is located in"" | ""United States"")
(""San Francisco"" | ""has time zone"" | ""Pacific Time"")
(""Ed Lee"" | ""is political leader of"" | ""San Francisco"")"
1710,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Lady Anne Monson currently resides in India.,(Lady_Anne_Monson | residence | India),"(""Lady Anne Monson"" | ""residesIn"" | ""India"")"
1711,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy has 900 staff members, 16800 undergraduate students and 1299 doctoral students.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfDoctoralStudents | 1299)","(""University of Burgundy"" | ""hasStaffMembers"" | ""900"")
(""University of Burgundy"" | ""hasUndergraduateStudents"" | ""16800"")
(""University of Burgundy"" | ""hasDoctoralStudents"" | ""1299"")"
1712,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Grigory Neujmin discovered 1147 Stavropolis whose orbital period is 1249.6.,"(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | discoverer | Grigory_Neujmin)","(Grigory Neujmin | discovered | 1147 Stavropolis)
(1147 Stavropolis | orbital period | 1249.6)"
1713,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Universal Music Group is owned by its parent company Vivendi.,(Universal_Music_Group | parentCompany | Vivendi),(Universal Music Group | owned by | Vivendi)
1714,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Piotr Hallmann was born on the 25th of August, 1987 and his height and weight are 175.26 cm tall and 70.308 kg respectively.","(Piotr_Hallmann | birthDate | 1987-08-25)
(Piotr_Hallmann | height | 175.26)
(Piotr_Hallmann | weight | 70.308)","(Piotr Hallmann | birthDate | 25th of August, 1987)
(Piotr Hallmann | height | 175.26 cm)
(Piotr Hallmann | weight | 70.308 kg)"
1715,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Grigory Neujmin was born in the city of Tbilisi.,(Grigory_Neujmin | birthPlace | Tbilisi),"(""Grigory Neujmin"" | ""birthPlace"" | ""Tbilisi"")"
1716,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Year of No Light album Live at Roadburn 2008 is preceded by the release of their album Nord.,(Live_at_Roadburn_2008_(Year_of_No_Light_album) | precededBy | Nord_(Year_of_No_Light_album)),"(""Live at Roadburn 2008"" | ""creator"" | ""Year of No Light"")
(""Nord"" | ""creator"" | ""Year of No Light"")
(""Live at Roadburn 2008"" | ""precededBy"" | ""Nord"")"
1717,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aaron Turner is a post-metal musician from the U. S., who played with the band Twilight.","(Aaron_Turner | genre | Post-metal)
(Aaron_Turner | origin | United_States)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))","(Aaron Turner | type | post-metal musician)
(Aaron Turner | country of citizenship | U. S.)
(Aaron Turner | played with | Twilight)"
1718,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The runway length at the Bedford Aerodrome is 1095 and the aerodrome serves the Bedford Autodrome. The aerodrome is operated by MotorSport Vision.,"(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | runwayLength | 1095.0)
(Bedford_Aerodrome | cityServed | Bedford_Autodrome)","(Bedford Aerodrome | runway length | 1095)
(Bedford Aerodrome | serves | Bedford Autodrome)
(Bedford Aerodrome | operated by | MotorSport Vision)"
1719,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Tom Simon and Sarah Teale directed the HBO movie Death on a Factory Farm.,"(Death_on_a_Factory_Farm | director | Tom_Simon)
(Death_on_a_Factory_Farm | broadcastedBy | HBO)
(Death_on_a_Factory_Farm | director | Sarah_Teale)","(Tom Simon | directed | Death on a Factory Farm)
(Sarah Teale | directed | Death on a Factory Farm)
(Death on a Factory Farm | director | Tom Simon)
(Death on a Factory Farm | director | Sarah Teale)
(Death on a Factory Farm | broadcaster | HBO)"
1720,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The birthdate of Anatole de Grunwald is December 25th 1910.,(Anatole_de_Grunwald | birthDate | 1910-12-25),"(Anatole de Grunwald | birthdate | ""December 25th 1910"")"
1721,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brandon Carter is known for his contributions to the no-hair theorem.,(Brandon_Carter | knownFor | No-hair_theorem),"(Brandon Carter | knownFor | no-hair theorem)
(Brandon Carter | contributesTo | no-hair theorem)"
1722,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The All India Council for Technical Education of Mumbai proudly gave the Technical Campus status to the Acharya Institute of Technology, established in the year 2000 and directed by Dr. G. P. Prabhukumar. This institute is affiliated with Visvesvaraya Technological University and is located at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(All_India_Council_for_Technical_Education | location | Mumbai)
(Acharya_Institute_of_Technology | director | ""Dr. G. P. Prabhukumar"")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | established | 2000)
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)","(""All India Council for Technical Education"" | ""location"" | ""Mumbai"")
(""All India Council for Technical Education"" | ""gaveStatusTo"" | ""Acharya Institute of Technology"")
(""Acharya Institute of Technology"" | ""status"" | ""Technical Campus"")
(""Acharya Institute of Technology"" | ""establishment year"" | ""2000"")
(""Acharya Institute of Technology"" | ""directedBy"" | ""Dr. G. P. Prabhukumar"")
(""Acharya Institute of Technology"" | ""isAffiliatedWith"" | ""Visvesvaraya Technological University"")
(""Acharya Institute of Technology"" | ""location"" | ""Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090."")"
1723,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Train song Mermaid, which is in the reggae genre, was written by Espen Lind and Amund Bjørklund and was released on the band’s ""California 37"" album. The song was released under the record labels of Columbia Records and Sony Music Entertainment and has a total length of three minutes and sixteen seconds.","(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)
(Mermaid_(Train_song) | writer | Espen_Lind)
(Mermaid_(Train_song) | genre | Reggae)
(Mermaid_(Train_song) | writer | Amund_Bjørklund)
(Mermaid_(Train_song) | album | California_37_(Train_album))","(""Mermaid"" | type | ""song"")
(""Mermaid"" | creator | ""Train"")
(""Mermaid"" | hasGenre | ""reggae"")
(""Mermaid"" | writtenBy | ""Espen Lind"")
(""Mermaid"" | writtenBy | ""Amund Bjørklund"")
(""Mermaid"" | partOf | ""California 37"")
(""Mermaid"" | releasedBy | ""Columbia Records"")
(""Mermaid"" | releasedBy | ""Sony Music Entertainment"")
(""Mermaid"" | length | ""three minutes and sixteen seconds"")"
1724,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy resides currently in Istanbul,Turkey(Republic of Turkey). 1.3 percent of the area of Turkey is water.","(Nurhan_Atasoy | residence | Istanbul)
(Turkey | longName | ""Republic of Turkey"")
(Turkey | percentageOfAreaWater | 1.3)
(Nurhan_Atasoy | residence | Turkey)","(Nurhan Atasoy | residesIn | Istanbul)
(Istanbul | locatedInCountry | Republic of Turkey)
(Turkey | alsoKnownAs | Republic of Turkey)
(Turkey | hasAreaPercentage | 1.3)"
1725,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy is located in Dijon, educating 27400 students with 2900 staff members on campus. There are 16800 undergraduate students along with 9400 postgraduates that are attending this university. 1299 doctoral students are also attending.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfStudents | 27400)
(University_of_Burgundy | numberOfDoctoralStudents | 1299)
(University_of_Burgundy | campus | Dijon)
(University_of_Burgundy | numberOfPostgraduateStudents | 9400)","(University of Burgundy | location | Dijon)
(University of Burgundy | number of students | 27400)
(University of Burgundy | number of staff | 2900)
(University of Burgundy | number of undergraduate students | 16800)
(University of Burgundy | number of postgraduate students | 9400)
(University of Burgundy | number of doctoral students | 1299)"
1726,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Mason School of Business is currently located in the Alan B Miller Hall which is located at 101 Ukrop Way, and is owned by the College of William and Mary.","(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""Mason School of Business"" | ""location"" | ""Alan B Miller Hall"")
(""Alan B Miller Hall"" | ""location"" | ""101 Ukrop Way"")
(""Alan B Miller Hall"" | ""ownedBy"" | ""College of William and Mary"")
(""Mason School of Business"" | ""ownedBy"" | ""College of William and Mary"")"
1727,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Anatole de Grunwald is the producer of English Without Tears, released on 28th July 1944, and whose songs were composed by Nicholas Brodszky.","(English_Without_Tears | releaseDate | 1944-07-28)
(English_Without_Tears | producer | Anatole_de_Grunwald)
(English_Without_Tears | musicComposer | Nicholas_Brodszky)","(Anatole de Grunwald | type | Producer)
(English Without Tears | producer | Anatole de Grunwald)
(English Without Tears | releaseDate | 28th July 1944)
(English Without Tears | songComposer | Nicholas Brodszky)
(Nicholas Brodszky | composedSongsFor | English Without Tears)"
1728,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Brian Kelly produced and recorded instrumental easy listening compilation album 'Expect a Miracle' (runtime 54:56) is preceded by the Brian Kelly's other album Pools of Light.,"(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | type | Compilation_Album)
(Expect_a_Miracle | precededBy | Pools_of_Light_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Instrumental_music)
(Expect_a_Miracle | genre | Easy_listening)","(Brian Kelly | type | Producer)
(Brian Kelly | type | Recording Artist)
('Expect a Miracle' | type | Album)
('Expect a Miracle' | genre | Easy Listening)
('Expect a Miracle' | format | Instrumental Compilation)
('Expect a Miracle' | producedBy | Brian Kelly)
('Expect a Miracle' | recordedBy | Brian Kelly)
('Expect a Miracle' | runtime | 54:56)
(Pools of Light | type | Album)
('Expect a Miracle' | precededBy | Pools of Light)
(Brian Kelly | producedAlbum | 'Expect a Miracle')
(Brian Kelly | recordedAlbum | 'Expect a Miracle')
(Brian Kelly | releasedAlbum | Pools of Light)"
1729,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Nord by the year of Light produced by the band was released on September 6,2006 ,followed by the Year of No light's album Live at Roadburn 2008.","(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)","(""Nord"" | ""producer"" | ""year of Light"")
(""year of Light"" | ""is member of"" | ""band"")
(""Nord"" | ""release date"" | ""September 6, 2006"")
(""Live at Roadburn 2008"" | ""producer"" | ""Year of No light"")
(""Year of No light"" | ""is member of"" | ""band"")
(""Live at Roadburn 2008"" | ""preceded by"" | ""Nord"")"
1730,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The title of France's leader is ""President of the Senate.""","(France | leaderTitle | ""President of the Senate"")","(France | leaderTitle | ""President of the Senate"")"
1731,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Al Asad Airbase's runway name is 08/26 and is run by the United States Air Force.,"(Al_Asad_Airbase | operatingOrganisation | United_States_Air_Force)
(Al_Asad_Airbase | runwayName | ""08/26"")","(""Al Asad Airbase"" | ""hasRunway"" | ""08/26"")
(""08/26"" | ""isRunwayOf"" | ""Al Asad Airbase"")
(""Al Asad Airbase"" | ""isRunBy"" | ""United States Air Force"")
(""United States Air Force"" | ""runs"" | ""Al Asad Airbase"")"
1732,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Train released the 3 minute and 16 second song, Mermaid, under the Columbia Records and Sony Music Entertainment record labels.","(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)","(""Mermaid"" | ""release by"" | ""Train"")
(""Mermaid"" | ""duration"" | ""3 minutes and 16 seconds"")
(""Mermaid"" | ""under label"" | ""Columbia Records"")
(""Mermaid"" | ""under label"" | ""Sony Music Entertainment"")
(""Train"" | ""released song"" | ""Mermaid"")
(""Columbia Records"" | ""has song"" | ""Mermaid"")
(""Sony Music Entertainment"" | ""has song"" | ""Mermaid"")"
1733,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers is a movie starring Michael Rooker and Tom Sizemore. The film is directed and written by Ray Griggs. While only being 98 minutes long it was able to gross in $30,955 with a budget of $2,000,000.","(Super_Capers | starring | Michael_Rooker)
(Super_Capers | starring | Tom_Sizemore)
(Super_Capers | budget | 2000000.0)
(Super_Capers | writer | Ray_Griggs_(director))
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | runtime | 98.0)
(Super_Capers | gross | 30955.0)","(""Super Capers"" | ""starring"" | ""Michael Rooker"")
(""Super Capers"" | ""starring"" | ""Tom Sizemore"")
(""Super Capers"" | ""directedBy"" | ""Ray Griggs"")
(""Super Capers"" | ""writtenBy"" | ""Ray Griggs"")
(""Super Capers"" | ""length"" | 98)
(""Super Capers"" | ""gross"" | 30955)
(""Super Capers"" | ""budget"" | 2000000)"
1734,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The runway length at Adolfo Suarez Madrid-Barajas airport in Alcobendas, is 3500 and it is 610 metres above sea level. The airport itself is operated by ENAIRE which is based in Madrid.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)","(""Adolfo Suarez Madrid-Barajas airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suarez Madrid-Barajas airport"" | ""runwayLength"" | ""3500"")
(""Adolfo Suarez Madrid-Barajas airport"" | ""altitude"" | ""610 metres"")
(""Adolfo Suarez Madrid-Barajas airport"" | ""operator"" | ""ENAIRE"")
(""ENAIRE"" | ""headquarter"" | ""Madrid"")"
1735,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi infantry monument's location is Adams county, east of Franklin County, Pennsylvania. It was established in the year 2000. It falls under the category of contributing property.","(Adams_County,_Pennsylvania | hasToItsWest | Franklin_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""11th Mississippi infantry monument"" | ""location"" | ""Adams county"")
(""Adams county"" | ""isEastOf"" | ""Franklin County, Pennsylvania"")
(""11th Mississippi infantry monument"" | ""establishedIn"" | ""2000"")
(""11th Mississippi infantry monument"" | ""typeOf"" | ""contributing property"")"
1736,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bionico is a food found in Mexico where it is served as a dessert in the Jalisco region. In Mexico the currency used is the peso.,"(Mexico | currency | Mexican_peso)
(Bionico | course | Dessert)
(Bionico | region | Jalisco)
(Bionico | country | Mexico)","(""Bionico"" | ""typeOf"" | ""food"")
(""Bionico"" | ""foundIn"" | ""Mexico"")
(""Bionico"" | ""servedAs"" | ""dessert"")
(""Bionico"" | ""servedIn"" | ""Jalisco"")
(""Mexico"" | ""hasCurrency"" | ""peso"")"
1737,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Mason School of Business, in the United States, is the current tenant of the Alan B Miller Hall located at 101 Ukrop Way in the state of Virginia. Robert A.M. Stern, the architect of the Alan B Miller Hall, started building it on March 30, 2007 and completed it on June 1, 2009.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | completionDate | 2009-06-01)
(Alan_B._Miller_Hall | location | Virginia)
(Mason_School_of_Business | country | United_States)","(""Mason School of Business"" | ""location"" | ""United States"")
(""Mason School of Business"" | ""tenantOf"" | ""Alan B Miller Hall"")
(""Alan B Miller Hall"" | ""location"" | ""101 Ukrop Way"")
(""Alan B Miller Hall"" | ""locatedIn"" | ""Virginia"")
(""Robert A.M. Stern"" | ""job"" | ""architect"")
(""Robert A.M. Stern"" | ""ArchitectureWork"" | ""Alan B Miller Hall"")
(""Alan B Miller Hall"" | ""dateConstructedStart"" | ""March 30, 2007"")
(""Alan B Miller Hall"" | ""dateConstructedEnd"" | ""June 1, 2009"")"
1738,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Lionsgate is a public company.,(Lionsgate | type | Public_company),"(""Lionsgate"" | ""rdf:type"" | ""foaf:Organization"")
(""Lionsgate"" | ""dct:description"" | ""public company"")"
1739,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng was born in Hubei of Zaoyang.,"(Nie_Haisheng | birthPlace | Zaoyang)
(Nie_Haisheng | birthPlace | Hubei)","(""Nie Haisheng"" | ""was born in"" | ""Hubei"")
(""Nie Haisheng"" | ""was born in"" | ""Zaoyang"")"
1740,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala, with an elevation of 1147.0 above sea level, and a population density of 1604.0, is a part of Morelos, and the leader is called the governator.","(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | leaderTitle | Governator)
(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)","(""Ciudad Ayala"" | ""elevation"" | 1147.0)
(""Ciudad Ayala"" | ""populationDensity"" | 1604.0)
(""Ciudad Ayala"" | ""isPartOf"" | ""Morelos"")
(""Ciudad Ayala"" | ""leaderTitle"" | ""governator"")"
1741,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Following the album Pools of Light, Brian Kelly's instrumental album, Expect a Miracle, has a run time of 54.56 min.","(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | precededBy | Pools_of_Light_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Instrumental_music)","(""Pools of Light"" | ""followedBy"" | ""Expect a Miracle"")
(""Brian Kelly"" | ""hasAlbum"" | ""Expect a Miracle"")
(""Expect a Miracle"" | ""artist"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""runtime"" | ""54.56 min"")"
1742,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Jamie Lawrence played for Brentford F.C..,(Jamie_Lawrence | club | Brentford_F.C.),"(""Jamie Lawrence"" | ""played for"" | ""Brentford F.C."")"
1743,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Mason School of Business are the current tenants of Alan B Miller Hall, located at 101 Ukrop Way.","(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)","(""The Mason School of Business"" | ""is located at"" | ""101 Ukrop Way"")
(""The Mason School of Business"" | ""is tenant of"" | ""Alan B Miller Hall"")
(""Alan B Miller Hall"" | ""is located at"" | ""101 Ukrop Way"")
(""Alan B Miller Hall"" | ""has tenant"" | ""The Mason School of Business"")"
1744,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Abraham A. Ribicoff was an American born in the USA who was in office while John F. Kennedy was president. His spouse was Ruth Ribicoff and his successor was Anthony J. Celebrezze.,"(Abraham_A._Ribicoff | spouse | ""Ruth Ribicoff"")
(Abraham_A._Ribicoff | inOfficeWhilePresident | John_F._Kennedy)
(Abraham_A._Ribicoff | nationality | American)
(Abraham_A._Ribicoff | successor | Anthony_J._Celebrezze)
(Abraham_A._Ribicoff | birthPlace | United_States)","(Abraham A. Ribicoff | type | American)
(Abraham A. Ribicoff | place of birth | USA)
(Abraham A. Ribicoff | period of activity | John F. Kennedy presidency)
(Abraham A. Ribicoff | spouse | Ruth Ribicoff)
(Abraham A. Ribicoff | successor | Anthony J. Celebrezze)
(John F. Kennedy | position held | President)
(Ruth Ribicoff | spouse | Abraham A. Ribicoff)
(Anthony J. Celebrezze | precededBy | Abraham A. Ribicoff)
"
1745,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Acharya Institute of Technology is affiliated with Visvesvaraya Technological University and was established in the year 2000.,"(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | established | 2000)","(Acharya Institute of Technology | affiliated with | Visvesvaraya Technological University)
(Acharya Institute of Technology | established in | literal:2000)"
1746,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",ENAIRE is the operating organisation for Adolfo Suarez Madrid-Barajas airport which is in Alcobendas in Spain. The runway length at the airport is 3500 and the airport is 610 metres above sea level.,"(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Alcobendas | country | Spain)","(""ENAIRE"" | ""operates"" | ""Adolfo Suarez Madrid-Barajas Airport"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""locatedIn"" | ""Alcobendas"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""country"" | ""Spain"")
(""Adolfo Suarez Madrid-Barajas Airport"" | ""runwayLength"" | 3500)
(""Adolfo Suarez Madrid-Barajas Airport"" | ""altitude"" | 610)"
1747,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala, located in the Pacific Standard Daylight Time Zone, has a population density of 1604, and one of its leaders is named Juan Nolasco.","(Ciudad_Ayala | timeZone | Pacific_Daylight_Time)
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | timeZone | Pacific_Standard_Time_Zone)
(Ciudad_Ayala | leader | Juan_Nolasco)","(""Ciudad Ayala"" | ""location"" | ""Pacific Standard Daylight Time Zone"")
(""Ciudad Ayala"" | ""populationDensity"" | 1604)
(""Ciudad Ayala"" | ""hasLeader"" | ""Juan Nolasco"")"
1748,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brandon Carter is known for proving the no-hair theorem.,(Brandon_Carter | knownFor | No-hair_theorem),"(""Brandon Carter"" | ""isKnownFor"" | ""proving the no-hair theorem"")"
1749,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Louis Levy composed the music for the 1956 movie It's Great to be Young, which stars Cecil Parker.","(""It's_Great_to_Be_Young_(1956_film) | musicComposer | Louis_Levy)
(""It's_Great_to_Be_Young_(1956_film) | starring | Cecil_Parker"")","(""Louis Levy"" | ""composed for"" | ""It's Great to be Young""),
(""It's Great to be Young"" | ""release year"" | ""1956""),
(""It's Great to be Young"" | ""stars"" | ""Cecil Parker"")"
1750,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bionico is a food served as a dessert in Mexico where the local currency is the peso and Enrique Pena Nieto is a leader.,"(Mexico | currency | Mexican_peso)
(Bionico | course | Dessert)
(Bionico | country | Mexico)
(Mexico | leader | Enrique_Peña_Nieto)","(""Bionico"" | ""isTypeOf"" | ""food"")
(""Bionico"" | ""servedAs"" | ""dessert"")
(""Bionico"" | ""servedIn"" | ""Mexico"")

(""Mexico"" | ""hasDessert"" | ""Bionico"")
(""Mexico"" | ""hasCurrency"" | ""peso"")

(""Enrique Pena Nieto"" | ""isLeaderOf"" | ""Mexico"")

(""peso"" | ""isCurrencyOf"" | ""Mexico"")"
1751,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","11th Mississippi Infantry established in the year 2000 have a monument falls under the category of Contributing property located in Adams County, Pennsylvania. To the southeast of Adams County, Pennsylvania lies Carroll County, Maryland.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""11th Mississippi Infantry"" | ""establishmentYear"" | ""2000"")
(""11th Mississippi Infantry"" | ""hasMonument"" | ""literal"")
(""11th Mississippi Infantry"" | ""location"" | ""Adams County, Pennsylvania"")
(""11th Mississippi Infantry"" | ""isOfType"" | ""Contributing property"")
(""Monument of 11th Mississippi Infantry"" | ""location"" | ""Adams County, Pennsylvania"")
(""Adams County, Pennsylvania"" | ""southEast"" | ""Carroll County, Maryland"")"
1752,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy has 16,800 undergraduate students, 2900 members of staff and 27400 students in total.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfStudents | 27400)","(""University of Burgundy"" | ""has total students"" | 27400),
(""University of Burgundy"" | ""has undergraduate students"" | 16800),
(""University of Burgundy"" | ""has staff members"" | 2900)"
1753,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brandon Carter was born on 01-01-1942.,(Brandon_Carter | birthDate | 1942-01-01),"(Brandon Carter | birthDate | ""01-01-1942"")"
1754,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Piotr Hallmann was born in Gdynia, Poland which has a UTC of +02:00.","(Piotr_Hallmann | birthPlace | Gdynia,_Poland)
(Gdynia,_Poland | utcOffset | +2)","(Piotr Hallmann | was born in | Gdynia)
(Piotr Hallmann | nationality | Poland)
(Gdynia | located in | Poland)
(Gdynia | timezone | UTC+02:00)"
1755,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Lady Anne Monson who was born on 1726-01-01 in the Kingdom of England had her professional field as botany. She was married to George Monson.,"(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | spouse | George_Monson)
(Lady_Anne_Monson | professionalField | Botany)","(Lady Anne Monson | birthDate | ""1726-01-01"")
(Lady Anne Monson | birthPlace | Kingdom of England)
(Lady Anne Monson | profession | Botany)
(Lady Anne Monson | spouse | George Monson)"
1756,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Train song Mermaid, a pop rock genre with runtime of 3.16 minutes was released on 27th December 2012. The song was written by the band Train and had been preceded by the song This'll Be My Year.","(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | releaseDate | 2012-12-27)
(""Mermaid_(Train_song) | precededBy | This'll_Be_My_Year"")","(""Mermaid"" | type | ""song"")
(""Mermaid"" | genre | ""pop rock"")
(""Mermaid"" | runtime | 3.16)
(""Mermaid"" | releaseDate | ""27th December 2012"")
(""Mermaid"" | writtenBy | ""Train"")
(""Mermaid"" | precededBy | ""This'll Be My Year"")"
1757,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",1147 Stavropolis with an apoapsis of 418476000000.0 and a periapsis of 260855000000 reaches its epoch on 31 July 2016 (Julian Day 2457600.5).,"(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))","(""1147 Stavropolis"" | ""hasApoapsis"" | ""418476000000.0"")
(""1147 Stavropolis"" | ""hasPeriapsis"" | ""260855000000"")
(""1147 Stavropolis"" | ""hasEpochDate"" | ""31 July 2016"")
(""1147 Stavropolis"" | ""hasJulianDay"" | ""2457600.5"")"
1758,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy was born is Turkey, where he has previously lived in Istanbul. He is of Turkish nationality.","(Nurhan_Atasoy | residence | Istanbul)
(Nurhan_Atasoy | birthPlace | Turkey)
(Nurhan_Atasoy | nationality | Turkish_people)
(Nurhan_Atasoy | residence | Turkey)","(""Nurhan Atasoy"" | ""birthPlace"" | ""Turkey"")
(""Nurhan Atasoy"" | ""residence"" | ""Istanbul"")
(""Nurhan Atasoy"" | ""nationality"" | ""Turkish"")"
1759,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Alan B. Miller Hall owned by the College of William and Mary is designed by Robert A M Stern.,"(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(Alan B. Miller Hall | ownedBy | College of William and Mary)
(Alan B. Miller Hall | architect | Robert A M Stern)"
1760,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Mason School of Business are the current tenants of Alan B Miller Hall located in the United States. Alan B Miller Hall was designed by Robert A.M. Stern and is owned by the College of William and Mary.,"(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Mason_School_of_Business | country | United_States)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(Mason School of Business | location | Alan B Miller Hall)
(Alan B Miller Hall | location | United States)
(Alan B Miller Hall | architect | Robert A.M. Stern)
(Alan B Miller Hall | owner | College of William and Mary)
(Alan B Miller Hall | tenants | Mason School of Business)
(Alan B Miller Hall | locatedIn | United States)
(Robert A.M. Stern | design | Alan B Miller Hall)
(College of William and Mary | owns | Alan B Miller Hall)"
1761,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The album Nord was produced by Year of No Light.,(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light),"(""Nord"" | ""producer"" | ""Year of No Light"")"
1762,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",University of Cambridge is affiliated with the League of European Research Universities.,(University_of_Cambridge | affiliation | League_of_European_Research_Universities),"(""University of Cambridge"" | affiliation | ""League of European Research Universities"")"
1763,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",It's Great to be Young is a 94 minute film released in 1956 that starred John Mills. The musical composer is Louis Levy and Gilbert Taylor is a cinematographer.,"(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor)
(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | musicComposer | Louis_Levy"")","(""It's Great to be Young"" | type | ""film"")
(""It's Great to be Young"" | release year | 1956)
(""It's Great to be Young"" | runtime | 94)
(""It's Great to be Young"" | starring | ""John Mills"")
(""It's Great to be Young"" | music by | ""Louis Levy"")
(""It's Great to be Young"" | cinematography | ""Gilbert Taylor"")"
1764,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was born in New Hampshire, United States on November 18th, 1923, and died in California. He was a test pilot.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | occupation | Test_pilot)","(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | birthPlace | United States)
(Alan Shepard | birthDate | November 18th, 1923)
(Alan Shepard | deathPlace | California)
(Alan Shepard | occupation | test pilot)"
1765,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy a Turkish national was born in Turkey, where the currency is Turkish lira and largest city is Istanbul.","(Nurhan_Atasoy | nationality | Turkish_people)
(Turkey | largestCity | Istanbul)
(Nurhan_Atasoy | birthPlace | Turkey)
(Turkey | currency | Turkish_lira)","(""Nurhan Atasoy"" | ""nationality"" | ""Turkey"")
(""Turkey"" | ""currency"" | ""Turkish lira"")
(""Turkey"" | ""has largest city"" | ""Istanbul"")
(""Nurhan Atasoy"" | ""place of birth"" | ""Turkey"")"
1766,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva, a mathematician working in the field of mathematical optimization and known for her work with stochastic programming, is a citizen of the United States. Her alma mater is Humboldt University.","(Darinka_Dentcheva | citizenship | United_States)
(Darinka_Dentcheva | professionalField | Mathematical_optimization)
(Darinka_Dentcheva | knownFor | Stochastic_programming)
(Darinka_Dentcheva | almaMater | Humboldt_University)","(Darinka Dentcheva | type | Mathematician)
(Darinka Dentcheva | worksIn | Mathematical optimization)
(Darinka Dentcheva | knownFor | Stochastic programming)
(Darinka Dentcheva | citizenship | United States)
(Darinka Dentcheva | almaMater | Humboldt University)"
1767,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The University of Burgundy is located in France: a country who calls their leader “President of the Senate”.,"(University_of_Burgundy | country | France)
(France | leaderTitle | ""President of the Senate"")","(""University of Burgundy"" | ""locatedIn"" | ""France"")
(""France"" | ""politicalLeaderTitle"" | ""President of the Senate"")"
1768,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The apoapsis of the 1147 Stavropolis asteroid is 418476000000.0 AU with orbital period of 1147 Stavropolis as 1249.6.,"(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)","(""1147 Stavropolis"" | ""hasApoapsis"" | 418476000000.0 AU)
(""1147 Stavropolis"" | ""hasOrbitalPeriod"" | 1249.6)"
1769,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Super Capers' starring Michael Rooker was born on April 6th 1955.,"(Super_Capers | starring | Michael_Rooker)
(Michael_Rooker | birthDate | 1955-04-06)","(""Super Capers"" | starring | ""Michael Rooker"")
(""Michael Rooker"" | ""was born on"" | ""April 6th 1955"")"
1770,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The alma mater of Brandon Carter is the University of Cambridge.,(Brandon_Carter | almaMater | University_of_Cambridge),(Brandon Carter | alma mater | University of Cambridge)
1771,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Johnny Colt is a former band member of Train.,(Train_(band) | formerBandMember | Johnny_Colt),"(Johnny Colt | type | Person)
(Johnny Colt | occupation | Band Member)
(Johnny Colt | member of | Train)"
1772,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina was a photographer who studied at the School of Applied Arts in Stuttgart. She has Israeli nationality and was born in Karlsruhe in the German Empire.,"(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | nationality | Israel)
(Liselotte_Grschebina | birthPlace | German_Empire)
(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)
(Liselotte_Grschebina | professionalField | Photographer)","(Liselotte Grschebina | type | Photographer)
(Liselotte Grschebina | studiedAt | School of Applied Arts in Stuttgart)
(Liselotte Grschebina | nationality | Israeli)
(Liselotte Grschebina | placeOfBirth | Karlsruhe)
(Liselotte Grschebina | locatedIn | German Empire)"
1773,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Mason School of Business are the current occupants of Alan B Miller Hall at 101 Ukrop Way, which is owned by The College of William and Mary. The build started on 30/03/2007 designed by Robert A M Stern.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""The Mason School of Business"", ""occupy"", ""Alan B Miller Hall"")
(""Alan B Miller Hall"", ""locatedAt"", ""101 Ukrop Way"")
(""Alan B Miller Hall"", ""ownedBy"", ""The College of William and Mary"")
(""Alan B Miller Hall"", ""startDate"", ""30/03/2007"")
(""Alan B Miller Hall"", ""designedBy"", ""Robert A M Stern"")"
1774,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Super Capers was edited by Stacy Katzman.,(Super_Capers | editing | Stacy_Katzman),"(""Super Capers"" | ""was edited by"" | ""Stacy Katzman"")"
1775,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument, built 2000, is categorized as a Contributing Property and is located in the US. The exact location of the monument is Adams County, Pennsylvania which has Carroll County, Maryland to its southeast.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | state | ""Pennsylvania"")
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)
(11th_Mississippi_Infantry_Monument | country | ""United States"")","(""11th Mississippi Infantry Monument"" | ""year built"" | 2000)
(""11th Mississippi Infantry Monument"" | ""category"" | ""Contributing Property"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""US"")
(""11th Mississippi Infantry Monument"" | ""exact location"" | ""Adams County, Pennsylvania"")
(""Adams County, Pennsylvania"" | ""has relation"" | ""Carroll County, Maryland"")
(""Carroll County, Maryland"" | ""location"" | ""southeast of Adams County, Pennsylvania"")"
1776,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers, which was directed by Ray Griggs, was 98.0 minutes long and had a gross income of $30,955.","(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | gross | 30955.0)
(Super_Capers | runtime | 98.0)","(""Super Capers"" | ""directedBy"" | ""Ray Griggs"")
(""Super Capers"" | ""runtime"" | ""98.0 minutes"")
(""Super Capers"" | ""grossIncome"" | ""$30,955"")"
1777,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The College of William and Mary is the owner of the Alan B. Miller Hall which is located in the USA at 101 Ukrop Way. The current tenants are The Mason School of Business and the building was designed by Robert A.M. Stern.,"(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Mason_School_of_Business | country | United_States)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""The College of William and Mary"" | ""owner of"" | ""Alan B. Miller Hall""),
(""Alan B. Miller Hall"" | ""located in"" | ""USA""),
(""Alan B. Miller Hall"" | ""address"" | ""101 Ukrop Way""),
(""Alan B. Miller Hall"" | ""has tenant"" | ""The Mason School of Business""),
(""Alan B. Miller Hall"" | ""designed by"" | ""Robert A.M. Stern"")"
1778,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Turkey, which is led by a president, is where Nurhan Atasoy was born.","(Turkey | leaderTitle | President)
(Nurhan_Atasoy | birthPlace | Turkey)","(""Turkey"" | ""leader"" | ""President"")
(""Nurhan Atasoy"" | ""birthPlace"" | ""Turkey"")"
1779,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The founding date of Gdynia, a city in Poland is Feb 10th, 1926.","(Gdynia,_Poland | foundingDate | 1926-02-10)","(Gdynia | foundingDate | Feb 10th, 1926)
(Gdynia | locatedInCountry | Poland)"
1780,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Known for the Bondareva-Shapley theorem, Olga Bondareva worked in the fields of Economics and Mathematics. The graduate of Leningrad State University died on December 9, 1991.","(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | professionalField | Economics)
(Olga_Bondareva | professionalField | Mathematics)
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | deathDate | 1991-12-09)","(Olga Bondareva | knownFor | Bondareva-Shapley theorem)
(Olga Bondareva | workedIn | Economics)
(Olga Bondareva | workedIn | Mathematics)
(Olga Bondareva | graduateOf | Leningrad State University)
(Olga Bondareva | dateOfDeath | December 9, 1991)"
1781,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 98 minute movie, Super Capers, which grossed $30,955, was directed by Ray Griggs.","(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | gross | 30955.0)
(Super_Capers | runtime | 98.0)","(""Super Capers"" | ""runtime"" | ""98 minutes"")
(""Super Capers"" | ""gross earnings"" | ""$30,955"")
(""Super Capers"" | ""directedBy"" | ""Ray Griggs"")"
1782,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Year of No Light album Live at Roadburn 2008 was recorded on the date 2008-04-19.,(Live_at_Roadburn_2008_(Year_of_No_Light_album) | recordDate | 2008-04-19),"(""Live at Roadburn 2008"" | ""isAlbumOf"" | ""Year of No Light"")
(""Live at Roadburn 2008"" | ""recordedOn"" | ""2008-04-19"")
(""Live at Roadburn 2008"" | ""belongsToAlbum"" | ""Year of No Light"")"
1783,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson was born on January 1st, 1726 in Darlington, in the Kingdom of England. Her nationality remained with the Kingdom of England. Monson's spouse was George Monson. She passed away on February 18th, 1776.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | deathDate | 1776-02-18)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | nationality | Kingdom_of_England)
(Lady_Anne_Monson | spouse | George_Monson)","(""Lady Anne Monson"" | ""birthDate"" | ""1726-01-01"")
(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington"")
(""Lady Anne Monson"" | ""birthPlace"" | ""Kingdom of England"")
(""Lady Anne Monson"" | ""nationality"" | ""Kingdom of England"")
(""Lady Anne Monson"" | ""spouse"" | ""George Monson"")
(""Lady Anne Monson"" | ""deathDate"" | ""1776-02-18"")"
1784,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","McVeagh of the South Seas was directed by Cyril Bruce, starred Harry Carey (born in 1878), and was produced by the Progressive Motion Picture Company. You can find the film in IMDb with 0004319 ID.","(McVeagh_of_the_South_Seas | imdbId | 0004319)
(McVeagh_of_the_South_Seas | director | Cyril_Bruce)
(McVeagh_of_the_South_Seas | director | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | producer | The_Progressive_Motion_Picture_Company)","(""McVeagh of the South Seas"" | ""director"" | ""Cyril Bruce""),
(""McVeagh of the South Seas"" | ""actor"" | ""Harry Carey""),
(""Harry Carey"" | ""birthDate"" | ""1878""),
(""McVeagh of the South Seas"" | ""producer"" | ""Progressive Motion Picture Company""),
(""McVeagh of the South Seas"" | ""IMDb ID"" | ""0004319"")"
1785,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bionico is a dessert from Mexico that contains granola. Mexican people live in Mexico and use the peso as their currency.,"(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Bionico | ingredient | Granola)
(Bionico | country | Mexico)","(""Bionico"" | ""is a"" | ""dessert"")
(""Bionico"" | ""from"" | ""Mexico"")
(""Bionico"" | ""contains"" | ""granola"")
(""Mexican people"" | ""live in"" | ""Mexico"")
(""Mexican people"" | ""use"" | ""peso"")"
1786,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","English without Tears' Director, Harold French is from the United Kingdom.","(English_Without_Tears | director | Harold_French)
(Harold_French | birthPlace | UK)","(""English without Tears"", ""director"", ""Harold French"")
(""Harold French"", ""nationality"", ""United Kingdom"")"
1787,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","In the United States, where Abraham A. Ribicoff was born, one of the ethnic groups are called African Americans.","(Abraham_A._Ribicoff | birthPlace | United_States)
(United_States | ethnicGroup | African_Americans)","(Abraham A. Ribicoff | birthPlace | United States)
(United States | hasEthnicGroup | African Americans)"
1788,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiação Sportiva Arapiraquense has 17000 members, competed in the 2015 Campeonato Brasileiro Série C and play in the Campeonato Brasileiro Série C league, which Vila Nova Futebol Clube have been champions of.","(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Agremiação_Sportiva_Arapiraquense | season | 2015_Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)","(""Agremiação Sportiva Arapiraquense"" | ""has total members"" | 17000)
(""Agremiação Sportiva Arapiraquense"" | ""competed in"" | ""2015 Campeonato Brasileiro Série C"")
(""Agremiação Sportiva Arapiraquense"" | ""participates in"" | ""Campeonato Brasileiro Série C league"")
(""Vila Nova Futebol Clube"" | ""has championship"" | ""Campeonato Brasileiro Série C league"")"
1789,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nord is an album by Year of No Light.,(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light),"(""Nord"" | ""type"" | ""album"")
(""Nord"" | ""creator"" | ""Year of No Light"")
(""Year of No Light"" | ""created"" | ""Nord"")"
1790,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Terence Rattigan died in Hamilton, Bermuda.","(Terence_Rattigan | deathPlace | Hamilton,_Bermuda)","(Terence Rattigan | place of death | Hamilton, Bermuda)
(Terence Rattigan | death place | Hamilton, Bermuda)"
1791,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina lived from May 2nd, 1908 to June 14th, 1994, when she died in Israel.","(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | deathPlace | Israel)","(""Liselotte Grschebina"" | ""birthDate"" | ""May 2nd, 1908"")
(""Liselotte Grschebina"" | ""deathDate"" | ""June 14th, 1994"")
(""Liselotte Grschebina"" | ""deathPlace"" | ""Israel"")"
1792,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Super Capers was distributed by Roadside Attractions and Lionsgate (located in the US).,"(Super_Capers | distributor | Roadside_Attractions)
(Lionsgate | location | United_States)
(Super_Capers | distributor | Lionsgate)","(""Super Capers"" | ""distributed by"" | ""Roadside Attractions""),
(""Super Capers"" | ""distributed by"" | ""Lionsgate""),
(""Lionsgate"" | ""located in"" | ""the US"")"
1793,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Agremiacao Sportiva Arapiraquense's ground is the Estadio Municipal Coaracy da Mata Fonseca with 17000 club members.,"(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(""Agremiacao Sportiva Arapiraquense"" | ""ground"" | ""Estadio Municipal Coaracy da Mata Fonseca"")
(""Agremiacao Sportiva Arapiraquense"" | ""numberOfMembers"" | ""17000"")"
1794,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers is a 98 minute English-language film that is edited by Stacy Katzman. It was distributed by Lionsgate and Roadside Attractions. The budget was $2,000,000.","(Super_Capers | editing | Stacy_Katzman)
(Super_Capers | language | English_language)
(Super_Capers | runtime | 98.0)
(Super_Capers | distributor | Roadside_Attractions)
(Super_Capers | distributor | Lionsgate)
(Super_Capers | budget | 2000000.0)","(""Super Capers"" | ""runtime"" | ""98 minutes"")
(""Super Capers"" | ""language"" | ""English"")
(""Super Capers"" | ""editor"" | ""Stacy Katzman"")
(""Super Capers"" | ""distributor"" | ""Lionsgate"")
(""Super Capers"" | ""distributor"" | ""Roadside Attractions"")
(""Super Capers"" | ""budget"" | ""$2,000,000"")"
1795,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The music of the film English Without Tears, released on 1944-07-28 is composed by Nicholas Brodszky and produced by Anatole de Grunwald.","(English_Without_Tears | releaseDate | 1944-07-28)
(English_Without_Tears | producer | Anatole_de_Grunwald)
(English_Without_Tears | musicComposer | Nicholas_Brodszky)","(""English Without Tears"" | releaseDate | ""1944-07-28"")
(""English Without Tears"" | composer | ""Nicholas Brodszky"")
(""English Without Tears"" | producer | ""Anatole de Grunwald"")
(""Nicholas Brodszky"" | job | ""composer"")
(""Anatole de Grunwald"" | job | ""producer"")"
1796,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","HBO, the sister station of Cinemax, broadcasted the film Death on a Factory Farm.","(Death_on_a_Factory_Farm | broadcastedBy | HBO)
(HBO | sisterStation | Cinemax)","(""HBO"" | ""sister station of"" | ""Cinemax""),
(""HBO"" | ""broadcasted"" | ""Death on a Factory Farm"")"
1797,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Mermaid is a pop rock song made by the band Train. It lasts 3 minutes and 16 seconds. The Mermaid song was released on December 27th, 2012. The song that followed Mermaid was This'll be my year.","(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | releaseDate | 2012-12-27)
(""Mermaid_(Train_song) | precededBy | This'll_Be_My_Year"")","(""Mermaid"" | ""type"" | ""pop rock song"")
(""Mermaid"" | ""made by"" | ""Train"")
(""Mermaid"" | ""duration"" | ""3 minutes and 16 seconds"")
(""Mermaid"" | ""release date"" | ""December 27th, 2012"")
(""Mermaid"" | ""followed by"" | ""This'll be my year"")"
1798,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology is affiliated to Visvesvaraya Technological University and has around 700 postgraduate students. The All India Council for Technical Education which is located in Mumbai gave the institute Technical Campus status. The address for the campus is: Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(All_India_Council_for_Technical_Education | location | Mumbai)
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)
(Acharya_Institute_of_Technology | numberOfPostgraduateStudents | 700)","(Acharya Institute of Technology | affiliation | Visvesvaraya Technological University)
(Acharya Institute of Technology | studentCount | 700)
(Acharya Institute of Technology | type | Postgraduate Institute)
(All India Council for Technical Education | location | Mumbai)
(Acharya Institute of Technology | status | Technical Campus)
(Acharya Institute of Technology | address | ""Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090"")
(Acharya Institute of Technology | address | Soldevanahalli)
(Acharya Institute of Technology | address | Acharya Dr. Sarvapalli Radhakrishnan Road)
(Acharya Institute of Technology | address | Hessarghatta Main Road)
(Acharya Institute of Technology | address | Bangalore - 560090)
(All India Council for Technical Education | grant | Technical Campus status to Acharya Institute of Technology)"
1799,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiação Sportiva Arapiraquense has 17000 members and they play in the Brazilian championship called Campeonato Brasileiro Série C, where they also competed in 2015. Vila Nova Futebol Clube have been champions of the league. Estádio Municipal Coaracy da Mata Fonseca is the name of the ground of Agremiação Sportiva Arapiraquense and is located in Arapiraca.","(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Agremiação_Sportiva_Arapiraquense | season | 2015_Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | country | Brazil)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(Agremiação Sportiva Arapiraquense | hasMembers | 17000)
(Agremiação Sportiva Arapiraquense | playsIn | Campeonato Brasileiro Série C)
(Agremiação Sportiva Arapiraquense | competedIn | 2015)
(Vila Nova Futebol Clube | championOf | Campeonato Brasileiro Série C)
(Agremiação Sportiva Arapiraquense | groundName | Estádio Municipal Coaracy da Mata Fonseca)
(Estádio Municipal Coaracy da Mata Fonseca | locatedIn | Arapiraca)"
1800,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The film named Death on the factory farm was produced by Tom Simon, edited by Geof Bartz and broadcasted by HBO.","(Death_on_a_Factory_Farm | producer | Tom_Simon)
(Death_on_a_Factory_Farm | broadcastedBy | HBO)
(Death_on_a_Factory_Farm | editor | Geof_Bartz)","(""Death on the factory farm"" | ""producer"" | ""Tom Simon""),
(""Death on the factory farm"" | ""editor"" | ""Geof Bartz""),
(""Death on the factory farm"" | ""broadcaster"" | ""HBO"")"
1801,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",ENAIRE is the operating organization for Adolfo Suárez Madrid-Barajas Airport which is found in Alcobendas and has a runway with the length of 3500.0.,"(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)","(""ENAIRE"" | ""isOperatorOf"" | ""Adolfo Suárez Madrid-Barajas Airport"")
(""Adolfo Suárez Madrid-Barajas Airport"" | ""operatedBy"" | ""ENAIRE"")
(""Adolfo Suárez Madrid-Barajas Airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suárez Madrid-Barajas Airport"" | ""hasRunwayLength"" | ""3500.0"")"
1802,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng was part of the mission Shenzhou 10.,(Nie_Haisheng | mission | Shenzhou_10),"(""Nie Haisheng"" | ""part of"" | ""Shenzhou 10"")"
1803,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Turn Me On is a noise rock album that runs 35.1 minutes. It is preceded by the album Let It Breed.,"(Turn_Me_On_(album) | genre | Noise_rock)
(Turn_Me_On_(album) | precededBy | Let_It_Breed)
(Turn_Me_On_(album) | runtime | 35.1)","(""Turn Me On"" | type | ""noise rock album"")
(""Turn Me On"" | duration | ""35.1 minutes"")
(""Turn Me On"" | preceded by | ""Let It Breed"")"
1804,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology has 700 postgraduate students and is affiliated to Visvesvaraya Technological University. The All India Council for Technical Education which is located in Mumbai gave the institute Technical Campus status. The address for the campus is: Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(All_India_Council_for_Technical_Education | location | Mumbai)
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)
(Acharya_Institute_of_Technology | numberOfPostgraduateStudents | 700)","(Acharya Institute of Technology | number of postgraduate students | 700)
(Acharya Institute of Technology | affiliated to | Visvesvaraya Technological University)
(All India Council for Technical Education | location | Mumbai)
(All India Council for Technical Education | granted status to | Acharya Institute of Technology)
(Acharya Institute of Technology | status | Technical Campus)
(Acharya Institute of Technology | address | Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090)"
1805,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy is located in Dijon, France.","(Dijon | country | France)
(University_of_Burgundy | city | Dijon)","(""University of Burgundy"" | location | ""Dijon"")
(""University of Burgundy"" | location | ""France"")
(""Dijon"" | isPartOf | ""France"")"
1806,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson was born in Darlington, Kingdom of England where she professionally studied the field of botany. Lady Anne Monson's nationality was with the Kingdom of England although she resided in India. The birthdate of Lady Anne Monson is 1726-01-01 and 50 years later she died on February 18, 1776.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | deathDate | 1776-02-18)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | nationality | Kingdom_of_England)
(Lady_Anne_Monson | residence | India)
(Lady_Anne_Monson | professionalField | Botany)","(Lady Anne Monson | birthPlace | Darlington, Kingdom of England)
(Lady Anne Monson | profession | botany)
(Lady Anne Monson | nationality | Kingdom of England)
(Lady Anne Monson | residence| India)
(Lady Anne Monson | birthDate | 1726-01-01)
(Lady Anne Monson | deathDate | 1776-02-18)
(Lady Anne Monson | studiedAt | botany)"
1807,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan B. Miller Hall, in Virginia, was designed by Robert A.M. Stern and has the address 101 Ukrop Way. It is the property of The College of William and Mary and current tenants are the Mason School of Business.","(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | location | Virginia)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""Alan B. Miller Hall"" | ""location"" | ""Virginia"")
(""Alan B. Miller Hall"" | ""architect"" | ""Robert A.M. Stern"")
(""Alan B. Miller Hall"" | ""address"" | ""101 Ukrop Way"")
(""Alan B. Miller Hall"" | ""owner"" | ""The College of William and Mary"")
(""Alan B. Miller Hall"" | ""tenant"" | ""Mason School of Business"")"
1808,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Roadside Attractions and Lionsgate distributed the English language movie Super Capers which runs 98 minutes. Stacy Katzman edited this movie which had a budget of $2000000.,"(Super_Capers | editing | Stacy_Katzman)
(Super_Capers | language | English_language)
(Super_Capers | runtime | 98.0)
(Super_Capers | distributor | Roadside_Attractions)
(Super_Capers | distributor | Lionsgate)
(Super_Capers | budget | 2000000.0)","(""Roadside Attractions"" | ""distributed"" | ""Super Capers"")
(""Lionsgate"" | ""distributed"" | ""Super Capers"")
(""Super Capers"" | ""language"" | ""English"")
(""Super Capers"" | ""director"" | ""Roadside Attractions"")
(""Super Capers"" | ""director"" | ""Lionsgate"")
(""Super Capers"" | ""duration"" | ""98 minutes"")
(""Stacy Katzman"" | ""edited"" | ""Super Capers"")
(""Super Capers"" | ""editor"" | ""Stacy Katzman"")
(""Super Capers"" | ""budget"" | ""$2000000"")"
1809,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument, established in the year 2000, falls under the category of contributing property and is located in Adams County, Pennsylvania, USA. Adams County has Carroll County, Maryland to its southeast.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | state | ""Pennsylvania"")
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)
(11th_Mississippi_Infantry_Monument | country | ""United States"")","(""11th Mississippi Infantry Monument"" | ""year of establishment"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""type"" | ""contributing property"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Adams County, Pennsylvania, USA"")
(""Adams County"" | ""country"" | ""USA"")
(""Adams County"" | ""state"" | ""Pennsylvania"")
(""Adams County"" | ""has border with"" | ""Carroll County, Maryland"")
(""Carroll County, Maryland"" | ""location"" | ""Southeast of Adams County"")"
1810,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Music group the Velvet Underground released and produced the album Bootleg Series Volume 1: The Quine Tapes with a run time of 230:05, recorded in St. Louis, Missouri in the US. Bootleg Series Volume 1: The Quine Tapes was preceded by Squeeze by The Velvet Underground.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | United_States)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | St._Louis,_Missouri)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | precededBy | Squeeze_(The_Velvet_Underground_album))","(""The Velvet Underground"" | ""type"" | ""Music group""),
(""The Velvet Underground"" | ""released"" | ""Bootleg Series Volume 1: The Quine Tapes""),
(""The Velvet Underground"" | ""produced"" | ""Bootleg Series Volume 1: The Quine Tapes""),
(""Bootleg Series Volume 1: The Quine Tapes"" | ""type"" | ""album""),
(""Bootleg Series Volume 1: The Quine Tapes"" | ""run time"" | ""230:05""),
(""Bootleg Series Volume 1: The Quine Tapes"" | ""recorded in"" | ""St. Louis, Missouri""),
(""Bootleg Series Volume 1: The Quine Tapes"" | ""located in the country"" | ""US""),
(""Bootleg Series Volume 1: The Quine Tapes"" | ""preceded by"" | ""Squeeze by The Velvet Underground"")
"
1811,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson was born in England on January 1, 1726. As an adult she resided in India with her husband George Monson and studies botany.","(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | nationality | Kingdom_of_England)
(Lady_Anne_Monson | residence | India)
(Lady_Anne_Monson | spouse | George_Monson)
(Lady_Anne_Monson | professionalField | Botany)","(""Lady Anne Monson"" | ""birthPlace"" | ""England"")
(""Lady Anne Monson"" | ""birthDate"" | ""January 1, 1726"")
(""Lady Anne Monson"" | ""residence"" | ""India"")
(""Lady Anne Monson"" | ""spouse"" | ""George Monson"")
(""Lady Anne Monson"" | ""fieldOfStudy"" | ""Botany"")"
1812,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Anatole de Grunwald and Terence Rattigan wrote English Without Tears which had Bernard Knowles as the cinematographer.,"(English_Without_Tears | writer | Anatole_de_Grunwald)
(English_Without_Tears | cinematography | Bernard_Knowles)
(English_Without_Tears | writer | Terence_Rattigan)","(""Anatole de Grunwald"" | ""wrote"" | ""English Without Tears""),
(""Terence Rattigan"" | ""wrote"" | ""English Without Tears""),
(""English Without Tears"" | ""had"" | ""Bernard Knowles""),
(""Bernard Knowles"" | ""isCinematographerFor"" | ""English Without Tears"")"
1813,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Rageous was assembled by Pontiac in Detroit, Michigan.","(Pontiac_Rageous | assembly | Detroit)
(Detroit | isPartOf | Michigan)
(Pontiac_Rageous | manufacturer | Pontiac)","(""Pontiac Rageous"" | ""assembled by"" | ""Pontiac""),
(""Pontiac Rageous"" | ""assembled in"" | "" Detroit, Michigan"")"
1814,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Honeymoon Killers is the producer of the punk blues album Turn Me On (runtime: 35.1 minutes).,"(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | genre | Punk_blues)
(Turn_Me_On_(album) | producer | The_Honeymoon_Killers_(American_band))","(""The Honeymoon Killers"" | type | ""producer"")
(""The Honeymoon Killers"" | produces | ""Turn Me On"")
(""Turn Me On"" | type | ""album"")
(""Turn Me On"" | genre | ""punk blues"")
(""Turn Me On"" | runtime | ""35.1 minutes"")"
1815,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Universal Music Group/Polydor Records release The Bootleg Series Volume I: The Quine Tapes came out on October 16, 2001. The album was recorded in the United States in St. Louis, Missouri.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | United_States)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | St._Louis,_Missouri)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Polydor_Records)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Universal_Music_Group)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | releaseDate | 2001-10-16)","(""The Bootleg Series Volume I: The Quine Tapes"" | ""release date"" | ""October 16, 2001"")
(""The Universal Music Group/Polydor Records"" | ""release"" | ""The Bootleg Series Volume I: The Quine Tapes"")
(""The Bootleg Series Volume I: The Quine Tapes"" | ""record location"" | ""St. Louis, Missouri"")
(""The Bootleg Series Volume I: The Quine Tapes"" | ""record location"" | ""United States"")"
1816,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva, a American citizen, has his current residence in the United States. New York City is the largest city in the United States.","(Darinka_Dentcheva | residence | United_States)
(United_States | largestCity | New_York_City)
(Darinka_Dentcheva | citizenship | United_States)
(United_States | demonym | American)","(""Darinka Dentcheva"" | ""type"" | ""Person""),
(""Darinka Dentcheva"" | ""citizenship"" | ""United States""),
(""Darinka Dentcheva"" | ""residence"" | ""United States""),
(""United States"" | ""type"" | ""Country""),
(""New York City"" | ""type"" | ""City""),
(""New York City"" | ""isPartOf"" | ""United States""),
(""New York City"" | ""sizeRanking"" | ""largest""),
(""United States"" | ""hasPart"" | ""New York City"")"
1817,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Adam West had a main role in the English language movie Super Capers which runs 98 minutes. The movie had a budget of $2000000 and generated a gross income of $30955.,"(Super_Capers | language | English_language)
(Super_Capers | starring | Adam_West)
(Super_Capers | budget | 2000000.0)
(Super_Capers | runtime | 98.0)
(Super_Capers | gross | 30955.0)","('Adam West' | 'hadRole' | 'Super Capers')
('Super Capers' | 'language' | 'English')
('Super Capers' | 'runtime' | '98')
('Super Capers' | 'budget' | '$2000000')
('Super Capers' | 'grossIncome' | '$30955')"
1818,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy is located in Dijon, France. It has 27,400 students, 16,800 of which are undergraduate students and 1,299 of which are doctoral students. The University of Burgundy employs 2,900 staff members.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfStudents | 27400)
(University_of_Burgundy | numberOfDoctoralStudents | 1299)
(University_of_Burgundy | campus | Dijon)
(University_of_Burgundy | city | Dijon)
(University_of_Burgundy | country | France)","(University of Burgundy | location | Dijon, France)
(University of Burgundy | totalStudents | 27400)
(University of Burgundy | undergraduateStudents | 16800)
(University of Burgundy | doctoralStudents | 1299)
(University of Burgundy | employs | 2900)"
1819,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng was part of Shenzhou 10 mission.,(Nie_Haisheng | mission | Shenzhou_10),"(""Nie Haisheng"" | ""part of"" | ""Shenzhou 10 mission"")"
1820,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Directed by Gregory Allen, the movie McVeagh of the South Seas was produced by the Progressive Motion Picture Company.","(McVeagh_of_the_South_Seas | director | Gregory_Allen)
(McVeagh_of_the_South_Seas | producer | The_Progressive_Motion_Picture_Company)","(""McVeagh of the South Seas"" | ""director"" | ""Gregory Allen"")
(""McVeagh of the South Seas"" | ""producer"" | ""Progressive Motion Picture Company"")"
1821,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bionico (a dessert) is a food found in Mexico, where the currency is the peso. A variation on dessert is cake.","(Mexico | currency | Mexican_peso)
(Bionico | course | Dessert)
(Dessert | dishVariation | Cake)
(Bionico | country | Mexico)","(""Bionico"" | ""typeOf"" | ""dessert""),
(""Bionico"" | ""foundIn"" | ""Mexico""),
(""Mexico"" | ""currency"" | ""peso""),
(""cake"" | ""isVariationOf"" | ""dessert"")"
1822,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bionico is a food found in Mexico that contains ingredients such as chopped fruits, sour cream, condensed milk, granola, shredded coconut and raisins.","(Bionico | mainIngredient | ""Chopped Fruits, Sour Cream, Condensed Milk, Granola, Shredded Coconut, Raisins"")
(Bionico | country | Mexico)","(""Bionico"" | ""locatedIn"" | ""Mexico"")
(""Bionico"" | ""type"" | ""food"")
(""Bionico"" | ""ingredient"" | ""chopped fruits"")
(""Bionico"" | ""ingredient"" | ""sour cream"")
(""Bionico"" | ""ingredient"" | ""condensed milk"")
(""Bionico"" | ""ingredient"" | ""granola"")
(""Bionico"" | ""ingredient"" | ""shredded coconut"")
(""Bionico"" | ""ingredient"" | ""raisins"")"
1823,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1147 Stavropolis has an absolute magnitude of 11.5. It was discovered on June 11, 1929 by Grigory Neujmin. The asteroid has the following characteristics: it has an orbital period of 1249.6 days, a rotation period of 20378.5, an epoch of 31 July 2016, and the apoapsis of the asteroid is 418476000000.0.","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | discoverer | Grigory_Neujmin)
(1147_Stavropolis | absoluteMagnitude | 11.5)
(1147_Stavropolis | discovered | 1929-06-11)
(1147_Stavropolis | rotationPeriod | 20378.5)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))","(""1147 Stavropolis"" | ""hasAbsoluteMagnitude"" | ""11.5"")
(""1147 Stavropolis"" | ""discoveryDate"" | ""June 11, 1929"")
(""1147 Stavropolis"" | ""discoveredBy"" | ""Grigory Neujmin"")
(""1147 Stavropolis"" | ""hasOrbitalPeriod"" | ""1249.6 days"")
(""1147 Stavropolis"" | ""hasRotationPeriod"" | ""20378.5"")
(""1147 Stavropolis"" | ""hasEpoch"" | ""July 31, 2016"")
(""1147 Stavropolis"" | ""hasApoapsis"" | ""418476000000.0m"")"
1824,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alvinegro is the nickname for the Agremiação Sportiva Arapiraquense club, which has 17000 members and played in the Brazilian Campeonato Brasileiro Série C league. Its ground is the Estadio Municipal Coaracy da Mata Fonseca located in Arapiraca. The Vila Nova Futebol Clube are the champions of the league.","(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Campeonato_Brasileiro_Série_C | country | Brazil)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | nickname | ""\'\'Alvinegro"")
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(""Agremiação Sportiva Arapiraquense"" | ""nickname"" | ""Alvinegro""),
(""Agremiação Sportiva Arapiraquense"" | ""memberCount"" | 17000),
(""Agremiação Sportiva Arapiraquense"" | ""playsInLeague"" | ""Brazilian Campeonato Brasileiro Série C""),
(""Agremiação Sportiva Arapiraquense"" | ""hasGround"" | ""Estadio Municipal Coaracy da Mata Fonseca""),
(""Estadio Municipal Coaracy da Mata Fonseca"" | ""locatedIn"" | ""Arapiraca""),
(""Vila Nova Futebol Clube"" | ""isChampionOf"" | ""Brazilian Campeonato Brasileiro Série C"")"
1825,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bedford Aerodrome has served the Bedford Autodrome and has an operating organization that is called the MotorSport Vision.,"(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | cityServed | Bedford_Autodrome)","(""Bedford Aerodrome"" | ""serve"" | ""Bedford Autodrome"")
(""Bedford Aerodrome"" | ""hasOperatingOrganization"" | ""MotorSport Vision"")"
1826,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Brian Kelly instrumental music album Expect a Miracle was preceded by the album Pools of Light.,"(Expect_a_Miracle | precededBy | Pools_of_Light_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Instrumental_music)","(""Brian Kelly"" | ""type"" | ""Person"")
(""Expect a Miracle"" | ""type"" | ""Album"")
(""Expect a Miracle"" | ""creator"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""genre"" | ""Instrumental music"")
(""Pools of Light"" | ""type"" | ""Album"")
(""Pools of Light"" | ""creator"" | ""Brian Kelly"")
(""Expect a Miracle"" | ""precededBy"" | ""Pools of Light"")"
1827,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala is located in the country of Mexico.,(Ciudad_Ayala | country | Mexico),"(""Ciudad Ayala"" | ""is located in"" | ""Mexico"")"
1828,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Year of No Light followed their sludge metal genre album Nord with the album Live at Roadburn 2008.,"(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)","(""Year of No Light"" | ""followed"" | ""Nord"")
(""Nord"" | ""is a"" | ""sludge metal genre album"")
(""Year of No Light"" | ""produced"" | ""Live at Roadburn 2008"")"
1829,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","""Mermaid"" is a song on Train's ""California 37"" album which was written by Pat Monahan. Mermaid was produced by Espionage and is available in digital format.","(Mermaid_(Train_song) | producer | Espionage_(production_team))
(Mermaid_(Train_song) | album | California_37_(Train_album))
(Mermaid_(Train_song) | writer | Pat_Monahan)
(Mermaid_(Train_song) | format | Music_download)","(""Mermaid"" | type | ""song"")
(""Mermaid"" | ""on album"" | ""California 37"")
(""Mermaid"" | ""written by"" | ""Pat Monahan"")
(""Mermaid"" | ""produced by"" | ""Espionage"")
(""Mermaid"" | ""available in"" | ""digital format"")
(""California 37"" | ""includes song"" | ""Mermaid"") 
(""Pat Monahan"" | ""wrote"" | ""Mermaid"")
(""Espionage"" | ""produced"" | ""Mermaid"")
(""Train"" | ""has song"" | ""Mermaid"")
"
1830,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Jamie Lawrence was a player of the football club Ashford Town (Middlesex) F.C.,(Jamie_Lawrence | club | Ashford_Town_(Middlesex)_F.C.),"(Jamie Lawrence | type | Player)
(Jamie Lawrence | memberOf | Ashford Town (Middlesex) F.C.)
(Ashford Town (Middlesex) F.C. | type | Football Club)
(Ashford Town (Middlesex) F.C. | hasMember | Jamie Lawrence)"
1831,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, a graduate of Leningrad State University, was born in Leningrad but died December 9, 1991 in what is now called Saint Petersburg.","(Olga_Bondareva | birthPlace | Leningrad,_USSR)
(Olga_Bondareva | deathPlace | Saint_Petersburg)
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | deathDate | 1991-12-09)","(Olga Bondareva | type | Person)
(Olga Bondareva | birthPlace | Leningrad)
(Olga Bondareva | deathPlace | Saint Petersburg)
(Olga Bondareva | deathDate | December 9, 1991)
(Olga Bondareva | alumna | Leningrad State University)"
1832,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Music group the Velvet Underground, a proto-punk band released the album Bootleg Series Volume 1: The Quine Tapes in Rock music genre.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | genre | Rock_music)
(The_Velvet_Underground | genre | Proto-punk)","(""Velvet Underground"" | ""type"" | ""Music group"")
(""Velvet Underground"" | ""genre"" | ""proto-punk"")
(""Velvet Underground"" | ""released"" | ""Bootleg Series Volume 1: The Quine Tapes"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""by"" | ""Velvet Underground"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""genre"" | ""Rock music"")"
1833,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 98 minute movie ""Super Capers"", distributed by Lionsgate, had a budget of 2000000.0 dollars.","(Super_Capers | distributor | Lionsgate)
(Super_Capers | budget | 2000000.0)
(Super_Capers | runtime | 98.0)","(""Super Capers"" | runtimeInMinutes | 98)
(""Super Capers"" | distributor | ""Lionsgate"")
(""Super Capers"" | budget | 2000000.0)"
1834,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Year of No Light recorded Nord on September 6, 2006 followed by Live at Roadburn 2008 on April 19, 2008.","(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Live_at_Roadburn_2008_(Year_of_No_Light_album) | artist | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Live_at_Roadburn_2008_(Year_of_No_Light_album) | recordDate | 2008-04-19)","(Year of No Light | recorded | Nord)
(Nord | date | September 6, 2006)
(Year of No Light | followed by | Live at Roadburn 2008)
(Live at Roadburn 2008 | date | April 19, 2008)"
1835,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina had Israeli nationality and died in Israel on June 14, 1994.","(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | deathPlace | Israel)
(Liselotte_Grschebina | nationality | Israel)","(""Liselotte Grschebina"" | ""nationality"" | ""Israeli"")
(""Liselotte Grschebina"" | ""deathDate"" | ""June 14, 1994"")
(""Liselotte Grschebina"" | ""deathPlace"" | ""Israel"")"
1836,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","GMA New Media is located in Quezon City, Philippines which has a total area of 165.33.","(GMA_New_Media | location | Philippines)
(Quezon_City | areaTotal | 165.33)
(GMA_New_Media | location | Quezon_City)","(GMA New Media | location | Quezon City)
(Quezon City | country | Philippines)
(Quezon City | total area | 165.33)"
1837,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The 94 minute long film It's Great to Be Young (1956) featured John Mills playing a main character. The cinematography was done by Gilbert Taylor.,"(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor)
(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0"")","(""It's Great to Be Young (1956)"" | ""hasDuration"" | ""94 minutes"")
(""It's Great to Be Young (1956)"" | ""starring"" | ""John Mills"")
(""John Mills"" | ""appearsIn"" | ""It's Great to Be Young (1956)"")
(""It's Great to Be Young (1956)"" | ""hasCinematography"" | ""Gilbert Taylor"")
(""Gilbert Taylor"" | ""wasCinematographerFor"" | ""It's Great to Be Young (1956)"")"
1838,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Mason School of Business is located in Virginia, USA and are the current tenants of the Alan B. Miller Hall at 101 Ukrop Way. The architect of the building was Robert A M Stern.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | location | Virginia)
(Mason_School_of_Business | country | United_States)","(""Mason School of Business"" | ""location"" | ""Virginia, USA"")
(""Mason School of Business"" | ""is tenant of"" | ""Alan B. Miller Hall"")
(""Alan B. Miller Hall"" | ""address"" | ""101 Ukrop Way"")
(""Alan B. Miller Hall"" | ""architect"" | ""Robert A M Stern"")"
1839,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Rageous was assembled in Detroit, Michigan, and went into production in 1997.","(Pontiac_Rageous | productionStartYear | 1997)
(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | assembly | Detroit)","(""Pontiac Rageous"" | wasAssembledIn | ""Detroit, Michigan"")
(""Pontiac Rageous"" | wentIntoProductionIn | ""1997"")"
1840,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Rageous was assembled in Detroit, Michigan, went into and ended production in 1997.","(Pontiac_Rageous | productionStartYear | 1997)
(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | assembly | Detroit)
(Pontiac_Rageous | productionEndYear | 1997)","(""Pontiac Rageous"" | ""location of assembly"" | ""Detroit, Michigan"")
(""Pontiac Rageous"" | ""location of assembly"" | ""Michigan"")
(""Pontiac Rageous"" | ""production start year"" | ""1997"")
(""Pontiac Rageous"" | ""production end year"" | ""1997"")"
1841,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Chinabank was founded on 08-16-1920 located in the Philippines the time zone used by Philippines is Philippine Standard time.,"(Chinabank | location | Philippines)
(Philippines | timeZone | Philippine_Standard_Time)
(Chinabank | foundingDate | 1920-08-16)","(""Chinabank"" | ""foundingDate"" | ""08-16-1920"")
(""Chinabank"" | ""location"" | ""Philippines"")
(""Philippines"" | ""timeZone"" | ""Philippine Standard Time"")"
1842,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Mason School of Business are current tenants of the Alan B Miller Hall which is owned by The College of William and Mary and was designed by Robert A.M. Stern. The address of the building is 101 Ukrop Way and the date that the building of the hall started was the 30th of March 2007.,"(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""The Mason School of Business"" | ""tenantOf"" | ""Alan B Miller Hall"")
(""Alan B Miller Hall"" | ""ownedBy"" | ""The College of William and Mary"")
(""Alan B Miller Hall"" | ""designedBy"" | ""Robert A.M. Stern"")
(""Alan B Miller Hall"" | ""address"" | ""101 Ukrop Way"")
(""Alan B Miller Hall"" | ""startDate"" | ""30th of March 2007"")"
1843,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Nord ,created and produced by the artist Year of No Light is a sludge and post metal genre.","(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | genre | Post-metal)","(""Nord"" | ""type"" | ""Album"")
(""Nord"" | ""createdBy"" | ""Year of No Light"")
(""Nord"" | ""producedBy"" | ""Year of No Light"")
(""Nord"" | ""genre"" | ""sludge metal"")
(""Nord"" | ""genre"" | ""post metal"")
(""Year of No Light"" | ""type"" | ""Artist"")"
1844,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina died on June 14, 1994 in Israel.","(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | deathPlace | Israel)","(Liselotte Grschebina | deathDate | June 14, 1994)
(Liselotte Grschebina | deathPlace | Israel)"
1845,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Piotr Hallmann was born on the 25th of August 1987 in Gdynia, Poland. The leader of Gdynia, Poland is called the Vice President.","(Piotr_Hallmann | birthPlace | Gdynia,_Poland)
(Gdynia,_Poland | leaderTitle | ""Vice President"")
(Piotr_Hallmann | birthDate | 1987-08-25)","(Piotr Hallmann | date of birth | 25th of August 1987)
(Piotr Hallmann | birthPlace | Gdynia)
(Piotr Hallmann | birthPlace | Poland)
(Gdynia | country | Poland)
(Gdynia | leaderTitle | Vice President)"
1846,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Year of No Light's self-produced album Nord (58:41 minutes) was released 06-09-2006 on record labels Crucial Blast and E-Vinyl. Nord was followed by Live at Roadburn 2008.,"(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | recordLabel | Crucial_Blast)
(Nord_(Year_of_No_Light_album) | recordLabel | E-Vinyl)
(Nord_(Year_of_No_Light_album) | runtime | 58.41)","(""Year of No Light"" | ""produced"" | ""Nord"")
(""Nord"" | ""has duration"" | ""58:41 minutes"")
(""Nord"" | ""release date"" | ""06-09-2006"")
(""Nord"" | ""record label"" | ""Crucial Blast"")
(""Nord"" | ""record label"" | ""E-Vinyl"")
(""Year of No Light"" | ""followed by"" | ""Live at Roadburn 2008"")"
1847,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Mason School of Business are the current tenants of Alan B Miller Hall, located at ""101 Ukrop Way"" and owned by the College of William and Mary.","(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""Mason School of Business"" | ""tenancy"" | ""Alan B Miller Hall"")
(""Alan B Miller Hall"" | ""location"" | ""101 Ukrop Way"")
(""Alan B Miller Hall"" | ""ownership"" | ""College of William and Mary"")"
1848,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Darinka Dentcheva is a citizen of the United States and resides in New Jersey. The United States is composed of several ethnic groups-including Native Americans-and has a total area of 9833520000000.0 km.,"(Darinka_Dentcheva | citizenship | United_States)
(United_States | ethnicGroup | Native_American)
(Darinka_Dentcheva | residence | New_Jersey)
(United_States | areaTotal | 9833520000000.0)","(Darinka Dentcheva | citizenship | United States)
(Darinka Dentcheva | resides in | New Jersey)
(United States | has citizen | Darinka Dentcheva)
(United States | has resident | Darinka Dentcheva)
(United States | composed of | ethnic groups)
(United States | composed of | Native Americans)
(United States | total area | 9833520000000.0 km)"
1849,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Casey Ribicoff is the wife of Abraham A. Ribicoff, an American that worked as the US Secretary of Health, Education, and Welfare.","(Abraham_A._Ribicoff | spouse | Casey_Ribicoff)
(Abraham_A._Ribicoff | nationality | American)
(Abraham_A._Ribicoff | office | ""United States Secretary of Health, Education, and Welfare"")","(""Casey Ribicoff"" | ""relationship"" | ""Abraham A. Ribicoff"")
(""Abraham A. Ribicoff"" | ""nationality"" | ""American"")
(""Abraham A. Ribicoff"" | ""occupation"" | ""US Secretary of Health, Education, and Welfare"")"
1850,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy whose birth place is Resadiye, also had his residence in Istanbul with a metropolitan area of 5,343 km². Istanbul is in the Eastern European Summer time zone.","(Istanbul | areaMetro | 5343000000.0)
(Nurhan_Atasoy | birthPlace | Reşadiye)
(Nurhan_Atasoy | residence | Istanbul)
(Istanbul | timeZone | Eastern_European_Summer_Time)","(Nurhan Atasoy | birthPlace | Resadiye)
(Nurhan Atasoy | residence | Istanbul)
(Istanbul | areaTotal | 5,343 km²)
(Istanbul | timeZones | Eastern European Summer time zone)"
1851,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Piotr Hallmann was born in Gdynia, Poland, weighs 70.308 kg and is 175.26 cm tall.","(Piotr_Hallmann | height | 175.26)
(Piotr_Hallmann | birthPlace | Gdynia,_Poland)
(Piotr_Hallmann | weight | 70.308)","(Piotr Hallmann | birthPlace | Gdynia)
(Piotr Hallmann | birthPlace | Poland)
(Piotr Hallmann | weight | 70.308)
(Piotr Hallmann | height | 175.26)"
1852,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Adolfo Suárez Madrid–Barajas Airport is in Madrid and is operated by ENAIRE. It has a runway with the length of 3500.0 and is 610 metres above sea level.,"(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Madrid)","(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""Madrid"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""operator"" | ""ENAIRE"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""hasRunway"" | ""Runway"")
(""Runway"" | ""length"" | ""3500.0"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""altitude"" | ""610 metres"")"
1853,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Agremiacao Sportiva Arapiraquense plays in the Campeonato Brasileiro Serie C league and has 1700 members.,"(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | fullName | ""Agremiação Sportiva Arapiraquense"")","(""Agremiacao Sportiva Arapiraquense"" | ""playsIn"" | ""Campeonato Brasileiro Serie C"")
(""Agremiacao Sportiva Arapiraquense"" | ""hasMembers"" | ""1700"")"
1854,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Israeli national Liselotte Grschebina was born in Karlsruhe in the German Empire. She is a professional photographer who studied at the School of Applied Arts in Stuttgart.,"(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | nationality | Israel)
(Liselotte_Grschebina | birthPlace | German_Empire)
(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)
(Liselotte_Grschebina | professionalField | Photographer)","(Liselotte Grschebina | birthPlace | Karlsruhe)
(Liselotte Grschebina | nationality | Israel)
(Liselotte Grschebina | birthPlace | German Empire)
(Liselotte Grschebina | profession | Photographer)
(Liselotte Grschebina | studiedAt | School of Applied Arts in Stuttgart)"
1855,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","AmeriGas, which has a net income of 211200000, was founded on 01-01-1959.","(AmeriGas | foundingDate | 1959-01-01)
(AmeriGas | netIncome | 211200000)","(AmeriGas | hasNetIncome | 211200000)
(AmeriGas | wasFoundedOn | 01-01-1959)"
1856,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Lady Anne Monson was born in the Kingdom of England in a town located in North East England called Darlington. The Kingdom of England was founded in 927.,"(Lady_Anne_Monson | birthPlace | Darlington)
(Kingdom_of_England | foundingYear | 0927)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Darlington | region | North_East_England)","(Lady Anne Monson | birthPlace | Darlington)
(Lady Anne Monson | birthPlace | Kingdom of England)
(Kingdom of England | foundingYear | 927 literal)
(Darlington | location | North East England)
(Darlington | partOf | Kingdom of England)
(Kingdom of England | contains | Darlington)
(North East England | contains | Darlington)"
1857,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Expect a Miracle is an instrumental album that runs for 54:56 minutes. Brian Kelly preceded Expect a Miracle with his album Pools of Light.,"(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | precededBy | Pools_of_Light_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Instrumental_music)","(""Expect a Miracle"" | type | ""instrumental album"")
(""Expect a Miracle"" | duration | ""54:56 minutes"")
(""Brian Kelly"" | precedes | ""Expect a Miracle"")
(""Brian Kelly"" | hasAlbum | ""Pools of Light"")
(""Pools of Light"" | precedes | ""Expect a Miracle"")"
1858,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Mason School of Business are the current tenants of Alan B Miller Hall, located at 101 Ukrop Way in Virginia and owned by the College of William and Mary.","(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | location | Virginia)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""Mason School of Business"" | ""isTenantOf"" | ""Alan B Miller Hall"")
(""Alan B Miller Hall"" | ""locatedAt"" | ""101 Ukrop Way"")
(""Alan B Miller Hall"" | ""locatedIn"" | ""Virginia"")
(""Alan B Miller Hall"" | ""ownedBy"" | ""College of William and Mary"")"
1859,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The author of the fantasy genre book The Fellowship of the Ring, which preceded The Two Towers, is J.R.R. Tolkien.","(The_Fellowship_of_the_Ring | literaryGenre | Fantasy_(genre))
(The_Fellowship_of_the_Ring | followedBy | The_Two_Towers)
(The_Fellowship_of_the_Ring | author | J._R._R._Tolkien)","(""The Fellowship of the Ring"" | ""type"" | ""fantasy genre book"")
(""The Fellowship of the Ring"" | ""author"" | ""J.R.R. Tolkien"")
(""The Fellowship of the Ring"" | ""precededBy"" | ""The Two Towers"")
(""J.R.R. Tolkien"" | ""isAuthorOf"" | ""The Fellowship of the Ring"")"
1860,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Turkey, or its long name “Republic of Turkey”, has an area water percentage of 1.3. Nurhan Atasoy, who once lived in Istanbul, lives in Turkey.","(Nurhan_Atasoy | residence | Istanbul)
(Turkey | longName | ""Republic of Turkey"")
(Turkey | percentageOfAreaWater | 1.3)
(Nurhan_Atasoy | residence | Turkey)","(""Turkey"" | ""longName"" | ""Republic of Turkey"")
(""Turkey"" | ""areaWaterPercentage"" | 1.3)
(""Nurhan Atasoy"" | ""livesIn"" | ""Turkey"")
(""Nurhan Atasoy"" | ""onceLivedIn"" | ""Istanbul"")"
1861,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",John Mills' birthdate was 1908-01-01.,(John_Mills | birthDate | 1908-01-01),(John Mills | birthdate | 1908-01-01)
1862,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The 12 cylinder ALCO RS-3 was built by the American Locomotive Company.,"(ALCO_RS-3 | builder | American_Locomotive_Company)
(ALCO_RS-3 | cylinderCount | 12)","(""ALCO RS-3"" | ""number of cylinders"" | ""12"")
(""ALCO RS-3"" | ""is built by"" | ""American Locomotive Company"")"
1863,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Chopped Fruits, sour cream, condensed milk, granola, shredded coconut and raisins are the main ingredients in bionico (a dessert) found in Mexico. The currency of Mexico is the peso inhabited by the Mexicans. Cookie is a type of dessert.","(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Dessert | dishVariation | Cookie)
(Bionico | mainIngredient | ""Chopped Fruits, Sour Cream, Condensed Milk, Granola, Shredded Coconut, Raisins"")
(Bionico | country | Mexico)","(""Chopped Fruits"" | ingredientOf | ""bionico"")
(""sour cream"" | ingredientOf | ""bionico"")
(""condensed milk"" | ingredientOf | ""bionico"")
(""granola"" | ingredientOf | ""bionico"")
(""shredded coconut"" | ingredientOf | ""bionico"")
(""raisins"" | ingredientOf | ""bionico"")
(""bionico"" | type | ""dessert"")
(""bionico"" | foundIn | ""Mexico"")
(""Mexico"" | currency | ""peso"")
(""Mexico"" | inhabitants | ""Mexicans"")
(""Cookie"" | type | ""dessert"")"
1864,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva was born on April 27, 1937 and died on December 9, 1991.","(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | deathDate | 1991-12-09)","(Olga Bondareva | birthDate | ""April 27, 1937"")
(Olga Bondareva | deathDate | ""December 9, 1991"")"
1865,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Lady Anne Monson’s residence is in India.,(Lady_Anne_Monson | residence | India),"(""Lady Anne Monson"" | ""residence"" | ""India"")"
1866,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng is a fighter pilot.,(Nie_Haisheng | occupation | Fighter_pilot),"(""Nie Haisheng"" | ""typeOf"" | ""Person""),
(""Nie Haisheng"" | ""occupation"" | ""Fighter pilot"")"
1867,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","""Live at Roadburn 2008"" is an album by Year of No Light.",(Live_at_Roadburn_2008_(Year_of_No_Light_album) | artist | Year_of_No_Light),"(""Live at Roadburn 2008"" | type | ""Album"")
(""Live at Roadburn 2008"" | creator | ""Year of No Light"")"
1868,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Karlsruhe is in Germany.,(Karlsruhe | country | Germany),(Karlsruhe | location | Germany)
1869,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Acharya Institute of Technology, directed by Dr. G. Prabhukumar and located at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090, India, was given the 'Technical Campus' status by the All India Council for Technical Education, located in Mumbai, India.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(All_India_Council_for_Technical_Education | location | Mumbai)
(Acharya_Institute_of_Technology | director | ""Dr. G. P. Prabhukumar"")
(Acharya_Institute_of_Technology | city | Bangalore)
(Acharya_Institute_of_Technology | country | ""India"")
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)","(""Acharya Institute of Technology"" | ""directedBy"" | ""Dr. G. Prabhukumar"")
(""Acharya Institute of Technology"" | ""locatedAt"" | ""Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090, India"")
(""Acharya Institute of Technology"" | ""wasGiven"" | ""'Technical Campus' status"")
(""'Technical Campus' status"" | ""givenBy"" | ""All India Council for Technical Education"")
(""All India Council for Technical Education"" | ""locatedIn"" | ""Mumbai, India"")"
1870,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Jamie Lawrence played for Ashford Town F.C.,(Jamie_Lawrence | club | Ashford_Town_(Middlesex)_F.C.),(Jamie Lawrence | playedFor | Ashford Town F.C.)
1871,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","First aired in October of 1983, the show Bananaman starred Bill Oddie. It was broadcast by the BBC, which was founded by John Reith and has its headquarters at Broadcasting House.","(BBC | city | Broadcasting_House)
(Bananaman | starring | Bill_Oddie)
(BBC | foundedBy | John_Reith,_1st_Baron_Reith)
(Bananaman | broadcastedBy | BBC)
(Bananaman | firstAired | ""1983-10-03"")","(""Bananaman"" | ""airDate"" | ""October of 1983"")
(""Bananaman"" | ""starring"" | ""Bill Oddie"")
(""Bananaman"" | ""broadcaster"" | ""BBC"")
(""BBC"" | ""founder"" | ""John Reith"")
(""BBC"" | ""headquarters"" | ""Broadcasting House"")"
1872,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The asteroid 1147 Stavropolis has a periapsis of 260855000000.0, apoapsis of 418476000000.0, an absolute magnitude of 11.5. It also has a rotation period of 20378.5 with the orbital period of 1249.6 days and its epoch is 31 July 2016 (Julian Day 2457600.5).","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | absoluteMagnitude | 11.5)
(1147_Stavropolis | rotationPeriod | 20378.5)
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | epoch | 31 July 2016 (JD2457600.5))
(1147_Stavropolis | orbitalPeriod | 1249.6)","(1147 Stavropolis | periapsis | 260855000000.0)
(1147 Stavropolis | apoapsis | 418476000000.0)
(1147 Stavropolis | absoluteMagnitude | 11.5)
(1147 Stavropolis | rotationPeriod | 20378.5)
(1147 Stavropolis | orbitalPeriod | 1249.6)
(1147 Stavropolis | epoch | ""31 July 2016 (Julian Day 2457600.5)"")"
1873,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Wharton Tiers album Turn Me On, which followed the album Let It Breed, is 35.1 minutes long.","(Turn_Me_On_(album) | precededBy | Let_It_Breed)
(Turn_Me_On_(album) | runtime | 35.1)
(Turn_Me_On_(album) | producer | Wharton_Tiers)","(""Wharton Tiers"" | ""hasAlbum"" | ""Turn Me On"")
(""Turn Me On"" | ""follows"" | ""Let It Breed"")
(""Wharton Tiers"" | ""hasAlbum"" | ""Let It Breed"")
(""Turn Me On"" | ""lengthInMinutes"" | 35.1)"
1874,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Piotr Hallmann's birthplace was in Gdynia, Poland.","(Piotr_Hallmann | birthPlace | Gdynia,_Poland)","(Piotr Hallmann | birthplace | Gdynia, Poland)"
1875,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The leader title for Ciudad Ayala, which has population density of 1604, is City Manager.","(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | populationDensity | 1604.0)","(""Ciudad Ayala"" | ""title"" | ""City Manager"")
(""Ciudad Ayala"" | ""populationDensity"" | 1604)"
1876,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson was born in Darlington, England on January 1, 1726. She is of English nationality but resided in India. Her professional field is botany. She died on February 18, 1776.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | deathDate | 1776-02-18)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | nationality | Kingdom_of_England)
(Lady_Anne_Monson | residence | India)
(Lady_Anne_Monson | professionalField | Botany)","(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington, England"")

(""Lady Anne Monson"" | ""birthDate"" | ""January 1, 1726"")

(""Lady Anne Monson"" | ""nationality"" | ""English"")

(""Lady Anne Monson"" | ""residence"" | ""India"")

(""Lady Anne Monson"" | ""profession"" | ""botany"")

(""Lady Anne Monson"" | ""deathDate"" | ""February 18, 1776"")"
1877,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Train song Mermaid was produced by the Espionage production team and was written by Pat Monahan, a member of the band. The song is featured on the band’s album California 37 and is distributed digitally.","(Mermaid_(Train_song) | producer | Espionage_(production_team))
(Mermaid_(Train_song) | album | California_37_(Train_album))
(Mermaid_(Train_song) | writer | Pat_Monahan)
(Mermaid_(Train_song) | format | Music_download)","(""Mermaid"" | type | ""song"")
(""Mermaid"" | producer | ""Espionage production team"")
(""Mermaid"" | writtenBy | ""Pat Monahan"")
(""Pat Monahan"" | memberOf | ""Train"")
(""Mermaid"" | partOf | ""California 37"")
(""California 37"" | type | ""album"")
(""California 37"" | artist | ""Train"")
(""Mermaid"" | distributionFormat | ""digital"")"
1878,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Train song Mermaid, which is a pop rock song, was released on the Columbia Records and Sony Music Entertainment record labels.","(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)","(Mermaid | type | Train song)
(Mermaid | genre | pop rock)
(Mermaid | release label | Columbia Records)
(Mermaid | release label | Sony Music Entertainment)"
1879,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The rotation period of 1147 Stavropolis is 20378.5.,(1147_Stavropolis | rotationPeriod | 20378.5),"(""1147 Stavropolis"" | ""rotation period"" | ""20378.5"")"
1880,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Year of No Light's ""Live at the Roadburn 2008"" album was recorded on April 19, 2008.",(Live_at_Roadburn_2008_(Year_of_No_Light_album) | recordDate | 2008-04-19),"(""Live at the Roadburn 2008"" | albumArtist | ""Year of No Light"")
(""Live at the Roadburn 2008"" | recordingDate | ""April 19, 2008"")
(""Live at the Roadburn 2008"" | albumYear | 2008)
(""Year of No Light"" | eventParticipation | ""Roadburn 2008"")
(""Year of No Light"" | recorded | ""Live at the Roadburn 2008"")
(""Roadburn 2008"" | eventDate | ""April 19, 2008"")
(""Roadburn 2008"" | performance | ""Year of No Light"")"
1881,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The key person in Hypermarcas, located in Brazil, is the CEO. Hypermarcas is an S.A. corporation which was founded on January 1, 2001.","(Hypermarcas | location | Brazil)
(Hypermarcas | keyPerson | CEO)
(Hypermarcas | foundingDate | 2001-01-01)
(Hypermarcas | type | S.A._(corporation))","(""Hypermarcas"" | ""keyPerson"" | ""CEO"")
(""Hypermarcas"" | ""location"" | ""Brazil"")
(""Hypermarcas"" | ""type"" | ""S.A. corporation"")
(""Hypermarcas"" | ""foundingDate"" | ""January 1, 2001"")"
1882,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Fellowship of the Ring, which was authored by J.R.R. Tolkien, is in the Fantasy genre and was followed by The Two Towers.","(The_Fellowship_of_the_Ring | literaryGenre | Fantasy_(genre))
(The_Fellowship_of_the_Ring | followedBy | The_Two_Towers)
(The_Fellowship_of_the_Ring | author | J._R._R._Tolkien)","(""The Fellowship of the Ring"" | ""author"" | ""J.R.R. Tolkien"")
(""The Fellowship of the Ring"" | ""genre"" | ""Fantasy"")
(""The Fellowship of the Ring"" | ""followedBy"" | ""The Two Towers"")"
1883,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Super Capers is a 98 minute movie directed and written by Ray Griggs. It starred Adam West.,"(Super_Capers | starring | Adam_West)
(Super_Capers | writer | Ray_Griggs_(director))
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | runtime | 98.0)","(""Super Capers"" | ""type"" | ""Movie"")
(""Super Capers"" | ""duration"" | ""98 minutes"")
(""Super Capers"" | ""director"" | ""Ray Griggs"")
(""Super Capers"" | ""writer"" | ""Ray Griggs"")
(""Super Capers"" | ""starring"" | ""Adam West"")"
1884,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 1147 Stavropolis, discovered by Grigory Neujmin (died on 17th of December 1946) with a rotation period of 20378.5, has an orbital period of 1249.6. The apoapsis of this asteroid is 418476000000.0 AU.","(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | rotationPeriod | 20378.5)
(1147_Stavropolis | discoverer | Grigory_Neujmin)
(Grigory_Neujmin | deathDate | 1946-12-17)
(1147_Stavropolis | apoapsis | 418476000000.0)","(""1147 Stavropolis"" | ""discoverer"" | ""Grigory Neujmin"")
(""Grigory Neujmin"" | ""deathDate"" | ""17th of December 1946"")
(""1147 Stavropolis"" | ""rotationPeriod"" | 20378.5)
(""1147 Stavropolis"" | ""orbitalPeriod"" | 1249.6)
(""1147 Stavropolis"" | ""apoapsis"" | 418476000000.0 AU)"
1885,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","GMA Network, parent company of GMA New Media, features Felipe Gozon as a key person.","(GMA_New_Media | keyPerson | Felipe_Gozon)
(GMA_New_Media | parentCompany | GMA_Network_(company))","(""GMA Network"" | ""parentCompanyOf"" | ""GMA New Media""),
(""GMA Network"" | ""features"" | ""Felipe Gozon""),
(""Felipe Gozon"" | ""keyPersonOf"" | ""GMA Network"")"
1886,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers is an English-language film, starring Michael Rooker and distributed by Lionsgate, an American company.","(Super_Capers | distributor | Lionsgate)
(Lionsgate | location | United_States)
(Super_Capers | starring | Michael_Rooker)
(Super_Capers | language | English_language)","(""Super Capers"" | ""language"" | ""English"")
(""Super Capers"" | ""starring"" | ""Michael Rooker"")
(""Super Capers"" | ""distributedBy"" | ""Lionsgate"")
(""Lionsgate"" | ""isPartOf"" | ""American company"")"
1887,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Alan Shepard was a member of the Apollo 14 crew and was born in New Hampshire.,"(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | mission | Apollo_14)","(Alan Shepard | type | Person)
(Alan Shepard | member of | Apollo 14 crew)
(Alan Shepard | birthPlace | New Hampshire)"
1888,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The runway surface of the Bedford Aerodrome, founded in 2004, is made of concrete. The aerodrome is operated by MotorSport Vision.","(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | runwaySurfaceType | Concrete)
(MotorSport_Vision | foundingYear | 2004)","1. (Bedford Aerodrome | hasSurface | Concrete)
2. (Bedford Aerodrome | foundedIn | 2004)
3. (Bedford Aerodrome | operatedBy | MotorSport Vision)"
1889,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The city Ciudad Ayala has population 1,777,539 making the density 1604.0 in Mexico. One of the leaders in the council-manager government is the City Manager.","(Ciudad_Ayala | populationMetro | 1777539)
(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | type | City)
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | governmentType | Council-manager_government)
(Ciudad_Ayala | country | Mexico)","(""Ciudad Ayala"" | ""hasPopulation"" | 1777539)
(""Ciudad Ayala"" | ""populationDensity"" | 1604.0)
(""Ciudad Ayala"" | ""country"" | ""Mexico"")
(""Ciudad Ayala"" | ""governmentType"" | ""council-manager government"")
(""council-manager government"" | ""hasLeader"" | ""City Manager"")"
1890,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","English Without Tears is an 89 minute film that was written by Terence Rattigan and the producer, Anatole de Grunwald. Nicholas Brodszky wrote the music while Bernard Knowles was the cinematographer.","(English_Without_Tears | musicComposer | Nicholas_Brodszky)
(English_Without_Tears | producer | Anatole_de_Grunwald)
(English_Without_Tears | writer | Anatole_de_Grunwald)
(English_Without_Tears | cinematography | Bernard_Knowles)
(English_Without_Tears | writer | Terence_Rattigan)
(English_Without_Tears | runtime | 89.0)","(""English Without Tears"" | ""duration"" | ""89 minutes"")
(""English Without Tears"" | ""writer"" | ""Terence Rattigan"")
(""English Without Tears"" | ""producer"" | ""Anatole de Grunwald"")
(""English Without Tears"" | ""music composer"" | ""Nicholas Brodszky"")
(""English Without Tears"" | ""cinematographer"" | ""Bernard Knowles"")"
1891,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","English Without Tears was directed by Harold French, produced by Anatole de Grunwald, with Bernard Knowles as the cinematographer.","(English_Without_Tears | director | Harold_French)
(English_Without_Tears | cinematography | Bernard_Knowles)
(English_Without_Tears | producer | Anatole_de_Grunwald)","(""English Without Tears"" | ""director"" | ""Harold French"")
(""English Without Tears"" | ""producer"" | ""Anatole de Grunwald"")
(""English Without Tears"" | ""cinematographer"" | ""Bernard Knowles"")"
1892,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aleksandr Prudnikov's youth football club was FC Spartak Moscow. He currently plays for the FC Amkar Perm football club which is managed Gadzhi Gadzhiyev.,"(Aleksandr_Prudnikov | club | FC_Amkar_Perm)
(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(FC_Amkar_Perm | manager | Gadzhi_Gadzhiyev)
(Aleksandr_Prudnikov | currentclub | FC_Amkar_Perm)","(Aleksandr Prudnikov | youthFootballClub | FC Spartak Moscow)
(Aleksandr Prudnikov | playsFor | FC Amkar Perm)
(FC Amkar Perm | managedBy | Gadzhi Gadzhiyev)"
1893,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Justin Whalin was a presenter before starting in the movie Super Capers alongside Michael Rooker. Rooker was born in 1955.,"(Super_Capers | starring | Justin_Whalin)
(Justin_Whalin | occupation | Presenter)
(Super_Capers | starring | Michael_Rooker)
(Michael_Rooker | birthYear | 1955-01-01)","(""Justin Whalin"" | ""occupation"" | ""presenter"")
(""Justin Whalin"" | ""actedIn"" | ""Super Capers"")
(""Super Capers"" | ""hasActor"" | ""Justin Whalin"")
(""Michael Rooker"" | ""actedIn"" | ""Super Capers"")
(""Super Capers"" | ""hasActor"" | ""Michael Rooker"")
(""Michael Rooker"" | ""birthYear"" | 1955)"
1894,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Mexico has a population density of 61.0.,(Mexico | populationDensity | 61.0),(Mexico | populationDensity | 61.0)
1895,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The writer of English Without Tears, Anatole de Grunwald, died in London. Terence Rattigan, also the writer, died in Hamilton, Bermuda.","(English_Without_Tears | writer | Anatole_de_Grunwald)
(Terence_Rattigan | deathPlace | Hamilton,_Bermuda)
(Anatole_de_Grunwald | deathPlace | London)
(English_Without_Tears | writer | Terence_Rattigan)","(""English Without Tears"" | writer | ""Anatole de Grunwald"")
(""Anatole de Grunwald"" | deathPlace | ""London"")
(""Terence Rattigan"" | writer | literal)
(""Terence Rattigan"" | deathPlace | ""Hamilton, Bermuda"")"
1896,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Darinka Dentcheva graduated from Humboldt University and worker as a mathematician in the field of Mathematical Optimization. Darinka is known for her work with stochastic programming and developed a theory that was influenced by Andrzej Piotr Ruszczynski.,"(Darinka_Dentcheva | influencedBy | Andrzej_Piotr_Ruszczyński)
(Darinka_Dentcheva | professionalField | Mathematical_optimization)
(Darinka_Dentcheva | knownFor | Stochastic_programming)
(Darinka_Dentcheva | almaMater | Humboldt_University)","(""Darinka Dentcheva"" | ""almaMater"" | ""Humboldt University""),
(""Darinka Dentcheva"" | ""occupation"" | ""mathematician""),
(""Darinka Dentcheva"" | ""field"" | ""Mathematical Optimization""),
(""Darinka Dentcheva"" | ""knownFor"" | ""work with stochastic programming""),
(""Darinka Dentcheva"" | ""developed"" | ""a theory""),
(""a theory"" | ""influencedBy"" | ""Andrzej Piotr Ruszczynski"")"
1897,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Piotr Hallmann's birthday is August 25th, 1987. Piotr is 175.26cm tall and weighs 70.308kg.","(Piotr_Hallmann | birthDate | 1987-08-25)
(Piotr_Hallmann | height | 175.26)
(Piotr_Hallmann | weight | 70.308)","(Piotr Hallmann | birthdate | August 25th, 1987)
(Piotr Hallmann | height | 175.26cm)
(Piotr Hallmann | weight | 70.308kg)"
1898,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nie Haisheng was a fighter pilot from the People's Republic of China who was born in Zaoyang, Hubei on October 13, 1964.","(Nie_Haisheng | birthPlace | Zaoyang)
(Nie_Haisheng | birthPlace | Hubei)
(""Nie_Haisheng | nationality | People's_Republic_of_China)
(Nie_Haisheng | birthDate | 1964-10-13)
(Nie_Haisheng | occupation | Fighter_pilot)","(""Nie Haisheng"" | ""type"" | ""Person"")
(""Nie Haisheng"" | ""birthPlace"" | ""Zaoyang, Hubei"")
(""Nie Haisheng"" | ""birthDate"" | ""1964-10-13"")
(""Nie Haisheng"" | ""nationality"" | ""People's Republic of China"")
(""Nie Haisheng"" | ""occupation"" | ""Fighter pilot"")"
1899,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Located in Madrid, ENAIRE is the operating organisation for Adolfo Suarez Madrid-Barajas airport, which has a runway length of 3500.0 and is located at Madrid, Paracuellos de Jarama, San Sebastián de los Reyes and Alcobendas.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | ""Madrid, Paracuellos de Jarama, San Sebastián de los Reyes and Alcobendas"")","(""ENAIRE"" | ""location"" | ""Madrid"")
(""ENAIRE"" | ""type"" | ""organisaiton"")
(""ENAIRE"" | ""operates"" | ""Adolfo Suarez Madrid-Barajas airport"")
(""Adolfo Suarez Madrid-Barajas airport"" | ""location"" | ""Madrid"")
(""Adolfo Suarez Madrid-Barajas airport"" | ""location"" | ""Paracuellos de Jarama"")
(""Adolfo Suarez Madrid-Barajas airport"" | ""location"" | ""San Sebastián de los Reyes"")
(""Adolfo Suarez Madrid-Barajas airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suarez Madrid-Barajas airport"" | ""runway length"" | 3500.0)"
1900,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aleksandr Prudnikov played for FC Spartak Moscow's youth team and now plays for FC Amkar Perm which is his current club, which is located at the Otkrytiye Arena.","(Aleksandr_Prudnikov | club | FC_Amkar_Perm)
(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(Aleksandr_Prudnikov | currentclub | FC_Amkar_Perm)
(FC_Spartak_Moscow | ground | Otkrytiye_Arena)","(Aleksandr Prudnikov | playedFor | FC Spartak Moscow's Youth Team)
(Aleksandr Prudnikov | playsFor | FC Amkar Perm)
(FC Amkar Perm | isCurrentClubOf | Aleksandr Prudnikov)
(FC Amkar Perm | location | Otkrytiye Arena)"
1901,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Music group the Velvet Underground released and produced the rock music album Bootleg Series Volume 1: The Quine Tapes which has a total runtime of 230.05 minutes.,"(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | genre | Rock_music)","(""Velvet Underground"" | type | ""Music Group""),
(""Velvet Underground"" | released | ""Bootleg Series Volume 1: The Quine Tapes""),
(""Velvet Underground"" | produced | ""Bootleg Series Volume 1: The Quine Tapes""),
(""Bootleg Series Volume 1: The Quine Tapes"" | type | ""Album""),
(""Bootleg Series Volume 1: The Quine Tapes"" | genre | ""Rock Music""),
(""Bootleg Series Volume 1: The Quine Tapes"" | totalRuntime | ""230.05 minutes"")"
1902,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The campus of the Acharya Institute of Technology (located at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta main Road, Bangalore-560090) was established in the year 2000. The institute is affiliated with Visvesvaraya Technological university.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | established | 2000)","(Acharya Institute of Technology | location | Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta main Road, Bangalore-560090)
(Acharya Institute of Technology | year of establishment | 2000)
(Acharya Institute of Technology | affiliation | Visvesvaraya Technological university)"
1903,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The total area of the United States is 9833520000000.0 km.,(United_States | areaTotal | 9833520000000.0),(United States | totalArea | 9833520000000.0 km)
1904,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Train song Mermaid was written by the Michael Jackson's production team Stargate.,"(Mermaid_(Train_song) | writer | Stargate_(production_team))
(Stargate_(production_team) | associatedBand/associatedMusicalArtist | Michael_Jackson)","(""Mermaid"" | ""type"" | ""song"")
(""Mermaid"" | ""writer"" | ""Stargate"")
(""Mermaid"" | ""performer"" | ""Train"")
(""Stargate"" | ""occupation"" | ""Michael Jackson's production team"")
(""Stargate"" | ""wrote"" | ""Mermaid"")"
1905,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Tom Simon was the director and Jamie Lawrence was the music composer of ''Death on a Factory Farm'.,"(Death_on_a_Factory_Farm | director | Tom_Simon)
(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)","(""Tom Simon"" | ""job title"" | ""director"")
(""Tom Simon"" | ""directed"" | ""Death on Factory Farm"")
(""Jamie Lawrence"" | ""job title"" | ""music composer"")
(""Jamie Lawrence"" | ""composed music for"" | ""Death on a Factory Farm"")
(""'Death on a Factory Farm'"" | ""director"" | ""Tom Simon"")
(""'Death on a Factory Farm'"" | ""music composer"" | ""Jamie Lawrence"")"
1906,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Velvet Underground, which drew occasional musical artists from an associated group called Theater of Eternal Music, created the album Bootleg Series Volume 1: The Quine Tapes.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(The_Velvet_Underground | associatedBand/associatedMusicalArtist | Theatre_of_Eternal_Music)","(""The Velvet Underground"" | ""hasMember"" | ""occasional musical artists"")
(""occasional musical artists"" | ""memberOf"" | ""Theater of Eternal Music"")
(""The Velvet Underground"" | ""created"" | ""Bootleg Series Volume 1: The Quine Tapes"")"
1907,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala city, part of Morelos with population density and population of 1604.0 and 1,777,539 respectively, has City Manager as one of the leaders.","(Ciudad_Ayala | populationMetro | 1777539)
(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | type | City)
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | isPartOf | Morelos)","(""Ciudad Ayala"" | ""type"" | ""city""),
(""Ciudad Ayala"" | ""isPartOf"" | ""Morelos""),
(""Ciudad Ayala"" | ""populationDensity"" | ""1604.0""),
(""Morelos"" | ""population"" | ""1777539""),
(""Ciudad Ayala"" | ""leaderTitle"" | ""City Manager"")."
1908,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",One of the ethnic group that is found in Israel is the Israeli Jews.,(Israel | ethnicGroup | Israeli_Jews),"(""Israeli Jews"" | ""type"" | ""Ethnic group""),
(""Israeli Jews"" | ""location"" | ""Israel"")"
1909,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Year of No Light's post-metal album Nord has a runtime of 58.41 minutes.,"(Nord_(Year_of_No_Light_album) | genre | Post-metal)
(Nord_(Year_of_No_Light_album) | runtime | 58.41)","(""Year of No Light"" | type | ""band"")
(""Nord"" | type | ""post-metal album"")
(""Nord"" | ""created by"" | ""Year of No Light"")
(""Nord"" | ""runtime"" | ""58.41 minutes"")"
1910,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Turkish people speak the Turkish language.,(Turkish_people | language | Turkish_language),"(""Turkish people"" | ""speak"" | ""Turkish language"")"
1911,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","A monument to the 11th Mississippi Infantry, which is in the category of a contributing property, was erected in 2000 in Adams County, Pennsylvania. Pennsylvania's Franklin County is found to the west of Adams County.","(Adams_County,_Pennsylvania | hasToItsWest | Franklin_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""11th Mississippi Infantry"" | type | ""Infantry"")
(""monument to the 11th Mississippi Infantry"" | date | ""2000"")
(""monument to the 11th Mississippi Infantry"" | type | ""contributing property"")
(""monument to the 11th Mississippi Infantry"" | location | ""Adams County, Pennsylvania"")
(""Adams County"" | type | ""County"")
(""Adams County"" | isPartOf | ""Pennsylvania"")
(""Franklin County"" | type | ""County"")
(""Franklin County"" | isPartOf | ""Pennsylvania"")
(""Franklin County"" | location | ""west of Adams County"")
(""Pennsylvania"" | type | ""State"")"
1912,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",France has a unitary state form of government.,(France | governmentType | Unitary_state),"(""France"" | ""hasFormOfGovernment"" | ""unitary state form of government"")"
1913,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Much like a cookie, Bionico is a dessert which contains granola and can be found in the Guadalajara region of Mexico, which uses pesos as their currency and has Mexican people.","(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Bionico | region | Guadalajara)
(Bionico | ingredient | Granola)
(Dessert | dishVariation | Cookie)
(Bionico | country | Mexico)","(""Bionico"" | ""type"" | ""dessert"")
(""Bionico"" | ""contains"" | ""granola"")
(""Bionico"" | ""location"" | ""Guadalajara region"")
(""Guadalajara region"" | ""partOf"" | ""Mexico"")
(""Mexico"" | ""currency"" | ""pesos"")
(""Mexico"" | ""inhabitant"" | ""Mexican people"")"
1914,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Hobbit came before The Fellowship of the Ring and was followed by Lord of the Rings.,"(The_Fellowship_of_the_Ring | precededBy | The_Hobbit)
(The_Hobbit | followedBy | The_Lord_of_the_Rings)","(""The Hobbit"" | precedes | ""The Fellowship of the Ring"")
(""The Hobbit"" | followedBy | ""Lord of the Rings"")
(""The Fellowship of the Ring"" | follows | ""The Hobbit"")
(""The Fellowship of the Ring"" | precedes | ""Lord of the Rings"")
(""Lord of the Rings"" | follows | ""The Fellowship of the Ring"")
(""Lord of the Rings"" | precededBy | ""The Hobbit"")"
1915,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",American national Abraham A. Ribicoff was born in Connecticut and was married to Casey Ribicoff.,"(Abraham_A._Ribicoff | spouse | Casey_Ribicoff)
(Abraham_A._Ribicoff | nationality | American)
(Abraham_A._Ribicoff | birthPlace | Connecticut)","(Abraham A. Ribicoff | nationality | ""American"")
(Abraham A. Ribicoff | birthPlace | Connecticut)
(Abraham A. Ribicoff | spouse | Casey Ribicoff)"
1916,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",It’s Great to be Young is a 1956 film starring Cecil Parker with a duration of 94 minutes. Ted Willis and Louis Levy acted as the music composer and writer of the film.,"(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | musicComposer | Louis_Levy)
(""It's_Great_to_Be_Young_(1956_film) | starring | Cecil_Parker)
(""It's_Great_to_Be_Young_(1956_film) | writer | Ted_Willis"")","(""It’s Great to be Young"" | type | ""film"")
(""It’s Great to be Young"" | year | 1956)
(""It’s Great to be Young"" | starring | ""Cecil Parker"")
(""It’s Great to be Young"" | duration | 94)
(""Ted Willis"" | role | ""music composer"")
(""It’s Great to be Young"" | music composer | ""Ted Willis"")
(""Louis Levy"" | role | ""writer"")
(""It’s Great to be Young"" | writer | ""Louis Levy"")"
1917,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was born in New Hampshire, died in California, on July 21st, 1998.","(Alan_Shepard | deathPlace | California)
(Alan_Shepard | deathDate | ""1998-07-21"")
(Alan_Shepard | birthPlace | New_Hampshire)","(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | deathPlace | California)
(Alan Shepard | deathDate | July 21st, 1998)"
1918,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was born on May 2nd, 1908 in the German Empire.","(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | birthPlace | German_Empire)","(""Liselotte Grschebina"" | ""birthDate"" | ""May 2nd, 1908"")
(""Liselotte Grschebina"" | ""birthPlace"" | ""German Empire"")"
1919,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva is a citizen of the United States and resides in New Jersey. The United States has several ethnic groups-one of them being Native Americans-and has a total area of 9,833,520.","(Darinka_Dentcheva | citizenship | United_States)
(United_States | ethnicGroup | Native_American)
(Darinka_Dentcheva | residence | New_Jersey)
(United_States | areaTotal | 9833520000000.0)","(""Darinka Dentcheva"" | ""citizenship"" | ""United States""),
(""Darinka Dentcheva"" | ""resides in"" | ""New Jersey""),
(""United States"" | ""hasCitizen"" | ""Darinka Dentcheva""),
(""United States"" | ""resident"" | ""Darinka Dentcheva""),
(""United States"" | ""hasEthnicGroup"" | ""Native Americans""),
(""United States"" | ""totalArea"" | 9,833,520)"
1920,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Super Capers is a film edited by Stacy Katzman.,(Super_Capers | editing | Stacy_Katzman),"(""Super Capers"" | type | ""film""),
(""Super Capers"" | ""edited by"" | ""Stacy Katzman"")"
1921,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala is a city with an elevation of 1147.0 above sea level. It uses a type of government called council-manager government, and the leader is named Juan Nolasco.","(Ciudad_Ayala | type | City)
(Ciudad_Ayala | governmentType | Council-manager_government)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)
(Ciudad_Ayala | leader | Juan_Nolasco)","(""Ciudad Ayala"" | ""type"" | ""City"")
(""Ciudad Ayala"" | ""elevation"" | 1147.0)
(""Ciudad Ayala"" | ""type of government"" | ""council-manager government"")
(""Ciudad Ayala"" | ""leader"" | ""Juan Nolasco"")"
1922,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva, born on January 1, 1958, is a Mathematical optimization professional.","(Darinka_Dentcheva | birthDate | 1958-01-01)
(Darinka_Dentcheva | professionalField | Mathematical_optimization)","(Darinka Dentcheva | birthDate | ""January 1, 1958"")
(Darinka Dentcheva | profession | ""Mathematical optimization professional"")"
1923,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Dr G.P. Prabhukumar is the director of Acharya Institute of Technology which is affiliated to Visvesvaraya Technological University. The All India Council for Technical Education which is located in Mumbai gave the institute Technical Campus status. The address for the campus is: Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(All_India_Council_for_Technical_Education | location | Mumbai)
(Acharya_Institute_of_Technology | director | ""Dr. G. P. Prabhukumar"")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)","(Acharya Institute of Technology | director | Dr G.P. Prabhukumar)
(Acharya Institute of Technology | affiliation | Visvesvaraya Technological University)
(All India Council for Technical Education | location | Mumbai)
(Acharya Institute of Technology | status | Technical Campus)
(Acharya Institute of Technology | recognizedBy | All India Council for Technical Education)
(Acharya Institute of Technology | address | Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090)"
1924,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was born in New Hampshire on Nov 18, 1923. He went to school at NWC and graduated with an MA in 1957 and was awarded the Distinguished Service Medal in the United States Navy.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | almaMater | ""NWC, M.A. 1957"")
(Alan_Shepard | award | Distinguished_Service_Medal_(United_States_Navy))","(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | birthDate | ""Nov 18, 1923""^^xsd:date)
(Alan Shepard | almaMater | NWC)
(Alan Shepard | academicDegree | MA)
(Alan Shepard | graduationYear | ""1957""^^xsd:integer)
(Alan Shepard | award | Distinguished Service Medal)
(Alan Shepard | organization | United States Navy)"
1925,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Lionsgate company, a distributor of Super Capers movie, is located in the United States. The movie was also distributed by Roadside Attractions.","(Super_Capers | distributor | Roadside_Attractions)
(Lionsgate | location | United_States)
(Super_Capers | distributor | Lionsgate)","(""Lionsgate company"" | ""type"" | ""Company"")
(""Lionsgate company"" | ""distributes"" | ""Super Capers"")
(""Lionsgate company"" | ""location"" | ""United States"")
(""Super Capers"" | ""type"" | ""Movie"")
(""Super Capers"" | ""distributedBy"" | ""Lionsgate company"")
(""Roadside Attractions"" | ""type"" | ""Company"")
(""Roadside Attractions"" | ""distributes"" | ""Super Capers"")
(""Super Capers"" | ""distributedBy"" | ""Roadside Attractions"")"
1926,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aleksandr Prudnikov plays for FC Amkar Perm and is a member of the youth side of FC Spartak Moscow. The manager of FC Amkar Perm is Gadzhi Gadzhiyev.,"(Aleksandr_Prudnikov | club | FC_Amkar_Perm)
(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(FC_Amkar_Perm | manager | Gadzhi_Gadzhiyev)
(Aleksandr_Prudnikov | currentclub | FC_Amkar_Perm)","(Aleksandr Prudnikov | plays for | FC Amkar Perm)
(Aleksandr Prudnikov | member of | FC Spartak Moscow youth side)
(FC Amkar Perm | manager | Gadzhi Gadzhiyev)"
1927,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Released July 28, 1944, English Without Tears was a film produced by Anatole de Grunwald. The music was composed by Nicholas Brodszky.","(English_Without_Tears | releaseDate | 1944-07-28)
(English_Without_Tears | producer | Anatole_de_Grunwald)
(English_Without_Tears | musicComposer | Nicholas_Brodszky)","(""English Without Tears"" | ""releaseDate"" | ""July 28, 1944"")
(""English Without Tears"" | ""producer"" | ""Anatole de Grunwald"")
(""English Without Tears"" | ""composer"" | ""Nicholas Brodszky"")"
1928,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Bootleg Series Volume I: The Quine Tapes was recorded in St. Louis, Missouri, in the United States. It was recorded through Polydor Records and under the Universal Music Group record label. The album was released on October 16th, 2001.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | United_States)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | St._Louis,_Missouri)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Polydor_Records)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Universal_Music_Group)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | releaseDate | 2001-10-16)","(The Bootleg Series Volume I: The Quine Tapes | was recorded in | St. Louis)
(The Bootleg Series Volume I: The Quine Tapes | was recorded in | Missouri)
(The Bootleg Series Volume I: The Quine Tapes | was recorded in | the United States)
(The Bootleg Series Volume I: The Quine Tapes | was recorded through | Polydor Records)
(The Bootleg Series Volume I: The Quine Tapes | under record label | Universal Music Group)
(The Bootleg Series Volume I: The Quine Tapes | release date | October 16th, 2001)"
1929,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Live at Roadburn 2008 by Year of No Light was recorded on April 19, 2008.",(Live_at_Roadburn_2008_(Year_of_No_Light_album) | recordDate | 2008-04-19),"(""Live at Roadburn 2008"" | ""creator"" | ""Year of No Light"")
(""Live at Roadburn 2008"" | ""date"" | ""April 19, 2008"")
(""Live at Roadburn 2008"" | ""type"" | ""album"")
(""Year of No Light"" | ""created"" | ""Live at Roadburn 2008"")"
1930,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Graco Ramírez is a leader in Morelos.,(Morelos | leader | Graco_Ramírez),"(""Graco Ramírez"" | ""rdf:type"" | ""Person""),
(""Graco Ramírez"" | ""jobTitle"" | ""Leader""),
(""Graco Ramírez"" | ""placeOfLeadership"" | ""Morelos"")"
1931,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina is an Israeli national who was born in the German Empire. Modern Hebrew is spoken in Israel.,"(Liselotte_Grschebina | nationality | Israel)
(Liselotte_Grschebina | birthPlace | German_Empire)
(Israel | language | Modern_Hebrew)","(Liselotte Grschebina | nationality | Israel)
(Liselotte Grschebina | place of birth | German Empire)
(Modern Hebrew | is spoken in | Israel)"
1932,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Felipe Gozon is a key person at GMA New Media, which was founded on 01-01-2000 and is a mass media industry that makes mobile applications. The company is located in the Philippines with headquarters located in the GMA Network Center.","(GMA_New_Media | foundingDate | 2000-01-01)
(GMA_New_Media | product | Mobile_Applications)
(GMA_New_Media | industry | Mass_Media)
(GMA_New_Media | keyPerson | Felipe_Gozon)
(GMA_New_Media | location | GMA_Network_Center)
(GMA_New_Media | location | Philippines)","(""Felipe Gozon"" | ""role"" | ""key person"")
(""Felipe Gozon"" | ""affiliation"" | ""GMA New Media"")
(""GMA New Media"" | ""founding date"" | ""01-01-2000"")
(""GMA New Media"" | ""industry"" | ""mass media"")
(""GMA New Media"" | ""product"" | ""mobile applications"")
(""GMA New Media"" | ""location"" | ""Philippines"")
(""GMA New Media"" | ""headquarters"" | ""GMA Network Center"")"
1933,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nie Haisheng (born in Zaoyang, Hubei province) was a crew member on Shenzhou 6 and took part in the Shenzhou 10 mission too.","(Nie_Haisheng | mission | Shenzhou_10)
(Nie_Haisheng | mission | Shenzhou_6)
(Nie_Haisheng | birthPlace | Zaoyang)
(Zaoyang | isPartOf | Hubei)","(""Nie Haisheng"" | ""place of birth"" | ""Zaoyang, Hubei province"")
(""Nie Haisheng"" | ""participated in"" | ""Shenzhou 6"")
(""Shenzhou 6"" | ""had crew member"" | ""Nie Haisheng"")
(""Nie Haisheng"" | ""participated in"" | ""Shenzhou 10"")
(""Shenzhou 10"" | ""had participant"" | ""Nie Haisheng"")"
1934,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Dennis William Sciama was the doctoral advisor of Brandon Carter, a physicist whose professional field was on General Relativity and was known for the invention of the Carter constant and for proving the no-hair theorem.","(Brandon_Carter | professionalField | General_relativity)
(Brandon_Carter | knownFor | Carter_constant)
(Brandon_Carter | knownFor | No-hair_theorem)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)","(""Dennis William Sciama"" | ""profession"" | ""doctoral advisor"")
(""Dennis William Sciama"" | ""advises"" | ""Brandon Carter"")
(""Brandon Carter"" | ""profession"" | ""physicist"")
(""Brandon Carter"" | ""field"" | ""General Relativity"")
(""Brandon Carter"" | ""known for"" | ""invention of the Carter constant"")
(""Brandon Carter"" | ""known for"" | ""proving the no-hair theorem"")"
1935,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Aaron Turner played with the band Twilight and sings for a living.,"(Aaron_Turner | instrument | Singing)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Twilight_(band))","(Aaron Turner | occupation | Singer)
(Aaron Turner | playsWith | Twilight)"
1936,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Mexico is inhabited by Mexicans and the local currency is the peso. In Mexico, there is a dessert called Bionico which requires granola as one of its ingredients.","(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Bionico | ingredient | Granola)
(Bionico | country | Mexico)","(Mexico | isInhabitedBy | Mexicans)
(Mexico | hasCurrency | peso)
(Bionico | isDessertOf | Mexico)
(Bionico | requiresIngredient | granola)"
1937,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 89 minutes long movie, English Without Tears was edited by Alan Jaggs and its music was composed by Nicholas Brodszky,.","(English_Without_Tears | runtime | 89.0)
(English_Without_Tears | musicComposer | Nicholas_Brodszky)
(English_Without_Tears | editing | Alan_Jaggs)","(""English Without Tears"" | ""duration"" | ""89 minutes"")
(""English Without Tears"" | ""editor"" | ""Alan Jaggs"")
(""English Without Tears"" | ""music composer"" | ""Nicholas Brodszky"")"
1938,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Detroit is a city in the state of Michigan.,(Detroit | type | City_(Michigan)),"(Detroit | type | City)
(Detroit | locatedIn | Michigan)
(Michigan | type | State)"
1939,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers is a film that starred Justin Whalin and was directed by Ray Griggs. The film ran for 98 minutes and made $30955.0 at the box office. It was distributed by Lionsgate and Roadside Attractions, and its budget amounts to 2,000,000.","(Super_Capers | distributor | Roadside_Attractions)
(Super_Capers | distributor | Lionsgate)
(Super_Capers | budget | 2000000.0)
(Super_Capers | starring | Justin_Whalin)
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | runtime | 98.0)
(Super_Capers | gross | 30955.0)","(""Super Capers"" | ""starring"" | ""Justin Whalin"")
(""Super Capers"" | ""directedBy"" |  ""Ray Griggs"")
(""Super Capers"" | ""runtime"" | ""98 minutes"")
(""Super Capers"" | ""gross"" | ""$30955.0"")
(""Super Capers"" | ""distributor"" | ""Lionsgate"")
(""Super Capers"" | ""distributor"" | ""Roadside Attractions"")
(""Super Capers"" | ""budget"" | ""2,000,000"")"
1940,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Year of No Light's 58.41 minute long post metal album Nord was released by the record label Crucial blast on 06-09-2006.,"(Nord_(Year_of_No_Light_album) | genre | Post-metal)
(Nord_(Year_of_No_Light_album) | recordLabel | Crucial_Blast)
(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | runtime | 58.41)","(""Year of No Light"" | type | ""Band"")
(""Nord"" | type | ""Album"")
(""Nord"" | ""length"" | ""58.41 minutes"")
(""Nord"" | ""genre"" | ""post metal"")
(""Nord"" | ""release date"" | ""06-09-2006"")
(""Crucial Blast"" | type | ""Record label"")
(""Nord"" | ""released by"" | ""Crucial Blast"")
(""Year of No Light"" | ""released"" | ""Nord"")"
1941,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","With an apoapsis of 418476000000.0. and a periapsis of is 260855000000, the asteroid 1147 Stavropolis takes 20378.5. to complete its rotation. Its orbital period is 1249.6 days.","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | rotationPeriod | 20378.5)
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)","(""1147 Stavropolis"" | ""hasApoapsis"" | ""418476000000.0"")
(""1147 Stavropolis"" | ""hasPeriapsis"" | ""260855000000"")
(""1147 Stavropolis"" | ""hasRotationPeriod"" | ""20378.5"")
(""1147 Stavropolis"" | ""hasOrbitalPeriod"" | ""1249.6 days"")"
1942,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Expect a Miracle, a compilation album created and produced by composer & pianist Brian Kelly with runtime of 54.56 is an easy listening album of instrumental music genre. It was preceded by the album Pools of Light.","(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | type | Compilation_Album)
(Expect_a_Miracle | precededBy | Pools_of_Light_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Instrumental_music)
(Expect_a_Miracle | genre | Easy_listening)","(""Expect a Miracle"" | creator | ""Brian Kelly"")
(""Expect a Miracle"" | genre | ""easy listening"")
(""Expect a Miracle"" | type | ""album"")
(""Expect a Miracle"" | format | ""instrumental music"")
(""Expect a Miracle"" | runtime | ""54.56"")
(""Brian Kelly"" | profession | ""composer"")
(""Brian Kelly"" | profession | ""pianist"")
(""Brian Kelly"" | produced | ""Expect a Miracle"")
(""Expect a Miracle"" | preceded by | ""Pools of Light"")"
1943,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","In the genre Rock music (recorded in St. Louis, Missouri of the United States) exists Bootleg Series Volume1: The Quine Tapes produced by The Velvet Underground with a run time of 230.05 minutes.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | United_States)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | St._Louis,_Missouri)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | genre | Rock_music)","(""Bootleg Series Volume1: The Quine Tapes"" | ""type"" | ""Rock music"")
(""Bootleg Series Volume1: The Quine Tapes"" | ""producer"" | ""The Velvet Underground"")
(""Bootleg Series Volume1: The Quine Tapes"" | ""run time"" | 230.05)
(""Bootleg Series Volume1: The Quine Tapes"" | ""location"" | ""St. Louis, Missouri, United States"")
(""Rock music"" | ""location"" | ""St. Louis, Missouri, United States"")
(""The Velvet Underground"" | ""produce"" | ""Bootleg Series Volume1: The Quine Tapes"")"
1944,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Pontiac Rageous coupe was produced until 1997.,"(Pontiac_Rageous | productionEndYear | 1997)
(Pontiac_Rageous | bodyStyle | Coupe)","(""Pontiac Rageous coupe"" | ""year of production end"" | ""1997"")"
1945,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The population of Mexico is 61 inhabitants per square kilometre.,(Mexico | populationDensity | 61.0),(Mexico | populationDensity | 61 inhabitants per square kilometre)
1946,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","1147 Stavropolis has a rotation period of 20378.5. Its periapsis is 2608550000000.0, the orbital period is 1249.6 and the apoapsis of the asteroid is 418476000000.0 AU.","(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | rotationPeriod | 20378.5)
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)","(1147 Stavropolis | hasRotationPeriod | 20378.5)
(1147 Stavropolis | hasPeriapsis | 2608550000000.0)
(1147 Stavropolis | hasOrbitalPeriod | 1249.6)
(1147 Stavropolis | hasApoapsis | 418476000000.0 AU)"
1947,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Train song “Mermaid” is an example of the reggae genre.,(Mermaid_(Train_song) | genre | Reggae),"(""Mermaid"" | genre | ""reggae"")
(""Mermaid"" | artist | ""Train"")
(""Mermaid"" | type | ""song"")
(""Train"" | produces | ""Mermaid"")"
1948,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Akeem Ayers, who was number 39 in the draft pick, made his debut for the Tennessee Titans.","(Akeem_Ayers | draftPick | ""39"")
(Akeem_Ayers | debutTeam | Tennessee_Titans)","(Akeem Ayers | draftNumber | ""39"")
(Akeem Ayers | madeDebutFor | Tennessee Titans)"
1949,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",George Allen and Unwin is the publisher of The Hobbit.,(The_Hobbit | publisher | George_Allen_&_Unwin),"(""George Allen and Unwin"" | ""publisherOf"" | ""The Hobbit"")"
1950,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Super Capers is an English-language film directed by Ray Griggs and edited by Stacy Katzman. The runtime of the film is 98 minutes.,"(Super_Capers | language | English_language)
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | editing | Stacy_Katzman)
(Super_Capers | runtime | 98.0)","(""Super Capers"" | language | ""English"")
(""Super Capers"" | director | ""Ray Griggs"")
(""Super Capers"" | editor | ""Stacy Katzman"")
(""Super Capers"" | runtime | 98)"
1951,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The band The Velvet Underground was started in 1964.,(The_Velvet_Underground | activeYearsStartYear | 1964-01-01),"(""The Velvet Underground"" | ""type"" | ""Band""),
(""The Velvet Underground"" | ""startedIn"" | literal:1964)"
1952,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The leader of Saint Petersburg is called a governor.,(Saint_Petersburg | leaderTitle | Governor),"(""Saint Petersburg"" | ""leader"" | ""governor"")"
1953,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina, of Israeli nationality, was born May 2, 1908, within the German Empire, and died in Israel.","(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | deathPlace | Israel)
(Liselotte_Grschebina | nationality | Israel)
(Liselotte_Grschebina | birthPlace | German_Empire)","(""Liselotte Grschebina"" | ""birthDate"" | ""May 2, 1908"")
(""Liselotte Grschebina"" | ""birthPlace"" | ""German Empire"")
(""Liselotte Grschebina"" | ""deathPlace"" | ""Israel"")
(""Liselotte Grschebina"" | ""nationality"" | ""Israeli"")"
1954,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aaron Turner is from Boston. He sings post-metal for a living, started performing in 1995 and is a musician in the Lotus Eaters band.","(Aaron_Turner | genre | Post-metal)
(Aaron_Turner | associatedBand/associatedMusicalArtist | Lotus_Eaters_(band))
(Aaron_Turner | instrument | Singing)
(Aaron_Turner | activeYearsStartYear | 1995)
(Aaron_Turner | origin | Boston)","(Aaron Turner | type | Person)
(Aaron Turner | birthPlace | Boston)
(Aaron Turner | profession | musician)
(Aaron Turner | musicGenre | post-metal)
(Aaron Turner | activeYearsStartYear | 1995)
(Aaron Turner | associatedBand | Lotus Eaters)"
1955,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","In the USA where African Americans are an ethnic group, Abraham A. Ribicoff was born. He died in New York City and was married to Ruth Ribicoff.","(Abraham_A._Ribicoff | spouse | ""Ruth Ribicoff"")
(Abraham_A._Ribicoff | birthPlace | United_States)
(Abraham_A._Ribicoff | deathPlace | New_York_City)
(United_States | ethnicGroup | African_Americans)","(Abraham A. Ribicoff | place of birth | USA)
(Abraham A. Ribicoff | place of death | New York City)
(Abraham A. Ribicoff | spouse | Ruth Ribicoff)
(USA | has ethnic group | African Americans)"
1956,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson, who was in the professional field of botany, died on February 18, 1776.","(Lady_Anne_Monson | deathDate | 1776-02-18)
(Lady_Anne_Monson | professionalField | Botany)","(""Lady Anne Monson"" | ""occupation"" | ""botany""),
(""Lady Anne Monson"" | ""deathDate"" | ""1776-02-18"")"
1957,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Piotr Hallmann was born on August 25, 1987 in Gdynia, Poland, which has a Vice President as one of its leaders.","(Piotr_Hallmann | birthPlace | Gdynia,_Poland)
(Gdynia,_Poland | leaderTitle | ""Vice President"")
(Piotr_Hallmann | birthDate | 1987-08-25)","(""Piotr Hallmann"" | ""birthDate"" | ""August 25, 1987"")
(""Piotr Hallmann"" | ""birthPlace"" | ""Gdynia, Poland"")
(""Gdynia, Poland"" | ""leaderTitle"" | ""Vice President"")"
1958,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers, starring Michael Rooker, was written and directed by Ray Griggs. The movie is 98 minutes long and had a budget of $2,000,000.","(Super_Capers | starring | Michael_Rooker)
(Super_Capers | budget | 2000000.0)
(Super_Capers | writer | Ray_Griggs_(director))
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | runtime | 98.0)","(""Super Capers"" | ""starring"" | ""Michael Rooker"")
(""Super Capers"" | ""writtenBy"" | ""Ray Griggs"")
(""Super Capers"" | ""directedBy"" | ""Ray Griggs"")
(""Super Capers"" | ""runtimeMinutes"" | ""98"")
(""Super Capers"" | ""budget"" | ""$2,000,000"")"
1959,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina (1908-05-02 - 1994-06-14) was born in Karlsruhe in the German Empire and died in Israel. She is of Israeli nationality but studied at the School of Applied Arts in Stuttgart.,"(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | deathPlace | Israel)
(Liselotte_Grschebina | nationality | Israel)
(Liselotte_Grschebina | birthPlace | German_Empire)
(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)","(""Liselotte Grschebina"" | ""birthDate"" | ""1908-05-02"")
(""Liselotte Grschebina"" | ""deathDate"" | ""1994-06-14"")
(""Liselotte Grschebina"" | ""birthPlace"" | ""Karlsruhe"")
(""Liselotte Grschebina"" | ""birthPlace"" | ""German Empire"")
(""Liselotte Grschebina"" | ""deathPlace"" | ""Israel"")
(""Liselotte Grschebina"" | ""nationality"" | ""Israeli"")
(""Liselotte Grschebina"" | ""education"" | ""School of Applied Arts Stuttgart"")"
1960,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Fellowship of the Ring, a fantasy novel, published by George Allen & Unwin, was released on July 29, 1954. It was followed by the sequel The Two Towers.","(The_Fellowship_of_the_Ring | publisher | George_Allen_&_Unwin)
(The_Fellowship_of_the_Ring | literaryGenre | Fantasy_(genre))
(The_Fellowship_of_the_Ring | followedBy | The_Two_Towers)
(The_Fellowship_of_the_Ring | releaseDate | 1954-07-29)","(""The Fellowship of the Ring"" | ""type"" | ""fantasy novel"")
(""The Fellowship of the Ring"" | ""publishedBy"" | ""George Allen & Unwin"")
(""The Fellowship of the Ring"" | ""releaseDate"" | ""July 29, 1954"")
(""The Fellowship of the Ring"" | ""followedBy"" | ""The Two Towers"")"
1961,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The metropolitan area of Ciudad Ayala has a population of 1777539 with a density of 1604. The leader for the Ciudad Ayala is City Manager and the government type is council-manager. Ciudad Ayala is offset at -6 and is part of Morelos.,"(Ciudad_Ayala | populationMetro | 1777539)
(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | type | City)
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | governmentType | Council-manager_government)
(Ciudad_Ayala | utcOffset | −6)
(Ciudad_Ayala | isPartOf | Morelos)","(""Ciudad Ayala"" | ""type"" | ""metropolitan area"")
(""Ciudad Ayala"" | ""populationTotal"" | ""1777539"")
(""Ciudad Ayala"" | ""populationDensity"" | ""1604"")
(""Ciudad Ayala"" | ""leaderTitle"" | ""City Manager"")
(""Ciudad Ayala"" | ""governmentType"" | ""council-manager"")
(""Ciudad Ayala"" | ""utcOffset"" | ""-6"")
(""Ciudad Ayala"" | ""isPartOf"" | ""Morelos"")"
1962,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ray Griggs is the director of Super Capers film which has a running time of 98 minutes and its box office is $30955.0.,"(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | gross | 30955.0)
(Super_Capers | runtime | 98.0)","(""Ray Griggs"" | ""profession"" | ""director"")
(""Ray Griggs"" | ""directed"" | ""Super Capers"")
(""Super Capers"" | ""director"" | ""Ray Griggs"")
(""Super Capers"" | ""runtime"" | ""98 minutes"")
(""Super Capers"" | ""box office"" | ""$30955.0"")"
1963,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Grigory Neujmin discovered 1147 Stavropolis, which has an orbital period of 1249.6 days with an absolute magnitude of 11.5. The apoapsis of this celestial body is 418476000000.0.","(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | discoverer | Grigory_Neujmin)
(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | absoluteMagnitude | 11.5)","(""Grigory Neujmin"" | ""discovered"" | ""1147 Stavropolis"")
(""1147 Stavropolis"" | ""hasOrbitalPeriod"" | ""1249.6 days"")
(""1147 Stavropolis"" | ""hasAbsoluteMagnitude"" | ""11.5"")
(""1147 Stavropolis"" | ""hasApoapsis"" | ""418476000000.0"")"
1964,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brian Kelly is both the artist and the producer of the album Expect a Miracle. Expect a Miracle falls into the instrumental and easy listening genres.,"(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | genre | Instrumental_music)
(Expect_a_Miracle | genre | Easy_listening)
(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))","(""Brian Kelly"" | ""type"" | ""Person"")
(""Brian Kelly"" | ""type"" | ""Artist"")
(""Brian Kelly"" | ""type"" | ""Music Producer"")
(""Expect a Miracle"" | ""type"" | ""Album"")
(""Expect a Miracle"" | ""genre"" | ""Instrumental"")
(""Expect a Miracle"" | ""genre"" | ""Easy listening"")
(""Brian Kelly"" | ""producer"" | ""Expect a Miracle"")
(""Brian Kelly"" | ""artist"" | ""Expect a Miracle"")"
1965,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Darinka Dentcheva's current residence in the state of New Jersey in United States. United States has had some top officials and leaders as Joe Biden and John Roberts respectively.,"(United_States | leader | John_Roberts)
(Darinka_Dentcheva | residence | United_States)
(United_States | leader | Joe_Biden)
(Darinka_Dentcheva | residence | New_Jersey)","(""Darinka Dentcheva"" | ""current residence"" | ""New Jersey"")
(""New Jersey"" | ""located in"" | ""United States"")
(""Joe Biden"" | ""citizenship"" | ""United States"")
(""John Roberts"" | ""citizenship"" | ""United States"")
(""United States"" | ""top officials"" | ""Joe Biden"")
(""United States"" | ""top officials"" | ""John Roberts"")"
1966,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",MotorSport Vision operates the Bedford Aerodrome which is located in Thurleigh in the county of Bedfordshire.,"(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | location | Thurleigh)
(Thurleigh | ceremonialCounty | Bedfordshire)","(""MotorSport Vision"" | ""operates"" | ""Bedford Aerodrome"")
(""Bedford Aerodrome"" | ""isLocatedIn"" | ""Thurleigh"")
(""Thurleigh"" | ""isPartOf"" | ""Bedfordshire"")"
1967,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Gregory Allen was the director for the movie McVeagh of the South Seas.,(McVeagh_of_the_South_Seas | director | Gregory_Allen),"(Gregory Allen | type | Person)
(Gregory Allen | occupation | Director)
(McVeagh of the South Seas | type | Movie)
(Gregory Allen | director of | McVeagh of the South Seas)"
1968,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nurhan Atasoy's was born in Turkey where the primary language is Turkish.,"(Nurhan_Atasoy | birthPlace | Turkey)
(Turkey | language | Turkish_language)","(""Nurhan Atasoy"" | ""birthPlace"" | ""Turkey"")
(""Turkey"" | ""language"" | ""Turkish"")"
1969,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Music group the Velvet Underground released album Bootleg Series Volume 1: The Quine Tapes.,(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground),"(""Velvet Underground"" | ""type"" | ""Music group""),
(""Velvet Underground"" | ""released"" | ""Bootleg Series Volume 1: The Quine Tapes""),
(""Bootleg Series Volume 1: The Quine Tapes"" | ""type"" | ""album""),
(""Bootleg Series Volume 1: The Quine Tapes"" | ""by artist"" | ""Velvet Underground"")."
1970,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Liselotte Grschebina was born in Karlsruhe.,(Liselotte_Grschebina | birthPlace | Karlsruhe),"(""Liselotte Grschebina"" | ""birthPlace"" | ""Karlsruhe"")"
1971,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Velvet Underground started performing in 1964.,(The_Velvet_Underground | activeYearsStartYear | 1964-01-01),"(""The Velvet Underground"" | ""startPerformingDate"" | ""1964"")"
1972,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Harold French, who was born in the UK, was the director of the film English Without Tears.","(English_Without_Tears | director | Harold_French)
(Harold_French | birthPlace | UK)","(""Harold French"" | ""birthPlace"" | ""UK"")
(""Harold French"" | ""occupation"" | ""director"")
(""Harold French"" | ""directed"" | ""English Without Tears"")"
1973,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brandon Carter graduated from the University of Cambridge.,(Brandon_Carter | almaMater | University_of_Cambridge),"(""Brandon Carter"" | almaMater | ""University of Cambridge"")"
1974,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Train song, ""Mermaid"" was written by Amund Bjørklund and is an example of the reggae genre.","(Mermaid_(Train_song) | genre | Reggae)
(Mermaid_(Train_song) | writer | Amund_Bjørklund)","(""Mermaid"" | isWrittenBy | ""Amund Bjørklund"")
(""Mermaid"" | genre | ""reggae"")
(""Mermaid"" | isSongOf | ""Train"")"
1975,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",In Ciudad Ayala the leader is called the governator and the elevation above sea level is 1147.0.,"(Ciudad_Ayala | leaderTitle | Governator)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)","(Ciudad Ayala | leaderTitle | ""governator"")
(Ciudad Ayala | elevation | 1147.0)"
1976,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","All India Council for Technical Education is located in Mumbai. Acharya Institute of Technology is in Bangalore located at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090. Bangalore was founded by Kempe Gowda I. The institute has the president B.M. Reddy and the director Dr. G.P. Prabhukumar. The institute was given the 'Technical campus status' by All India Council for Technical Education.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(All_India_Council_for_Technical_Education | location | Mumbai)
(Acharya_Institute_of_Technology | director | ""Dr. G. P. Prabhukumar"")
(Bangalore | founder | Kempe_Gowda_I)
(Acharya_Institute_of_Technology | city | Bangalore)
(Acharya_Institute_of_Technology | president | ""B.M. Reddy"")
(Acharya_Institute_of_Technology | wasGivenTheTechnicalCampusStatusBy | All_India_Council_for_Technical_Education)","(All India Council for Technical Education | location | Mumbai)
(Acharya Institute of Technology | location | Bangalore)
(Acharya Institute of Technology | address | ""Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090"")
(Bangalore | founder | Kempe Gowda I)
(Acharya Institute of Technology | president | B.M. Reddy)
(Acharya Institute of Technology | director | Dr. G.P. Prabhukumar)
(Acharya Institute of Technology | status | 'Technical campus status')
(Acharya Institute of Technology | grantedStatusBy | All India Council for Technical Education)"
1977,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Fellowship of the Ring, which is from the fantasy genre, was published on July 29, 1954 by George Allen & Unwin. The Fellowship of the Ring preceded The Two Towers.","(The_Fellowship_of_the_Ring | publisher | George_Allen_&_Unwin)
(The_Fellowship_of_the_Ring | literaryGenre | Fantasy_(genre))
(The_Fellowship_of_the_Ring | followedBy | The_Two_Towers)
(The_Fellowship_of_the_Ring | releaseDate | 1954-07-29)","(""The Fellowship of the Ring"" | ""type"" | ""fantasy genre"")
(""The Fellowship of the Ring"" | ""datePublished"" | ""July 29, 1954"")
(""The Fellowship of the Ring"" | ""publisher"" | ""George Allen & Unwin"")
(""The Fellowship of the Ring"" | ""followedBy"" | ""The Two Towers"")"
1978,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nord is an album released by the artist Year of No Light in the sludge metal genre.,"(Nord_(Year_of_No_Light_album) | genre | Sludge_metal)
(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light)","(""Nord"" | ""type"" | ""Album"")
(""Nord"" | ""releasedBy"" | ""Year of No Light"")
(""Nord"" | ""genre"" | ""Sludge metal"")
(""Year of No Light"" | ""type"" | ""Artist"")
(""Year of No Light"" | ""released"" | ""Nord"")
(""Sludge metal"" | ""type"" | ""Music genre"")
(""Sludge metal"" | ""genreOf"" | ""Nord"")"
1979,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy in Dijon, France has 2900 staff members that educate 9400 postgraduate students.","(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | campus | Dijon)
(University_of_Burgundy | city | Dijon)
(University_of_Burgundy | numberOfPostgraduateStudents | 9400)
(University_of_Burgundy | country | France)","(""University of Burgundy"" | ""location"" | ""Dijon, France"")
(""University of Burgundy"" | ""hasStaffMembers"" | 2900)
(""University of Burgundy"" | ""educates"" | ""9400 postgraduate students"")"
1980,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The English language movie, ""Super Capers"", coded ISO 639-2 eng, is distributed by Lionsgate and the company named Roadside Attractions which was founded in 2003.","(Super_Capers | distributor | Roadside_Attractions)
(Roadside_Attractions | foundingYear | 2003-01-01)
(Super_Capers | distributor | Lionsgate)
(Super_Capers | language | English_language)
(English_language | iso6392Code | eng)","(""Super Capers"" | language | ""English"")
(""Super Capers"" | languageCode | ""ISO 639-2 eng"")
(""Super Capers"" | distributor | ""Lionsgate"")
(""Super Capers"" | distributor | ""Roadside Attractions"")
(""Roadside Attractions"" | foundingYear | 2003)"
1981,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adolfo Suarez Madrid-Barajas Airport in Alcobendas is operated by ENAIRE, which is based in Madrid. The airport's runway length is 3500 and the runway name is 14L/32R.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 3500.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayName | ""14L/32R"")","(""Adolfo Suarez Madrid-Barajas Airport"" | location | ""Alcobendas"")
(""Adolfo Suarez Madrid-Barajas Airport"" | operator | ""ENAIRE"")
(""ENAIRE"" | location | ""Madrid"")
(""Adolfo Suarez Madrid-Barajas Airport"" | runwayLength | ""3500"")
(""Adolfo Suarez Madrid-Barajas Airport"" | runwayName | ""14L/32R"")"
1982,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina, born in German Empire on May 2, 1908 was an Israeli national, who died in Israel.","(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | deathPlace | Israel)
(Liselotte_Grschebina | nationality | Israel)
(Liselotte_Grschebina | birthPlace | German_Empire)","(""Liselotte Grschebina"" | ""birthPlace"" | ""German Empire"")
(""Liselotte Grschebina"" | ""birthDate"" | ""May 2, 1908"")
(""Liselotte Grschebina"" | ""nationality"" | ""Israeli"")
(""Liselotte Grschebina"" | ""deathPlace"" | ""Israel"")"
1983,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The University of Burgundy and its campus is located in the city of Dijon. It has 9400 postgraduate students.,"(University_of_Burgundy | campus | Dijon)
(University_of_Burgundy | city | Dijon)
(University_of_Burgundy | numberOfPostgraduateStudents | 9400)","(University of Burgundy | location | Dijon)
(University of Burgundy | hasCampus | Dijon)
(University of Burgundy | numberOfPostgraduateStudents | 9400)"
1984,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Expect a Miracle an instrumental music genre by Brian Kelly has a runtime of 54:56. It was preceded by Pools of Light by Brian Kelly.,"(Expect_a_Miracle | artist | Brian_Kelly_(composer_&_pianist))
(Expect_a_Miracle | runtime | 54.56)
(Expect_a_Miracle | precededBy | Pools_of_Light_(Brian_Kelly_album))
(Expect_a_Miracle | genre | Instrumental_music)","(""Expect a Miracle"" | type | ""instrumental music genre"")
(""Expect a Miracle"" | creator | ""Brian Kelly"")
(""Expect a Miracle"" | runtime | ""54:56"")
(""Pools of Light"" | creator | ""Brian Kelly"")
(""Expect a Miracle"" | precededBy | ""Pools of Light"")"
1985,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Turkey speaks the Turkish language.,(Turkey | language | Turkish_language),(Turkey | language | Turkish)
1986,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Jamie Lawrence composed the music for the movie ""Death on a Factory Farm"".",(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence),"(""Jamie Lawrence"" | ""type"" | ""Person"")
(""Jamie Lawrence"" | ""occupation"" | ""composer"")

(""Death on a Factory Farm"" | ""type"" | ""Film"")
(""Death on a Factory Farm"" | ""composer"" | ""Jamie Lawrence"")"
1987,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The capital of the Kingdom of England was Winchester.,(Kingdom_of_England | capital | Winchester),"(""Kingdom of England"" | ""capital"" | ""Winchester"")"
1988,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Anatole de Grunwald wrote and produced the 89 minute film English Without Tears which had Nicholas Brodszky as the music composer. Terence Rattigan was also a writer for the movie which had Bernard Knowles as the cinematography.,"(English_Without_Tears | musicComposer | Nicholas_Brodszky)
(English_Without_Tears | producer | Anatole_de_Grunwald)
(English_Without_Tears | writer | Anatole_de_Grunwald)
(English_Without_Tears | cinematography | Bernard_Knowles)
(English_Without_Tears | writer | Terence_Rattigan)
(English_Without_Tears | runtime | 89.0)","(""Anatole de Grunwald"" | ""wrote"" | ""English Without Tears"")
(""Anatole de Grunwald"" | ""produced"" | ""English Without Tears"")
(""English Without Tears"" | ""runtime"" | ""89 minutes"")
(""English Without Tears"" | ""musicComposer"" | ""Nicholas Brodszky"")
(""Terence Rattigan"" | ""wrote"" | ""English Without Tears"")
(""English Without Tears"" | ""cinematography"" | ""Bernard Knowles"")"
1989,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Trane is located in Swords, Dublin.","(Trane | location | Swords,_Dublin)","(""Trane"" | ""location"" | ""Swords, Dublin"")"
1990,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Cookie and Bionico, the latter of which comes from Jalisco, are desserts found in Mexico where its inhabitants, Mexicans, use the Mexican peso as currency.","(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Dessert | dishVariation | Cookie)
(Bionico | region | Jalisco)
(Bionico | country | Mexico)","(""Cookie"" | isA | ""Dessert"")
(""Bionico"" | isA | ""Dessert"")
(""Bionico"" | origin | ""Jalisco"")
(""Bionico"" | isIn | ""Mexico"")
(""Cookie"" | isIn | ""Mexico"")
(""Jalisco"" | isIn | ""Mexico"")
(""Mexicans"" | liveIn | ""Mexico"")
(""Mexicans"" | usesCurrency | ""Mexican peso"")"
1991,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The birth name of Cecil Parker is actually Cecil Schwabe.,(Cecil_Parker | birthName | Cecil Schwabe),"(""Cecil Parker"" | ""birth name"" | ""Cecil Schwabe"")"
1992,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy, whose nationality is Turkish, was born in Turkey. He resides in Turkey in Istanbul.","(Nurhan_Atasoy | residence | Istanbul)
(Nurhan_Atasoy | birthPlace | Turkey)
(Nurhan_Atasoy | nationality | Turkish_people)
(Nurhan_Atasoy | residence | Turkey)","(""Nurhan Atasoy"" | ""nationality"" | ""Turkish"")
(""Nurhan Atasoy"" | ""birthPlace"" | ""Turkey"")
(""Nurhan Atasoy"" | ""residence"" | ""Istanbul, Turkey"")"
1993,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Super Capers is a 98 minute long movie edited by Stacy Katzman , starring Michael Rooker and Tom Sizemore.","(Super_Capers | editing | Stacy_Katzman)
(Super_Capers | starring | Michael_Rooker)
(Super_Capers | starring | Tom_Sizemore)
(Super_Capers | runtime | 98.0)","(Super Capers | length | 98 minutes)
(Super Capers | editor | Stacy Katzman)
(Super Capers | starring | Michael Rooker)
(Super Capers | starring | Tom Sizemore)"
1994,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Founded on 1920-08-16, Chinabank is located in the Philippines, a country that follows Philippine Standard Time.","(Chinabank | location | Philippines)
(Philippines | timeZone | Philippine_Standard_Time)
(Chinabank | foundingDate | 1920-08-16)","(""Chinabank"" | ""foundingDate"" | ""1920-08-16"")
(""Chinabank"" | ""location"" | ""Philippines"")
(""Philippines"" | ""timeZone"" | ""Philippine Standard Time"")"
1995,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Lionsgate is the distributor of Super Capers.,(Super_Capers | distributor | Lionsgate),"(""Lionsgate"" | ""distributorOf"" | ""Super Capers"")"
1996,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Baku Turkish Martyrs' Memorial was designed by Hüseyin Bütüner and Hilmi Güner and is located in Azerbaijan.,"(Baku_Turkish_Martyrs\'_Memorial | designer | ""Hüseyin Bütüner and Hilmi Güner"")
(""Baku_Turkish_Martyrs'_Memorial | location | Azerbaijan"")","(""Baku Turkish Martyrs' Memorial"" | ""designed by"" | ""Hüseyin Bütüner"")
(""Baku Turkish Martyrs' Memorial"" | ""designed by"" | ""Hilmi Güner"")
(""Baku Turkish Martyrs' Memorial"" | ""location"" | ""Azerbaijan"")"
1997,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Published on July 29, 1954, The Fellowship of the Ring is a novel belonging to the Fantasy genre.","(The_Fellowship_of_the_Ring | literaryGenre | Fantasy_(genre))
(The_Fellowship_of_the_Ring | releaseDate | 1954-07-29)","(""The Fellowship of the Ring"" | ""datePublished"" | ""July 29, 1954"")
(""The Fellowship of the Ring"" | ""type"" | ""novel"")
(""The Fellowship of the Ring"" | ""genre"" | ""Fantasy"")"
1998,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Mermaid is a pop rock song by the band Train.,(Mermaid_(Train_song) | genre | Pop_rock),"(""Mermaid"" | type | ""pop rock song"")
(""Mermaid"" | ""by"" | ""Train"")
(""Train"" | ""performs"" | ""Mermaid"")"
1999,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bedford Aerodrome, in Thurleigh, has served the Bedford Autodrome and the ICAO location identifier for the Aerodrome is EGBF.","(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | location | Thurleigh)
(Bedford_Aerodrome | icaoLocationIdentifier | EGBF)","(""Bedford Aerodrome"" | ""location"" | ""Thurleigh"")
(""Bedford Aerodrome"" | ""serves"" | ""Bedford Autodrome"")
(""Bedford Aerodrome"" | ""hasICAOlocationIdentifier"" | ""EGBF"")"
2000,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Estádio Municipal Coaracy da Mata Fonseca is the name of the ground of Agremiação Sportiva Arapiraquense in Arapiraca. Agremiacao Sportiva Arapiraquense has 17000 members & played in the Campeonato Brasileiro Série C league, where the Vila Nova Futebol Clube were champions.","(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Campeonato_Brasileiro_Série_C | champions | Vila_Nova_Futebol_Clube)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(""Estádio Municipal Coaracy da Mata Fonseca"" | name of the ground of | ""Agremiação Sportiva Arapiraquense"")
(""Agremiação Sportiva Arapiraquense"" | located in | ""Arapiraca"")
(""Agremiação Sportiva Arapiraquense"" | has members | 17000)
(""Agremiação Sportiva Arapiraquense"" | played in | ""Campeonato Brasileiro Série C"")
(""Vila Nova Futebol Clube"" | were champions in | ""Campeonato Brasileiro Série C"")"
2001,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brandon Carter (born in England) graduated from the University of Cambridge and studied in the field of general relativity. His doctoral advisor is Dennis William Sciama .,"(Brandon_Carter | professionalField | General_relativity)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)
(Brandon_Carter | birthPlace | England)
(Brandon_Carter | almaMater | University_of_Cambridge)","(Brandon Carter | birthPlace | England)
(Brandon Carter | almaMater | University of Cambridge)
(Brandon Carter | fieldOfStudy | general relativity)
(Brandon Carter | doctoralAdvisor | Dennis William Sciama)"
2002,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Eric Flint, who wrote 1634: The Bavarian Crisis, was born in Burbank California.","(Eric_Flint | birthPlace | Burbank,_California)
(1634:_The_Bavarian_Crisis | author | Eric_Flint)","(Eric Flint | type | Person)
(Eric Flint | birthPlace | Burbank, California)
(Eric Flint | wrote | 1634: The Bavarian Crisis)
(1634: The Bavarian Crisis | author | Eric Flint)"
2003,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The 17068.8 millimetres long ALCO RS-3 has a four-stroke engine.,"(ALCO_RS-3 | engine | Four-stroke_engine)
(ALCO_RS-3 | length | 17068.8 (millimetres))","(""ALCO RS-3"" | ""length"" | ""17068.8 millimetres"")
(""ALCO RS-3"" | ""has"" | ""four-stroke engine"")"
2004,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Hypermarcas is a company in the pharmaceuticals industry. It was founded on January 1, 2001, sells healthcare products and produces cosmetics.","(Hypermarcas | foundingDate | 2001-01-01)
(Hypermarcas | product | Healthcare)
(Hypermarcas | product | Cosmetics)
(Hypermarcas | industry | Pharmaceuticals)","(""Hypermarcas"" | ""type"" | ""Company"")
(""Hypermarcas"" | ""industry"" | ""pharmaceuticals"")
(""Hypermarcas"" | ""foundingDate"" | ""2001-01-01"")
(""Hypermarcas"" | ""product"" | ""healthcare products"")
(""Hypermarcas"" | ""product"" | ""cosmetics"")"
2005,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The BBC Broadcasting House is located in London. The BBC show, Bananaman was created by Steve Bright and starred Bill Oddie. Bananaman aired on October 3, 1983.","(BBC | city | Broadcasting_House)
(Bananaman | starring | Bill_Oddie)
(Bananaman | creator | Steve_Bright)
(Bananaman | broadcastedBy | BBC)
(Bananaman | firstAired | ""1983-10-03"")","(BBC Broadcasting House | locatedIn | London)
(Bananaman | createdBy | Steve Bright)
(Bananaman | starred | Bill Oddie)
(Bananaman | airedOn | ""October 3, 1983"")"
2006,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The rock music album Bootleg Series Volume 1: The Quine Tapes was produced by The Velvet Underground and has a runtime of 230.05 minutes. The Velvet Underground previously produced the album Squeeze.,"(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | genre | Rock_music)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | precededBy | Squeeze_(The_Velvet_Underground_album))","(""Bootleg Series Volume 1: The Quine Tapes"" | ""producer"" | ""The Velvet Underground"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""runtime"" | 230.05)
(""The Velvet Underground"" | ""producer of"" | ""Bootleg Series Volume 1: The Quine Tapes"")
(""The Velvet Underground"" | ""producer of"" | ""Squeeze"")
(""Squeeze"" | ""producer"" | ""The Velvet Underground"")"
2007,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nurhan Atasoy has Turkish nationality and resides in Turkey.,"(Nurhan_Atasoy | nationality | Turkish_people)
(Nurhan_Atasoy | residence | Turkey)","(""Nurhan Atasoy"" | ""has nationality"" | ""Turkey""),
(""Nurhan Atasoy"" | ""resides in"" | ""Turkey"")"
2008,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala city, a part of Morelos with population density and population of 1604.0 and 1,777,539 respectively, falls into UTC offset -6 time zone. Ciudad Ayala uses a type of government called council-manager government and City Manager as one of the leaders.","(Ciudad_Ayala | populationMetro | 1777539)
(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | type | City)
(Ciudad_Ayala | populationDensity | 1604.0)
(Ciudad_Ayala | governmentType | Council-manager_government)
(Ciudad_Ayala | utcOffset | −6)
(Ciudad_Ayala | isPartOf | Morelos)","(""Ciudad Ayala"" | ""type"" | ""City"")
(""Ciudad Ayala"" | ""part of"" | ""Morelos"")
(""Ciudad Ayala"" | ""populationDensity"" | 1604.0)
(""Ciudad Ayala"" | ""populationTotal"" | 1777539)
(""Ciudad Ayala"" | ""utcOffset"" | -6)
(""Ciudad Ayala"" | ""governmentType"" | ""council-manager government"")
(""Ciudad Ayala"" | ""leaderTitle"" | ""City Manager"")"
2009,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala is a part of Morelos which is in the country of Mexico. The population density of Ciudad Ayala is 1604.0, the elevation above the sea level is 1147.0 and the time zone is Pacific Daylight Time. One of the leaders of Ciudad Ayala is the City Manager.","(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | country | Mexico)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)
(Ciudad_Ayala | timeZone | Pacific_Daylight_Time)
(Ciudad_Ayala | populationDensity | 1604.0)","(""Ciudad Ayala"" | ""part of"" | ""Morelos""),
(""Morelos"" | ""part of"" | ""Mexico""),
(""Ciudad Ayala"" | ""populationDensity"" | 1604.0),
(""Ciudad Ayala"" | ""elevation"" | 1147.0),
(""Ciudad Ayala"" | ""timeZone"" | ""Pacific Daylight Time""),
(""Ciudad Ayala"" | ""leader"" | ""City Manager"")."
2010,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Harry Carey is the actor and director of the movie McVeagh of the South Seas.,(McVeagh_of_the_South_Seas | director | Harry_Carey_(actor_born_1878)),"(""Harry Carey"" | ""type"" | ""Actor""),
(""Harry Carey"" | ""type"" | ""Director""),
(""Harry Carey"" | ""directed"" | ""McVeagh of the South Seas""),
(""Harry Carey"" | ""actedIn"" | ""McVeagh of the South Seas""),
(""McVeagh of the South Seas"" | ""type"" | ""Movie""),
(""McVeagh of the South Seas"" | ""director"" | ""Harry Carey""),
(""McVeagh of the South Seas"" | ""actor"" | ""Harry Carey"")."
2011,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng was a crew member on Shenzhou 6 and also took part in the Shenzhou 10 mission.,"(Nie_Haisheng | mission | Shenzhou_10)
(Nie_Haisheng | mission | Shenzhou_6)","(""Nie Haisheng"" | ""job title"" | ""crew member"")
(""Nie Haisheng"" | ""participated in"" | ""Shenzhou 6"")
(""Nie Haisheng"" | ""participated in"" | ""Shenzhou 10"")"
2012,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aleksandr Prudnikov was born on February 2,1989 and plays for FC Amkar Perm, which is managed by Gadzhi Gadzhiyev. He is also in the FC Terek Grozny club which is based at Grozny.","(FC_Terek_Grozny | ground | Grozny)
(Aleksandr_Prudnikov | currentclub | FC_Amkar_Perm)
(FC_Amkar_Perm | manager | Gadzhi_Gadzhiyev)
(Aleksandr_Prudnikov | club | FC_Terek_Grozny)
(Aleksandr_Prudnikov | birthDate | 1989-02-24)","(Aleksandr Prudnikov | birthDate | ""February 2,1989"")
(Aleksandr Prudnikov | playsFor | FC Amkar Perm)
(FC Amkar Perm | managedBy | Gadzhi Gadzhiyev)
(Aleksandr Prudnikov | memberOf | FC Terek Grozny)
(FC Terek Grozny | location | Grozny)"
2013,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Death on a Factory Farm, produced by Sarah Teale, has a duration of 83 minutes.","(Death_on_a_Factory_Farm | runtime | 83.0)
(Death_on_a_Factory_Farm | producer | Sarah_Teale)","(""Death on a Factory Farm"" | ""producer"" | ""Sarah Teale""),
(""Death on a Factory Farm"" | ""duration"" | 83)"
2014,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Train song Mermaid was produced by the production team Espionage and released under the record label Columbia Records.,"(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | producer | Espionage_(production_team))","(""Mermaid"" | ""type"" | ""song"")
(""Mermaid"" | ""by"" | ""Train"")
(""Mermaid"" | ""producedBy"" | ""Espionage"")
(""Mermaid"" | ""releasedBy"" | ""Columbia Records"")
(""Espionage"" | ""type"" | ""production team"")
(""Espionage"" | ""produced"" | ""Mermaid"")
(""Columbia Records"" | ""type"" | ""record label"")
(""Columbia Records"" | ""released"" | ""Mermaid"")"
2015,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument, erected in 2000, is located in Adams County, Pennsylvania, in the Gettysburg municipality. It is categorized as a contributing property. To the west of Adams County is Franklin County, Pennsylvania.","(Adams_County,_Pennsylvania | hasToItsWest | Franklin_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | municipality | Gettysburg,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""11th Mississippi Infantry Monument"" | ""date of establishment"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""is located in"" | ""Adams County"")
(""11th Mississippi Infantry Monument"" | ""is located in"" | ""Pennsylvania"")
(""11th Mississippi Infantry Monument"" | ""is located in"" | ""Gettysburg municipality"")
(""11th Mississippi Infantry Monument"" | ""is part of"" | ""contributing property"")
(""Adams County"" | ""is located in"" | ""Pennsylvania"")
(""Adams County"" | ""adjacent to"" | ""Franklin County"")
(""Franklin County"" | ""is located in"" | ""Pennsylvania"")"
2016,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The self-produced Year of No Light album Nord was released on the date 2006-09-06 and was followed by the album Live at Roadburn 2008. Nord was released on the Crucial Blast and E-Vinyl record labels and its total runtime was 58.41 minutes.,"(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | artist | Year_of_No_Light)
(Nord_(Year_of_No_Light_album) | recordLabel | Crucial_Blast)
(Nord_(Year_of_No_Light_album) | recordLabel | E-Vinyl)
(Nord_(Year_of_No_Light_album) | runtime | 58.41)","(""Year of No Light album Nord"" | ""producer"" | ""Year of No Light"")
(""Year of No Light album Nord"" | ""release date"" | ""2006-09-06"")
(""Year of No Light album Nord"" | ""followed by"" | ""album Live at Roadburn 2008"")
(""Year of No Light album Nord"" | ""released on label"" | ""Crucial Blast"")
(""Year of No Light album Nord"" | ""released on label"" | ""E-Vinyl"")
(""Year of No Light album Nord"" | ""total runtime"" | 58.41)"
2017,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",MotorSport Vision was founded by Jonathan Palmer.,(MotorSport_Vision | foundedBy | Jonathan_Palmer),"(""MotorSport Vision"" | ""founder"" | ""Jonathan Palmer"")"
2018,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bionico is a dessert food found in Mexico in the region of Jalisco. Another type of dessert is a cookie. In Mexico, the national currency is the peso and the local people are called Mexicans.","(Mexico | currency | Mexican_peso)
(Mexico | demonym | Mexicans)
(Bionico | course | Dessert)
(Dessert | dishVariation | Cookie)
(Bionico | region | Jalisco)
(Bionico | country | Mexico)","(Bionico | type | ""dessert food"")
(Bionico | locationFound | ""Mexico"")
(Bionico | regionFound | ""Jalisco"")
(cookie | type | ""dessert"")
(Mexico | hasCurrency | ""peso"")
(Mexico | hasLocalPeople | ""Mexicans"")"
2019,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson, born in Darlington in the Kingdom of England on 1726-01-01, was a citizen of the Kingdom of England who died on February 18, 1776.","(Lady_Anne_Monson | birthPlace | Darlington)
(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | deathDate | 1776-02-18)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | nationality | Kingdom_of_England)","(Lady Anne Monson | birthPlace | Darlington)
(Lady Anne Monson | birthDate | 1726-01-01)
(Lady Anne Monson | deathDate | 1776-02-18)
(Lady Anne Monson | citizenship | Kingdom of England)"
2020,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Grigory Neujmin, who was born on 1886-01-01 in Tbilisi, discovered the asteroid 1147 Stavropolis, which has a periapsis of 260855000000.0 and orbital period of 1249.6 days.","(1147_Stavropolis | discoverer | Grigory_Neujmin)
(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)
(Grigory_Neujmin | birthPlace | Tbilisi)
(Grigory_Neujmin | birthDate | 1886-01-01)","(Grigory Neujmin | date of birth | 1886-01-01)
(Grigory Neujmin | place of birth | Tbilisi)
(Grigory Neujmin | discovered | 1147 Stavropolis)
(1147 Stavropolis | has periapsis | 260855000000.0)
(1147 Stavropolis | has orbital period | 1249.6 days)"
2021,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The pop rock song Mermaid by Train has a total runtime of three minutes and sixteen seconds.,"(Mermaid_(Train_song) | genre | Pop_rock)
(Mermaid_(Train_song) | runtime | 3.16)","(""Mermaid"" | ""type"" | ""pop rock song"")
(""Mermaid"" | ""by"" | ""Train"")
(""Mermaid"" | ""hasTotalRuntime"" | ""three minutes and sixteen seconds"")"
2022,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Lady Anne Monson was born in the town of Darlington of the United Kingdom.,"(Lady_Anne_Monson | birthPlace | Darlington)
(Darlington | country | United_Kingdom)","(""Lady Anne Monson"" | ""birthPlace"" | ""Darlington"")
(""Darlington"" | ""isPartOf"" | ""the United Kingdom"")
(""Lady Anne Monson"" | ""country"" | ""the United Kingdom"")
(""the United Kingdom"" | ""hasResident"" | ""Lady Anne Monson"")"
2023,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The chronological order of these albums that came out are first Love American Style, Let It Breed and Turn Me On (punk blues album).","(Turn_Me_On_(album) | genre | Punk_blues)
(Turn_Me_On_(album) | precededBy | Let_It_Breed)
(Let_It_Breed | precededBy | Love_American_Style_(album))","(""Love American Style"" | ""followedBy"" | ""Let It Breed"")
(""Let It Breed"" | ""followedBy"" | ""Turn Me On (punk blues album)"")
(""Love American Style"" | ""albumGenre"" | ""Literal:Unknown"")
(""Let It Breed"" | ""albumGenre"" | ""Literal:Unknown"")
(""Turn Me On (punk blues album)"" | ""albumGenre"" | ""punk blues"")"
2024,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Bedford Aerodrome is run by MotorSport Vision, based in Fawkham.","(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(MotorSport_Vision | city | Fawkham)","(""Bedford Aerodrome"" | ""is run by"" | ""MotorSport Vision"")
(""MotorSport Vision"" | ""based in"" | ""Fawkham"")"
2025,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","MotorSport Vision is the operating organisation for Bedford Aerodrome in Thurleigh, which serves the Bedford Autodrome. The aerodrome has a runway called 08/26 which is 1095 long.","(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | runwayLength | 1095.0)
(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | location | Thurleigh)
(Bedford_Aerodrome | runwayName | ""08/26"")","(MotorSport Vision | type | operating organisation)
(MotorSport Vision | operates | Bedford Aerodrome)
(Bedford Aerodrome | location | Thurleigh)
(Bedford Aerodrome | serves | Bedford Autodrome)
(Bedford Aerodrome | hasPart | 08/26)
(08/26 | type | runway)
(08/26 | partOf | Bedford Aerodrome)
(08/26 | length | 1095)"
2026,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The album Turn Me On was produced by Wharton Tiers.,(Turn_Me_On_(album) | producer | Wharton_Tiers),"(""Turn Me On"" | type | ""album"")
(""Turn Me On"" | ""produced by"" | ""Wharton Tiers"")
(""Wharton Tiers"" | ""producer of"" | ""Turn Me On"")"
2027,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Hypermarcas (a pharmaceutical industry) is located in Sao Paulo, Brazil, a country led formerly by Michel Temer and now by Carmen Lucia.","(Hypermarcas | industry | Pharmaceuticals)
(Hypermarcas | location | São_Paulo)
(Hypermarcas | location | Brazil)
(Brazil | leader | Michel_Temer)
(Brazil | leader | Cármen_Lúcia)","(""Hypermarcas"" | ""type"" | ""pharmaceutical industry"")
(""Hypermarcas"" | ""location"" | ""Sao Paulo"")
(""Sao Paulo"" | ""is in"" | ""Brazil"")
(""Brazil"" | ""former leader"" | ""Michel Temer"")
(""Brazil"" | ""current leader"" | ""Carmen Lucia"")"
2028,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Lady Anne Monson, born January 1, 1726 in the Kingdom of England, was a professional botanist and the wife of George Monson.","(Lady_Anne_Monson | birthDate | 1726-01-01)
(Lady_Anne_Monson | birthPlace | Kingdom_of_England)
(Lady_Anne_Monson | spouse | George_Monson)
(Lady_Anne_Monson | professionalField | Botany)","(""Lady Anne Monson"" | ""birthDate"" | ""January 1, 1726"")
(""Lady Anne Monson"" | ""birthPlace"" | ""Kingdom of England"")
(""Lady Anne Monson"" | ""occupation"" | ""botanist"")
(""Lady Anne Monson"" | ""spouse"" | ""George Monson"")"
2029,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Liselotte Grschebina was born in Karlsruhe on May 2nd, 1908. She died on June 14, 1994 in Israel.","(Liselotte_Grschebina | birthPlace | Karlsruhe)
(Liselotte_Grschebina | birthDate | 1908-05-02)
(Liselotte_Grschebina | deathDate | 1994-06-14)
(Liselotte_Grschebina | deathPlace | Israel)","(Liselotte Grschebina | birthPlace | Karlsruhe)
(Liselotte Grschebina | birthDate | May 2, 1908)
(Liselotte Grschebina | deathPlace | Israel)
(Liselotte Grschebina | deathDate | June 14, 1994)"
2030,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","With an orbital period of 1249.6 days, an apoapsis of 418476000000.0.and a rotation period of 20378.5, 1147 Stavropolis was discovered by Grigory Neujmin. Neujmin died in December of 1946.","(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | rotationPeriod | 20378.5)
(1147_Stavropolis | discoverer | Grigory_Neujmin)
(Grigory_Neujmin | deathDate | 1946-12-17)
(1147_Stavropolis | apoapsis | 418476000000.0)","(""1147 Stavropolis"" | ""orbital period"" | ""1249.6 days"")
(""1147 Stavropolis"" | ""apoapsis"" | ""418476000000.0"")
(""1147 Stavropolis"" | ""rotation period"" | ""20378.5"")
(""1147 Stavropolis"" | ""discoveredBy"" | ""Grigory Neujmin"")
(""Grigory Neujmin"" | ""deathDate"" | ""December 1946"")"
2031,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy has 27400 students, and 16800 are undergraduate students.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | numberOfStudents | 27400)","(""University of Burgundy"" | ""totalStudents"" | ""27400"")
(""University of Burgundy"" | ""undergraduateStudents"" | ""16800"")"
2032,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Death on a Factory Farm, which has a running time of 83.0, was produced by Sarah Teale.","(Death_on_a_Factory_Farm | runtime | 83.0)
(Death_on_a_Factory_Farm | producer | Sarah_Teale)","(""Death on a Factory Farm"" | ""has running time"" | 83.0)
(""Death on a Factory Farm"" | ""was produced by"" | ""Sarah Teale"")"
2033,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Train's Mermaid is a pop rock song, of which a subgenre is indie pop.","(Mermaid_(Train_song) | genre | Pop_rock)
(Pop_rock | musicSubgenre | Indie_pop)","(""Train's Mermaid"" | ""type"" | ""pop rock song"")
(""pop rock song"" | ""subgenre"" | ""indie pop"")
(""Train's Mermaid"" | ""subgenre"" | ""indie pop"")"
2034,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Agremiação Sportiva Arapiraquense competed in the Campeonato Brasileiro Série C league in 2015, and the club has 17000 members. The Agremiação Sportiva Arapiraquense's playground is the Estadio Municipal Coaracy da Mata Fonseca in Arapiraca.","(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | season | 2015)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(""Agremiação Sportiva Arapiraquense"" | ""competed in"" | ""Campeonato Brasileiro Série C"")
(""Agremiação Sportiva Arapiraquense"" | ""year of participation"" | ""2015"")
(""Agremiação Sportiva Arapiraquense"" | ""has members"" | ""17000"")
(""Agremiação Sportiva Arapiraquense"" | ""has playground"" | ""Estadio Municipal Coaracy da Mata Fonseca"")
(""Estadio Municipal Coaracy da Mata Fonseca"" | ""located in"" | ""Arapiraca"")"
2035,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Bedford Aerodrome serves the Bedford Autodrome. It has a runway named 08/26 and its runways are made of concrete.,"(Bedford_Aerodrome | cityServed | Bedford_Autodrome)
(Bedford_Aerodrome | runwayName | ""08/26"")
(Bedford_Aerodrome | runwaySurfaceType | Concrete)","(""Bedford Aerodrome"" | ""serves"" | ""Bedford Autodrome""),
(""Bedford Aerodrome"" | ""hasRunway"" | ""08/26""),
(""Bedford Aerodrome"" | ""runwaySurface"" | ""concrete""),
(""08/26"" | ""isPartOf"" | ""Bedford Aerodrome""),
(""08/26"" | ""madeOf"" | ""concrete"")"
2036,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Aleksandr Prudnikov, born 1989-02-24, currently plays for FC Amkar Perm. Aleksandr is a member of the youth side of FC Spartak Moscow, with their home being the Otkrytiye Arena.","(Aleksandr_Prudnikov | club | FC_Amkar_Perm)
(Aleksandr_Prudnikov | birthDate | 1989-02-24)
(Aleksandr_Prudnikov | youthclub | FC_Spartak_Moscow)
(FC_Spartak_Moscow | ground | Otkrytiye_Arena)","(""Aleksandr Prudnikov"" | ""birthDate"" | ""1989-02-24"")
(""Aleksandr Prudnikov"" | ""playsFor"" | ""FC Amkar Perm"") 
(""Aleksandr Prudnikov"" | ""memberOf"" | ""youth side FC Spartak Moscow"")
(""youth side FC Spartak Moscow"" | ""homeArena"" | ""Otkrytiye Arena"")"
2037,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bootleg Series Volume 1: The Quine Tapes is by The Velvet Underground was recorded under the Polydor Records record label where the record label is Universal Music Group.,"(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Polydor_Records)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Universal_Music_Group)","(""Bootleg Series Volume 1: The Quine Tapes"" | ""creator"" | ""The Velvet Underground""),
(""Bootleg Series Volume 1: The Quine Tapes"" | ""recordLabel"" | ""Polydor Records""),
(""Polydor Records"" | ""parentOrganization"" | ""Universal Music Group"")"
2038,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was born on November 18th, 1923 in New Hampshire. He died in California, whose Senator was Dianne Feinstein.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)
(California | senators | Dianne_Feinstein)","('Alan Shepard' | 'birthDate' | '1923-11-18')
('Alan Shepard' | 'birthPlace' | 'New Hampshire')
('Alan Shepard' | 'deathPlace' | 'California')
('California' | 'senator' | 'Dianne Feinstein')"
2039,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument was established in the year 2000 in Adams County, Pennsylvania which has Frederick County, Maryland to its southwest and Carroll County, Maryland to its southeast. The monument is categorized as a Contributing Property.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSouthwest | Frederick_County,_Maryland)
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""11th Mississippi Infantry Monument"" | ""establishmentYear"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""locatedIn"" | ""Adams County"")
(""Adams County"" | ""isIn"" | ""Pennsylvania"")
(""Adams County"" | ""hasBorderWith"" | ""Frederick County"")
(""Frederick County"" | ""isIn"" | ""Maryland"")
(""Adams County"" | ""hasBorderWith"" | ""Carroll County"")
(""Carroll County"" | ""isIn"" | ""Maryland"")
(""11th Mississippi Infantry Monument"" | ""isA"" | ""Contributing Property"")"
2040,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The film ""English Without Tears"" directed by Harold French and edited by Alan Jaggs was released on 07-28-1944 with a running time of 89 minutes. The film was produced by Anatole de Grunwald and cinematographed by Bernard Knowles; the music was composed by Nicholas Brodszky.","(English_Without_Tears | runtime | 89.0)
(English_Without_Tears | musicComposer | Nicholas_Brodszky)
(English_Without_Tears | releaseDate | 1944-07-28)
(English_Without_Tears | director | Harold_French)
(English_Without_Tears | editing | Alan_Jaggs)
(English_Without_Tears | producer | Anatole_de_Grunwald)
(English_Without_Tears | cinematography | Bernard_Knowles)","(""English Without Tears"" | directed by | Harold French)
(""English Without Tears"" | edited by | Alan Jaggs)
(""English Without Tears"" | release date | 07-28-1944)
(""English Without Tears"" | running time | 89 minutes)
(""English Without Tears"" | produced by | Anatole de Grunwald)
(""English Without Tears"" | cinematographed by | Bernard Knowles)
(""English Without Tears"" | music composed by | Nicholas Brodszky)"
2041,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Piotr Hallmann was born in Gdynia, Poland, which has a UTC offset of +2.","(Piotr_Hallmann | birthPlace | Gdynia,_Poland)
(Gdynia,_Poland | utcOffset | +2)","(""Piotr Hallmann"" | ""birthPlace"" | ""Gdynia"")
(""Gdynia"" | ""locatedIn"" | ""Poland"")
(""Gdynia"" | ""utcOffset"" | ""+2"")"
2042,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva, a United States citizen is a mathematician working in the field of mathematical optimization who developed a theory influenced by Andrzej Piotr Ruszczyński. He was born on January 1, 1958 with his residence in New Jersey.","(Darinka_Dentcheva | influencedBy | Andrzej_Piotr_Ruszczyński)
(Darinka_Dentcheva | citizenship | United_States)
(Darinka_Dentcheva | birthDate | 1958-01-01)
(Darinka_Dentcheva | professionalField | Mathematical_optimization)
(Darinka_Dentcheva | residence | New_Jersey)","(Darinka Dentcheva | nationality | United States)
(Darinka Dentcheva | profession | mathematician)
(Darinka Dentcheva | fieldOfWork | mathematical optimization)
(Darinka Dentcheva | influencedBy | Andrzej Piotr Ruszczyński)
(Andrzej Piotr Ruszczyński | birthDate | January 1, 1958)
(Andrzej Piotr Ruszczyński | residence | New Jersey)"
2043,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",1299 of the 27400 students at the University of Burgundy are doctoral students.,"(University_of_Burgundy | numberOfStudents | 27400)
(University_of_Burgundy | numberOfDoctoralStudents | 1299)","(""University of Burgundy"" | ""totalStudents"" | ""27400"")
(""University of Burgundy"" | ""doctoralStudents"" | ""1299"")"
2044,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Pontiac Rageous is manufactured by automobile producer Pontiac.,"(Pontiac_Rageous | manufacturer | Pontiac)
(Pontiac | product | Automobile)","(""Pontiac Rageous"" | ""is manufactured by"" | ""Pontiac"")
(""Pontiac"" | ""automobile producer"" | ""Pontiac Rageous"")"
2045,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",English Without Tears was written by Terence Rattigan (IMDb ID 0711905) and Anatole de Grunwald. The film's cinematography was done by Bernard Knowles.,"(English_Without_Tears | cinematography | Bernard_Knowles)
(Terence_Rattigan | imdbId | 0711905)
(English_Without_Tears | writer | Anatole_de_Grunwald)
(English_Without_Tears | writer | Terence_Rattigan)","(""English Without Tears"" | ""writer"" | ""Terence Rattigan"")
(""Terence Rattigan"" | ""IMDb_ID"" | literal:0711905)
(""English Without Tears"" | ""writer"" | ""Anatole de Grunwald"")
(""English Without Tears"" | ""cinematography"" | ""Bernard Knowles"")"
2046,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",J.R.R. Tolkien is the author of The Hobbit.,(The_Hobbit | author | J._R._R._Tolkien),"(J.R.R. Tolkien | type | Author)
(J.R.R. Tolkien | title | ""J.R.R. Tolkien"")
(The Hobbit | type | Book)
(The Hobbit | title | ""The Hobbit"")
(J.R.R. Tolkien | author | The Hobbit)"
2047,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The architect of Alan B Miller Hall in Virginia is Robert A. M. Stern.,"(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | location | Virginia)","(Alan B Miller Hall | location | Virginia)
(Alan B Miller Hall | architect | Robert A. M. Stern)"
2048,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument in Adams County, Pennsylvania, which was established in the year 2000. Frederick County, Maryland is located to the southwest of Adams County, Pennsylvania.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSouthwest | Frederick_County,_Maryland)","(""11th Mississippi Infantry Monument"" | ""location"" | ""Adams County, Pennsylvania"")
(""11th Mississippi Infantry Monument"" | ""establishmentYear"" | 2000)
(""Frederick County, Maryland"" | ""relativeLocation"" | ""southwest of Adams County, Pennsylvania"")"
2049,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Professional photographer, Liselotte Grschebina went to the school of Applied Arts in Stuttgart.","(Liselotte_Grschebina | training | School_of_Applied_Arts_in_Stuttgart)
(Liselotte_Grschebina | professionalField | Photographer)","(Liselotte Grschebina | profession | ""Professional photographer"")
(Liselotte Grschebina | went to | School of Applied Arts in Stuttgart)"
2050,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Felipe Gozon is the key person at GMA New Media, a mass media company that offers products such as mobile apps. GMA New Media was founded on January 1, 2000 and is located inside GMA Network Center in the Philippines.","(GMA_New_Media | foundingDate | 2000-01-01)
(GMA_New_Media | product | Mobile_Applications)
(GMA_New_Media | industry | Mass_Media)
(GMA_New_Media | keyPerson | Felipe_Gozon)
(GMA_New_Media | location | GMA_Network_Center)
(GMA_New_Media | location | Philippines)","(Felipe Gozon | key person at | GMA New Media)
(GMA New Media | offers | mobile apps)
(GMA New Media | type | mass media company)
(GMA New Media | founded on | literal:January 1, 2000)
(GMA New Media | location | GMA Network Center)
(GMA Network Center | located in | Philippines)"
2051,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The song Mermaid, released under the Columbia Records label, is by the musical band Train.","(Mermaid_(Train_song) | musicalBand | Train_(band))
(Mermaid_(Train_song) | recordLabel | Columbia_Records)","(""Mermaid"" | ""isProducedBy"" | ""Columbia Records"")
(""Mermaid"" | ""isCreatedBy"" | ""Train"")
(""Train"" | ""hasCreated"" | ""Mermaid"")
(""Columbia Records"" | ""hasProduced"" | ""Mermaid"")"
2052,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Brandon Carter was born in England on 1st January 1942.,"(Brandon_Carter | birthPlace | England)
(Brandon_Carter | birthDate | 1942-01-01)","(Brandon Carter | birthDate | ""1st January 1942"")
(Brandon Carter | birthPlace | England)"
2053,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Year of No Light released the album Nord on September 6th, 2009, followed by the album Live at Roadburn 2008.","(Nord_(Year_of_No_Light_album) | releaseDate | 2006-09-06)
(Nord_(Year_of_No_Light_album) | followedBy | Live_at_Roadburn_2008_(Year_of_No_Light_album))
(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)","(""Year of No Light"" | ""released"" | ""Nord"")
(""Nord"" | ""release date"" | ""September 6th, 2009"")
(""Year of No Light"" | ""released"" | ""Live at Roadburn 2008"")"
2054,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Acharya Institute of Technology, affiliated with Visvesvaraya Technological University, is located in the state of Karnataka at Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore - 560090.","(Acharya_Institute_of_Technology | campus | ""In Soldevanahalli, Acharya Dr. Sarvapalli Radhakrishnan Road, Hessarghatta Main Road, Bangalore – 560090."")
(Acharya_Institute_of_Technology | affiliation | Visvesvaraya_Technological_University)
(Acharya_Institute_of_Technology | city | Bangalore)
(Acharya_Institute_of_Technology | state | Karnataka)","(Acharya Institute of Technology | affiliatedWith | Visvesvaraya Technological University)
(Acharya Institute of Technology | location | Soldevanahalli)
(Acharya Institute of Technology | location | Acharya Dr. Sarvapalli Radhakrishnan Road)
(Acharya Institute of Technology | location | Hessarghatta Main Road)
(Acharya Institute of Technology | location | Bangalore)
(Acharya Institute of Technology | location | Karnataka)
(Acharya Institute of Technology | postalCode | 560090)
(Acharya Institute of Technology | locatedOnRoad | Acharya Dr. Sarvapalli Radhakrishnan Road)
(Acharya Institute of Technology | locatedOnRoad | Hessarghatta Main Road)
(Soldevanahalli | partOf | Karnataka)
(Acharya Dr. Sarvapalli Radhakrishnan Road | partOf | Bangalore)
(Hessarghatta Main Road | partOf | Bangalore)
(Bangalore | partOf | Karnataka)"
2055,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, economist and mathematician, graduated from Leningrad State University. Olga is known for the Bondareva-Shapley theorem. She died on December 9th, 1991.","(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | professionalField | Economics)
(Olga_Bondareva | professionalField | Mathematics)
(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | deathDate | 1991-12-09)","(Olga Bondareva | type | economist)
(Olga Bondareva | type | mathematician)
(Olga Bondareva | graduated from | Leningrad State University)
(Olga Bondareva | known for | Bondareva-Shapley theorem)
(Olga Bondareva | died on | December 9th, 1991)"
2056,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Agremiação Sportiva Arapiraquense also known as Agremiação Sportiva Arapiraquense plays in the Campeonato Brasileiro Série C league.,"(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | fullName | ""Agremiação Sportiva Arapiraquense"")","(""Agremiação Sportiva Arapiraquense"" | ""also known as"" | ""Agremiação Sportiva Arapiraquense""),
(""Agremiação Sportiva Arapiraquense"" | ""plays in"" | ""Campeonato Brasileiro Série C"")"
2057,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adams County, Pennsylvania has Carroll County, Maryland to its southeast and the 11th Mississippi Infantry Monument there is categorized as a Contributing Property.","(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | state | ""Pennsylvania"")
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""Adams County, Pennsylvania"" | ""has"" | ""Carroll County, Maryland"")
(""Carroll County, Maryland"" | ""isLocatedIn"" | ""Southeast of Adams County, Pennsylvania"")
(""11th Mississippi Infantry Monument"" | ""isLocatedIn"" | ""Adams County, Pennsylvania"")
(""11th Mississippi Infantry Monument"" | ""isCategorizedAs"" | ""Contributing Property"")"
2058,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Bootleg Series Volume 1: The Quine Tapes, created and produced by The Velvet Underground, is 230.05 minutes long and was recorded in the United States.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | runtime | 230.05)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordedIn | United_States)","(""Bootleg Series Volume 1: The Quine Tapes"" | ""creator"" | ""The Velvet Underground"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""producer"" | ""The Velvet Underground"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""length"" | ""230.05 minutes"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""location"" | ""United States"")"
2059,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Alan Shepard born in New Hampshire served as a crew member of Apollo 14.,"(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | mission | Apollo_14)","(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | occupation | crew member)
(Alan Shepard | member of | Apollo 14)"
2060,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",McVeagh of the South Seas was directed by Gregory Allen.,(McVeagh_of_the_South_Seas | director | Gregory_Allen),"(""McVeagh of the South Seas"" | ""director"" | ""Gregory Allen"")"
2061,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng born in Zaoyang was part of the mission Shenzhou 10.,"(Nie_Haisheng | birthPlace | Zaoyang)
(Nie_Haisheng | mission | Shenzhou_10)","(""Nie Haisheng"" | ""birthPlace"" | ""Zaoyang""),
(""Nie Haisheng"" | ""participatedIn"" | ""Shenzhou 10"")"
2062,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","A monument to the 11th Mississippi Infantry was erected in 2000 in Adams County, Pennsylvania. This monument is categorised as a contributing property. Carroll County Maryland is to the southeast of Adams County Pennsylvania.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(11th_Mississippi_Infantry_Monument | state | ""Pennsylvania"")
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""Monument to the 11th Mississippi Infantry"" | ""date of establishment"" | ""2000"")
(""Monument to the 11th Mississippi Infantry"" | ""location"" | ""Adams County, Pennsylvania"")
(""Monument to the 11th Mississippi Infantry"" | ""isPartOf"" | ""contributing properties"")
(""Carroll County Maryland"" | ""isLocatedIn"" | ""southeast of Adams County Pennsylvania"")"
2063,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Espen Lind is a writer of the song Mermaid by the band Train.,(Mermaid_(Train_song) | writer | Espen_Lind),"(Espen Lind | type | Writer)
(Espen Lind | wroteFor | Mermaid)
(Mermaid | type | Song)
(Mermaid | performedBy | Train)
(Train | type | Band)"
2064,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The time zone in San Francisco is Pacific Time.,(San_Francisco | timeZone | Pacific_Time_Zone),(San Francisco | time zone | Pacific Time)
2065,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The album Live at Roadburn 2008 is recorded by Year of No Light.,(Live_at_Roadburn_2008_(Year_of_No_Light_album) | artist | Year_of_No_Light),"(""Live at Roadburn 2008"" | ""is recorded by"" | ""Year of No Light"")"
2066,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Train song Mermaid, written by Amund Bjørklund, is in the reggae genre.","(Mermaid_(Train_song) | genre | Reggae)
(Mermaid_(Train_song) | writer | Amund_Bjørklund)","(""Mermaid"" | name | ""Mermaid"")
(""Mermaid"" | author | ""Amund Bjørklund"")
(""Mermaid"" | genre | ""reggae"")
(""Mermaid"" | partOf | ""Train song"")"
2067,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Brandon Carter was born in England on January 1, 1942.","(Brandon_Carter | birthPlace | England)
(Brandon_Carter | birthDate | 1942-01-01)","(Brandon Carter | birthPlace | England)
(Brandon Carter | birthDate | ""January 1, 1942"")"
2068,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The United States Air Force is the operating organisation for Al Asad airbase which is in Iraq.,"(Al_Asad_Airbase | operatingOrganisation | United_States_Air_Force)
(Al_Asad_Airbase | location | Iraq)","(""United States Air Force"" | ""operation"" | ""Al Asad airbase""),
(""Al Asad airbase"" | ""location"" | ""Iraq"")"
2069,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The album Bootleg Series Volume 1: The Quine Tapes was produced by The Velvet Underground. It was released by the record labels Polydor Records and Universal Music Group. The album fits into the Rock music genre and is preceded by the album Squeeze.,"(Bootleg_Series_Volume_1:_The_Quine_Tapes | producer | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | genre | Rock_music)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | precededBy | Squeeze_(The_Velvet_Underground_album))
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Polydor_Records)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Universal_Music_Group)","(""Bootleg Series Volume 1: The Quine Tapes"" | ""producer"" | ""The Velvet Underground"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""recordLabel"" | ""Polydor Records"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""recordLabel"" | ""Universal Music Group"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""genre"" | ""Rock music"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""precededBy"" | ""Squeeze"")"
2070,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Robert A.M. Stern is the architect for Alan B. Miller Hall which is at 101 Ukrop Way in Williamsburg, Virginia. The building’s construction start date was on the 30th of March 2007 and the building is owned by The College of William and Mary. It is currently occupied by The Mason School of Business.","(Alan_B._Miller_Hall | architect | Robert_A._M._Stern)
(Alan_B._Miller_Hall | address | ""101 Ukrop Way"")
(Alan_B._Miller_Hall | buildingStartDate | ""30 March 2007"")
(Alan_B._Miller_Hall | currentTenants | Mason_School_of_Business)
(Alan_B._Miller_Hall | location | Williamsburg,_Virginia)
(Alan_B._Miller_Hall | owner | College_of_William_&_Mary)","(""Robert A.M. Stern"" | ""is the architect for"" | ""Alan B. Miller Hall"")
(""Alan B. Miller Hall"" | ""is at"" | ""101 Ukrop Way"")
(""Alan B. Miller Hall"" | ""is in"" | ""Williamsburg, Virginia"")
(""Alan B. Miller Hall"" | ""construction start date"" | ""30th of March 2007"")
(""Alan B. Miller Hall"" | ""is owned by"" | ""The College of William and Mary"")
(""Alan B. Miller Hall"" | ""is occupied by"" | ""The Mason School of Business"")"
2071,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva, a United States citizen (born on January 1, 1958) known for her work with stochastic programming was influenced by Andrzej Piotr Ruszczynski.","(Darinka_Dentcheva | influencedBy | Andrzej_Piotr_Ruszczyński)
(Darinka_Dentcheva | citizenship | United_States)
(Darinka_Dentcheva | birthDate | 1958-01-01)
(Darinka_Dentcheva | knownFor | Stochastic_programming)","(""Darinka Dentcheva"" | ""type"" | ""Person"")
(""Darinka Dentcheva"" | ""birthDate"" | ""1958-01-01"")
(""Darinka Dentcheva"" | ""nationality"" | ""United States"")
(""Darinka Dentcheva"" | ""occupation"" | ""stochastic programming"")
(""Darinka Dentcheva"" | ""influencedBy"" | ""Andrzej Piotr Ruszczynski"")"
2072,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard was born on November 18, 1923 in New Hampshire and his nationality was the United States. In 1959, he was selected by NASA and later died in California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | selectedByNasa | 1959)
(Alan_Shepard | birthPlace | New_Hampshire)","(Alan Shepard | birthDate | November 18, 1923)
(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | nationality | United States)
(Alan Shepard | deathPlace | California)
(Alan Shepard | wasSelectedBy | NASA)
(NASA | selected | Alan Shepard)
(Alan Shepard | selectedYear | 1959)"
2073,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nurhan Atasoy (born in Turkey) currently resides in Turkey where she has a residence in Istanbul. Her nationality is that of Turkish people.,"(Nurhan_Atasoy | residence | Istanbul)
(Nurhan_Atasoy | birthPlace | Turkey)
(Nurhan_Atasoy | nationality | Turkish_people)
(Nurhan_Atasoy | residence | Turkey)","(Nurhan Atasoy | birthPlace | Turkey)
(Nurhan Atasoy | residence | Turkey)
(Nurhan Atasoy | residence | Istanbul)
(Nurhan Atasoy | nationality | Turkish people)"
2074,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Shenzhou 6' COSPAR ID is 2005-040A.,(Shenzhou_6 | cosparId | 2005-040A),"(""Shenzhou 6"" | ""hasCOSPAR_ID"" | ""2005-040A"")"
2075,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",It's Great to Be Young is a 1956 film written by Ted Willis starring John Mills and Cecil Parker. John Mills has two children who go by the name of Hayley and Juliet Mills.,"(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(John_Mills | child | Juliet_Mills)
(""It's_Great_to_Be_Young_(1956_film) | starring | Cecil_Parker)
(John_Mills | child | Hayley_Mills)
(""It's_Great_to_Be_Young_(1956_film) | writer | Ted_Willis"")","(""It's Great to Be Young"" | type | ""film"")
(""It's Great to Be Young"" | date | 1956)
(""It's Great to Be Young"" | writer | ""Ted Willis"")
(""It's Great to Be Young"" | starring | ""John Mills"")
(""It's Great to Be Young"" | starring | ""Cecil Parker"")
(""John Mills"" | role | ""actor"")
(""John Mills"" | hasChildren | ""Hayley Mills"")
(""John Mills"" | hasChildren | ""Juliet Mills"")"
2076,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng born on 10/13/1964 took part in the Shenzhou 10 mission.,"(Nie_Haisheng | mission | Shenzhou_10)
(Nie_Haisheng | birthDate | 1964-10-13)","(""Nie Haisheng"" | ""birth date"" | 10/13/1964)
(""Nie Haisheng"" | ""participate in"" | ""Shenzhou 10 mission"")"
2077,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Brandon Carter, who was born in England, is known for Carter Constant and his contributions to the no-hair theorem. His doctoral advisor was Dennis William Sciama .","(Brandon_Carter | knownFor | Carter_constant)
(Brandon_Carter | knownFor | No-hair_theorem)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)
(Brandon_Carter | birthPlace | England)","(""Brandon Carter"" | ""birthPlace"" | ""England"")
(""Brandon Carter"" | ""knownFor"" | ""Carter Constant"")
(""Brandon Carter"" | ""knownFor"" | ""contributions to the no-hair theorem"")
(""Brandon Carter"" | ""doctoralAdvisor"" | ""Dennis William Sciama"")"
2078,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva, or Olga Nikolaevna Bondareva, was born on April 27,1937 in Leningrad, USSR. She is known for the Bondareva-Shapley theorem.","(Olga_Bondareva | birthPlace | Leningrad,_USSR)
(Olga_Bondareva | birthDate | 1937-04-27)
(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | birthName | ""Olga Nikolaevna Bondareva"")","(Olga Bondareva | hasFullName | Olga Nikolaevna Bondareva)
(Olga Bondareva | birthDate | April 27, 1937)
(Olga Bondareva | birthPlace | Leningrad)
(Olga Bondareva | birthPlace | USSR)
(Olga Bondareva | knownFor | Bondareva-Shapley theorem)"
2079,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Cecil Parker had a main role in It's Great to Be Young, which was edited by Max Benedict.","(""It's_Great_to_Be_Young_(1956_film) | starring | Cecil_Parker)
(""It's_Great_to_Be_Young_(1956_film) | editing | Max_Benedict"")","(""Cecil Parker"" | ""role"" | ""It's Great to Be Young"")
(""It's Great to Be Young"" | ""roleActor"" | ""Cecil Parker"")
(""It's Great to Be Young"" | ""editedBy"" | ""Max Benedict"")
(""Max Benedict"" | ""editorOf"" | ""It's Great to Be Young"")"
2080,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Olga Bondareva graduated from Leningrad State University and is currently an economist.,"(Olga_Bondareva | almaMater | Leningrad_State_University)
(Olga_Bondareva | professionalField | Economics)","(""Olga Bondareva"" | ""graduatedFrom"" | ""Leningrad State University"")
(""Olga Bondareva"" | ""jobTitle"" | ""economist"")"
2081,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Mexican city of Ciudad Ayala is a part of the state of Morelos and has a UTC offset of -6. It is governed on a council-manager basis and its leader is known as the City Manager.,"(Ciudad_Ayala | leaderTitle | ""City Manager"")
(Ciudad_Ayala | governmentType | Council-manager_government)
(Ciudad_Ayala | utcOffset | −6)
(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | country | Mexico)","(Ciudad Ayala | country | Mexico)
(Ciudad Ayala | administrativeDivision | Morelos)
(Ciudad Ayala | utcOffset | ""-6"")
(Ciudad Ayala | governingSystem | ""council-manager"")
(Ciudad Ayala | leaderTitle | ""City Manager"")"
2082,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The orbital period of the asteroid 1147 Stavropolis is 1249.6 days with a periapsis of 260855000000.0.,"(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)","(""1147 Stavropolis"" | ""orbitalPeriod"" | 1249.6),
(""1147 Stavropolis"" | ""periapsis"" | 260855000000.0)"
2083,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Expect A Miracle, produced by Brian Kelly, is followed by the album Afterplay.","(Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album))
(Expect_a_Miracle | producer | Brian_Kelly_(composer_&_pianist))","(""Expect A Miracle"" | ""producer"" | ""Brian Kelly"")
(""Expect A Miracle"" | ""followedBy"" | ""Afterplay"")"
2084,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Located in the city of Dijon and with a postal code of 21000, the University of Burgundy has 16800 undergraduates, 9400 post graduates and 2900 staff members.","(University_of_Burgundy | city | Dijon)
(Dijon | postalCode | 21000)
(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfPostgraduateStudents | 9400)","(University of Burgundy | location | Dijon)
(University of Burgundy | postal code | 21000)
(University of Burgundy | number of undergraduates | 16800)
(University of Burgundy | number of post graduates | 9400)
(University of Burgundy | number of staff | 2900)"
2085,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy in Dijon is home to 27400 students, 16800 of which are undergraduate students. The university has 2900 staff members.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfStudents | 27400)
(University_of_Burgundy | campus | Dijon)","(""University of Burgundy"" | ""location"" | ""Dijon""),
(""University of Burgundy"" | ""totalStudents"" | ""27400""),
(""University of Burgundy"" | ""totalStaff"" | ""2900""),
(""University of Burgundy"" | ""undergraduateStudents"" | ""16800"")"
2086,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva graduated from Leningrad State University and is known for Bondareva-Shapley theorem. Olga died on December 9, 1991 in Saint Petersburg.","(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | deathDate | 1991-12-09)
(Olga_Bondareva | deathPlace | Saint_Petersburg)
(Olga_Bondareva | almaMater | Leningrad_State_University)","(Olga Bondareva | graduated from | Leningrad State University)
(Olga Bondareva | is known for | Bondareva-Shapley theorem)
(Olga Bondareva | died on | December 9, 1991)
(Olga Bondareva | died in | Saint Petersburg)"
2087,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Dennis William Sciama is Brandon Carter's doctoral advisor.,(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama),"(Dennis William Sciama | doctoral advisor of | Brandon Carter)
(Brandon Carter | doctoral advisor  | Dennis William Sciama)"
2088,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",One of the leaders of Ciudad Ayala is Juan Nolasco. It is part of Morelos and Graco Ramirez is a leader in Morelos.,"(Ciudad_Ayala | isPartOf | Morelos)
(Ciudad_Ayala | leader | Juan_Nolasco)
(Morelos | leader | Graco_Ramírez)","(""Ciudad Ayala"" | ""leader"" | ""Juan Nolasco"")
(""Ciudad Ayala"" | ""part of"" | ""Morelos"")
(""Morelos"" | ""leader"" | ""Graco Ramirez"")"
2089,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The 1147 Stavropolis has a periapsis of 260855000000.0 and an orbital period of 1249.6.,"(1147_Stavropolis | periapsis | 260855000000.0)
(1147_Stavropolis | orbitalPeriod | 1249.6)","(""1147 Stavropolis"" | ""hasPeriapsis"" | ""260855000000.0"")
(""1147 Stavropolis"" | ""hasOrbitalPeriod"" | ""1249.6"")"
2090,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Adolfo Suárez Madrid–Barajas Airport in Alcobendas, Spain (operated by ENAIRE in Madrid) is 610.0 metres above sea level with a runway that is 4,349 metres long.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 4349.0)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Alcobendas | country | Spain)","(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""Alcobendas, Spain"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""operator"" | ""ENAIRE"")
(""ENAIRE"" | ""location"" | ""Madrid"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""elevation"" | ""610.0 metres"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""runway length"" | ""4,349 metres"")"
2091,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","With 17000 members, Agremiacao Sportiva Arapiraquense play in the Campeonato Brasileiro Série C league in a ground called Estádio Municipal Coaracy da Mata Fonseca, playing in the 2015 season. Estádio Municipal Coaracy da Mata Fonseca is in Arapiraca.","(Estádio_Municipal_Coaracy_da_Mata_Fonseca | location | Arapiraca)
(Agremiação_Sportiva_Arapiraquense | league | Campeonato_Brasileiro_Série_C)
(Agremiação_Sportiva_Arapiraquense | season | 2015)
(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(Agremiacao Sportiva Arapiraquense | hasMembers | 17000)
(Agremiacao Sportiva Arapiraquense | playsIn | Campeonato Brasileiro Série C)
(Agremiacao Sportiva Arapiraquense | usesGround | Estádio Municipal Coaracy da Mata Fonseca)
(Agremiacao Sportiva Arapiraquense | hasSeason | 2015)
(Estádio Municipal Coaracy da Mata Fonseca | locatedIn | Arapiraca)"
2092,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Velvet Underground created the album Bootleg Series Volume 1: The Quine Tapes, recording it through Polydor Records and releasing it on the Universal Music Group label.","(Bootleg_Series_Volume_1:_The_Quine_Tapes | artist | The_Velvet_Underground)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Polydor_Records)
(Bootleg_Series_Volume_1:_The_Quine_Tapes | recordLabel | Universal_Music_Group)","(""The Velvet Underground"" | ""created"" | ""Bootleg Series Volume 1: The Quine Tapes"")
(""Bootleg Series Volume 1: The Quine Tapes"" | ""recordedThrough"" | ""Polydor Records"")
(""The Velvet Underground"" | ""releasedAlbumThrough"" | ""Universal Music Group"")
(""The Velvet Underground"" | ""releasedAlbum"" | ""Bootleg Series Volume 1: The Quine Tapes"")"
2093,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The owner of Sony Music Entertainment is the Sony Corporation.,(Sony_Music_Entertainment | owner | Sony_Corporation),"(""Sony Music Entertainment"" | ""owner"" | ""Sony Corporation"")"
2094,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Super Capers (runs 98 minutes) was directed by Ray Griggs and starred Danielle Harris.,"(Super_Capers | starring | Danielle_Harris)
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | runtime | 98.0)","(""Super Capers"" | ""duration"" | ""98 minutes"")
(""Super Capers"" | ""director"" | ""Ray Griggs"")
(""Super Capers"" | ""starring"" | ""Danielle Harris"")"
2095,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Brandon Carter, born on January 1, 1942, is well known for Anthropic principle theory.","(Brandon_Carter | knownFor | Anthropic_principle)
(Brandon_Carter | birthDate | 1942-01-01)","(""Brandon Carter"" | ""birthDate"" | ""1942-01-01"")
(""Brandon Carter"" | ""known for"" | ""Anthropic principle theory"")"
2096,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bananaman last aired on April 15th 1986 broadcasted by BBC and stared by Bill Oddie.,"(Bananaman | starring | Bill_Oddie)
(Bananaman | lastAired | ""1986-04-15"")
(Bananaman | broadcastedBy | BBC)","(""Bananaman"" | ""lastAiredOn"" | ""April 15th 1986"")
(""Bananaman"" | ""broadcastedBy"" | ""BBC"")
(""Bananaman"" | ""starredBy"" | ""Bill Oddie"")"
2097,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Brandon Carter was born on January 1, 1942 in England. He worked in the professional field of General Relatively where Dennis William Sciama was his doctoral advisor.","(Brandon_Carter | professionalField | General_relativity)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)
(Brandon_Carter | birthPlace | England)
(Brandon_Carter | birthDate | 1942-01-01)","(""Brandon Carter"" | ""birthDate"" | ""1942-01-01"")
(""Brandon Carter"" | ""birthPlace"" | ""England"")
(""Brandon Carter"" | ""occupation"" | ""General Relativity"")
(""Brandon Carter"" | ""doctoralAdvisor"" | ""Dennis William Sciama"")"
2098,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The leader of Gdynia, Poland is called the Vice President.","(Gdynia,_Poland | leaderTitle | ""Vice President"")","(""Gdynia"" | ""leader"" | ""Vice President"")
(""Vice President"" | ""place of leadership"" | ""Gdynia"")
(""Gdynia"" | ""location"" | ""Poland"")
(""Poland"" | ""has city"" | ""Gdynia"")
(""Vice President"" | ""country of leadership"" | ""Poland"")"
2099,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Tom Simon produced and directed the HBO film ‘Death on a Factory Farm’.,"(Death_on_a_Factory_Farm | director | Tom_Simon)
(Death_on_a_Factory_Farm | producer | Tom_Simon)
(Death_on_a_Factory_Farm | broadcastedBy | HBO)","(Tom Simon | produced | Death on a Factory Farm)
(Tom Simon | directed | Death on a Factory Farm)
(Death on a Factory Farm | broadcastedBy | HBO)"
2100,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bionico is a dessert found in Mexico where Enrique Pena Nieto is the leader and its currency is the peso.,"(Mexico | currency | Mexican_peso)
(Bionico | course | Dessert)
(Bionico | country | Mexico)
(Mexico | leader | Enrique_Peña_Nieto)","(""Bionico"" | ""isLocatedIn"" | ""Mexico"")
(""Enrique Pena Nieto"" | ""isLeaderOf"" | ""Mexico"")
(""Mexico"" | ""currency"" | ""peso"")
(""Mexico"" | ""hasDessert"" | ""Bionico"")"
2101,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The country that the University of Cambridge is located in is the United Kingdom.,(University_of_Cambridge | country | United_Kingdom),(University of Cambridge | location | United Kingdom)
2102,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The album Nord was produced by Year of No Light, which is associated with the band Monarch.","(Nord_(Year_of_No_Light_album) | producer | Year_of_No_Light)
(Year_of_No_Light | associatedBand/associatedMusicalArtist | Monarch_(band))","(""Nord"" | ""producer"" | ""Year of No Light""),
(""Year of No Light"" | ""associatedWith"" | ""Monarch"")"
2103,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy, who resides in Turkey, is a native born Turkish citizen.","(Nurhan_Atasoy | citizenship | Turkey)
(Nurhan_Atasoy | birthPlace | Turkey)
(Nurhan_Atasoy | nationality | Turkish_people)
(Nurhan_Atasoy | residence | Turkey)","(""Nurhan Atasoy"" | ""residesIn"" | ""Turkey"")
(""Nurhan Atasoy"" | ""citizenship"" | ""Turkey"")
(""Nurhan Atasoy"" | ""birthPlace"" | ""Turkey"")"
2104,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nie Haisheng, born in Zaoyang in the Hubei province was a part of both the Shenzhou 10 and Shenzhou 6 missions.","(Nie_Haisheng | mission | Shenzhou_10)
(Nie_Haisheng | mission | Shenzhou_6)
(Nie_Haisheng | birthPlace | Zaoyang)
(Zaoyang | isPartOf | Hubei)","(Nie Haisheng | birthPlace | Zaoyang)
(Nie Haisheng | birthPlace | Hubei)
(Nie Haisheng | participantIn | Shenzhou 10)
(Nie Haisheng | participantIn | Shenzhou 6)"
2105,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala led by the governator have a elevation above the sea level equal to 1147.0.,"(Ciudad_Ayala | leaderTitle | Governator)
(Ciudad_Ayala | elevationAboveTheSeaLevel | 1147.0)","(""Ciudad Ayala"" | ""leader"" | ""the governator"")
(""Ciudad Ayala"" | ""elevation above sea level"" | 1147.0)"
2106,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Dennis William Sciama was doctoral advisor to Brandon Carter, a physicist whose professional field was on General Relativity.","(Brandon_Carter | professionalField | General_relativity)
(Brandon_Carter | doctoralAdvisor | Dennis_William_Sciama)","(""Dennis William Sciama"" | ""type"" | ""Person""),
(""Dennis William Sciama"" | ""role"" | ""doctoral advisor""),
(""Brandon Carter"" | ""type"" | ""Person""),
(""Brandon Carter"" | ""profession"" | ""physicist""),
(""Brandon Carter"" | ""field"" | ""General Relativity""),
(""Dennis William Sciama"" | ""doctoralAdvisorOf"" | ""Brandon Carter""),
(""Brandon Carter"" | ""doctoralStudentOf"" | ""Dennis William Sciama"")."
2107,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The stylistic origin of sludge metal is hardcore punk.,(Sludge_metal | stylisticOrigin | Hardcore_punk),"(""sludge metal"" | ""stylistic origin"" | ""hardcore punk"")"
2108,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Nie Haisheng took part in the Shenzhou 6 mission was part of Shenzhou 10 mission.,"(Nie_Haisheng | mission | Shenzhou_10)
(Nie_Haisheng | mission | Shenzhou_6)","(""Nie Haisheng"" | ""participatedIn"" | ""Shenzhou 6 mission"")
(""Nie Haisheng"" | ""participatedIn"" | ""Shenzhou 10 mission"")
(""Shenzhou 6 mission"" | ""partOf"" | ""Shenzhou 10 mission"")"
2109,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Ciudad Ayala is a city in Mexico, where Roberto Gil Zuarth is one of the leaders.","(Ciudad_Ayala | country | Mexico)
(Mexico | leader | Roberto_Gil_Zuarth)","(""Ciudad Ayala"" | ""isIn"" | ""Mexico"")
(""Roberto Gil Zuarth"" | ""isLeaderOf"" | ""Ciudad Ayala"")"
2110,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Morelos is in the country of Mexico.,(Morelos | country | Mexico),(Morelos | location | Mexico)
2111,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","""English Without Tears"" was written by Anatole de Grunwald, who also produced the film, and by Terence Rattigan.","(English_Without_Tears | producer | Anatole_de_Grunwald)
(English_Without_Tears | writer | Anatole_de_Grunwald)
(English_Without_Tears | writer | Terence_Rattigan)","(""English Without Tears"" | was written by | ""Anatole de Grunwald"")
(""English Without Tears"" | was written by | ""Terence Rattigan"")
(""Anatole de Grunwald"" | produced | ""English Without Tears"")"
2112,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Saint Petersburg born Anatole de Grunwald wrote English Without Tears.,"(Anatole_de_Grunwald | birthPlace | Saint_Petersburg)
(English_Without_Tears | writer | Anatole_de_Grunwald)","(""Anatole de Grunwald"" | ""birthPlace"" | ""Saint Petersburg"")
(""Anatole de Grunwald"" | ""wrote"" | ""English Without Tears"")"
2113,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Rageous was assembled in Detroit, MI. It was a car with a coupe body style. The last Pontiac Rageous was produced in 1997.","(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | assembly | Detroit)
(Pontiac_Rageous | productionEndYear | 1997)
(Pontiac_Rageous | bodyStyle | Coupe)","(""Pontiac Rageous"" | ""was assembled in"" | ""Detroit, MI"")
(""Pontiac Rageous"" | ""is a"" | ""car"")
(""Pontiac Rageous"" | ""has body style"" | ""coupe"")
(""Pontiac Rageous"" | ""was last produced in"" | ""1997"")"
2114,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Ciudad Ayala is in the country of Mexico which is led by Roberto Gil Zuarth.,"(Ciudad_Ayala | country | Mexico)
(Mexico | leader | Roberto_Gil_Zuarth)","(""Ciudad Ayala"" | ""isIn"" | ""Mexico"")
(""Mexico"" | ""isLedBy"" | ""Roberto Gil Zuarth"")"
2115,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Alan Shepard, who served as a crew member of Apollo 14, was born in New Hampshire in United States on November 18, 1923. He retired on August 1st, 1974, and died in California.","(Alan_Shepard | birthDate | ""1923-11-18"")
(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | dateOfRetirement | ""1974-08-01"")
(Alan_Shepard | birthPlace | New_Hampshire)
(Alan_Shepard | mission | Apollo_14)","(Alan Shepard | type | Human)
(Alan Shepard | crewMemberOf | Apollo 14)
(Alan Shepard | birthPlace | New Hampshire, United States)
(Alan Shepard | birthDate | ""November 18, 1923"")
(Alan Shepard | retirementDate | ""August 1, 1974"")
(Alan Shepard | deathPlace | California)
(Apollo 14 | hasCrewMember | Alan Shepard)
(New Hampshire, United States | birthPlaceOf | Alan Shepard)
(California | deathPlaceOf | Alan Shepard)"
2116,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The company Trane is in Ireland.,(Trane | location | Ireland),"(""Trane"" | ""location"" | ""Ireland"")"
2117,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The total area of Turkey is 783,356 square kilometers.",(Turkey | areaTotal | 783356.0),"(""Turkey"" | ""totalArea"" | ""783,356 square kilometers"")"
2118,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The Bedford Aerodrome has an operating organization that is called the MotorSport Vision which is located in the city of Fawkham.,"(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(MotorSport_Vision | city | Fawkham)","(""Bedford Aerodrome"" | ""hasOperatingOrganization"" | ""MotorSport Vision"")
(""MotorSport Vision"" | ""isLocatedIn"" | ""Fawkham"")"
2119,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","American Alan Shepard was born in New Hampshire, but died in California.","(Alan_Shepard | nationality | United_States)
(Alan_Shepard | deathPlace | California)
(Alan_Shepard | birthPlace | New_Hampshire)","(Alan Shepard | birthPlace | New Hampshire)
(Alan Shepard | deathPlace | California)
(Alan Shepard | nationality | 'American')"
2120,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Cecil Parker starred in the 1956 movie It's Great to Be Young, which was edited by Max Benedict.","(""It's_Great_to_Be_Young_(1956_film) | starring | Cecil_Parker)
(""It's_Great_to_Be_Young_(1956_film) | editing | Max_Benedict"")","(""Cecil Parker"" | ""starred in"" | ""It's Great to Be Young"")
(""It's Great to Be Young"" | ""year"" | ""1956"")
(""It's Great to Be Young"" | ""edited by"" | ""Max Benedict"")"
2121,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument was established in the year 2000 and is a contributing property. It is located in Adams County, which is to the southwest of Frederick County, southeast of Carroll County and north of Cumberland County of Maryland and in the municipality of Gettysburg, Pennsylvania.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSouthwest | Frederick_County,_Maryland)
(11th_Mississippi_Infantry_Monument | municipality | Gettysburg,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)
(Adams_County,_Pennsylvania | hasToItsNorth | Cumberland_County,_Pennsylvania)","(11th Mississippi Infantry Monument | yearEstablished | 2000)
(11th Mississippi Infantry Monument | isContributingProperty | True)
(11th Mississippi Infantry Monument | isLocatedIn | Adams County)
(11th Mississippi Infantry Monument | isLocatedIn | Gettysburg)
(Gettysburg | locatedInState | Pennsylvania)
(Adams County | isLocatedIn | Maryland)
(Adams County | hasRelativeLocationTo | Frederick County)
(Frederick County | directionOf | Southwest)
(Adams County | hasRelativeLocationTo | Carroll County)
(Carroll County | directionOf | Southeast)
(Adams County | hasRelativeLocationTo | Cumberland County)
(Cumberland County | directionOf | North)"
2122,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Akeem Ayers was number 39 in the draft pick when he debuted for the Tennessee Titans.,"(Akeem_Ayers | draftPick | ""39"")
(Akeem_Ayers | debutTeam | Tennessee_Titans)","(Akeem Ayers | draftNumber | ""39"")
(Akeem Ayers | debutedFor | Tennessee Titans)"
2123,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Estádio Municipal Coaracy da Mata Fonseca is the name of the ground of Agremiação Sportiva Arapiraquense, which has 17000 members.","(Agremiação_Sportiva_Arapiraquense | numberOfMembers | 17000)
(Agremiação_Sportiva_Arapiraquense | ground | Estádio_Municipal_Coaracy_da_Mata_Fonseca)","(""Estádio Municipal Coaracy da Mata Fonseca"" | ""name of the ground of"" | ""Agremiação Sportiva Arapiraquense"")
(""Agremiação Sportiva Arapiraquense"" | ""has members"" | ""17000"")"
2124,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bionico is a dessert kind of food in Mexico which can be varied by using cottage cheese.,"(Bionico | course | Dessert)
(Bionico | country | Mexico)
(Bionico | dishVariation | Cottage_cheese)","(""Bionico"" | ""type"" | ""dessert"")
(""Bionico"" | ""isPartOf"" | ""Mexico"")
(""Bionico"" | ""canBeVariedUsing"" | ""cottage cheese"")"
2125,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Olga Bondareva was born in Soviet Leningrad and died in the Russian city of Saint Petersburg. The leader of Saint Petersburg is called a governor.,"(Olga_Bondareva | birthPlace | Leningrad,_USSR)
(Saint_Petersburg | country | Russia)
(Olga_Bondareva | deathPlace | Saint_Petersburg)
(Saint_Petersburg | leaderTitle | Governor)","(Olga Bondareva | birthPlace | Soviet Leningrad)
(Olga Bondareva | deathPlace | Russian city of Saint Petersburg)
(Olga Bondareva | placeLived | Soviet Leningrad)
(Olga Bondareva | placeLived | Russian city of Saint Petersburg)
(Saint Petersburg | leaderTitle | Governor)
(Soviet Leningrad | isPartOf | Russia)
(Russian city of Saint Petersburg | isPartOf | Russia)
(Soviet Leningrad | subsequentIdentity | Russian city of Saint Petersburg)"
2126,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Nurhan Atasoy resides in Istanbul, Turkey. Turkey is formally known as the “Republic of Turkey” and is composed of an area of 1.3% water.","(Nurhan_Atasoy | residence | Istanbul)
(Turkey | longName | ""Republic of Turkey"")
(Turkey | percentageOfAreaWater | 1.3)
(Nurhan_Atasoy | residence | Turkey)","(""Nurhan Atasoy"" | ""residesIn"" | ""Istanbul, Turkey"")
(""Turkey"" | ""formallyKnownAs"" | ""Republic of Turkey"")
(""Turkey"" | ""composedOf"" | ""1.3% water"")"
2127,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The 11th Mississippi Infantry Monument, which is a contributing property, was established in the year 2000 in Adams County. To the southeast of Adams County, Pennsylvania lies Carroll County, Maryland and Frederick County, Maryland lies to the southwest.","(11th_Mississippi_Infantry_Monument | established | 2000)
(11th_Mississippi_Infantry_Monument | location | Adams_County,_Pennsylvania)
(Adams_County,_Pennsylvania | hasToItsSouthwest | Frederick_County,_Maryland)
(Adams_County,_Pennsylvania | hasToItsSoutheast | Carroll_County,_Maryland)
(11th_Mississippi_Infantry_Monument | category | Contributing_property)","(""11th Mississippi Infantry Monument"" | ""type"" | ""contributing property"")
(""11th Mississippi Infantry Monument"" | ""establishmentYear"" | ""2000"")
(""11th Mississippi Infantry Monument"" | ""location"" | ""Adams County"")

(""Adams County"" | ""locationOf"" | ""11th Mississippi Infantry Monument"")
(""Adams County"" | ""establishmentDate"" | ""2000"")

(""Adams County"" | ""locationSouthEast"" | ""Carroll County, Maryland"")
(""Carroll County, Maryland"" | ""locationNorthWest"" | ""Adams County"")

(""Adams County"" | ""locationSouthWest"" | ""Frederick County, Maryland"")
(""Frederick County, Maryland"" | ""locationNorthEast"" | ""Adams County"")"
2128,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Hypermarcas is a cosmetics production company that is located in São Paulo, Brazil.","(Hypermarcas | location | Brazil)
(Hypermarcas | location | São_Paulo)
(Hypermarcas | product | Cosmetics)","(""Hypermarcas"" | ""type"" | ""cosmetics production company""),
(""Hypermarcas"" | ""is located in"" | ""São Paulo""),
(""São Paulo"" | ""is in"" | ""Brazil"")"
2129,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Michael Rooker played in Super Capers which had a 2000000 budget and was written/directed by Ray Griggs with a 98 minute running time and a box office of $30955.0.,"(Super_Capers | starring | Michael_Rooker)
(Super_Capers | budget | 2000000.0)
(Super_Capers | writer | Ray_Griggs_(director))
(Super_Capers | director | Ray_Griggs_(director))
(Super_Capers | runtime | 98.0)
(Super_Capers | gross | 30955.0)","(Michael Rooker | actedIn | Super Capers)
(Super Capers | budget | 2000000)
(Super Capers | writtenBy | Ray Griggs)
(Super Capers | directedBy | Ray Griggs)
(Super Capers | runningTime | 98 minutes)
(Super Capers | boxOffice | 30955.0)"
2130,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Year of No Light makes recordings with the label E-Vinyl.,(Year_of_No_Light | recordLabel | E-Vinyl),"(""Year of No Light"" | ""makes recordings with"" | ""E-Vinyl""),
(""Year of No Light"" | ""label"" | ""E-Vinyl"")"
2131,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The University of Burgundy has 2900 staff members and 27,400 students, 16,800 of whom are undergraduates.","(University_of_Burgundy | numberOfUndergraduateStudents | 16800)
(University_of_Burgundy | staff | 2900)
(University_of_Burgundy | numberOfStudents | 27400)","(""University of Burgundy"" | ""hasStaffMembers"" | ""2900"")
(""University of Burgundy"" | ""hasStudents"" | ""27400"")
(""University of Burgundy"" | ""hasUndergraduateStudents"" | ""16800"")"
2132,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","""Super Capers"" is a movie distributed by the company Lionsgate.",(Super_Capers | distributor | Lionsgate),"(""Super Capers"" | type | ""movie""),
(""Super Capers"" | distributedBy | ""Lionsgate"")"
2133,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",John Mills starred in the 1956 film It's Great to Be Young which runs 94 minutes and had Gilbert Taylor as the cinematographer.,"(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor)
(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0"")","(John Mills | starred in | It's Great to Be Young)
(It's Great to Be Young | release year | 1956)
(It's Great to Be Young | duration | 94 minutes)
(Gilbert Taylor | job | cinematographer for It's Great to be Young)"
2134,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Tom Simon directed and produced Death on a Factory Farm which was edited by Geof Bartz. Jamie Lawrence composed the music for the movie which was broadcasted by HBO.,"(Death_on_a_Factory_Farm | director | Tom_Simon)
(Death_on_a_Factory_Farm | producer | Tom_Simon)
(Death_on_a_Factory_Farm | broadcastedBy | HBO)
(Death_on_a_Factory_Farm | editor | Geof_Bartz)
(Death_on_a_Factory_Farm | musicComposer | Jamie_Lawrence)","(""Tom Simon"" | ""directed"" | ""Death on a Factory Farm"")
(""Tom Simon"" | ""produced"" | ""Death on a Factory Farm"")
(""Death on a Factory Farm"" | ""was edited by"" | ""Geof Bartz"")
(""Jamie Lawrence"" | ""composed the music for"" | ""Death on a Factory Farm"")
(""Death on a Factory Farm"" | ""was broadcasted by"" | ""HBO"")"
2135,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Adolfo Suárez Madrid–Barajas Airport is located in Alcobendas, 610 meters above sea level. This airport is operated by ENAIRE, which is located in Madrid. The runway is named 18L/36R and has a length of 4,349 meters.","(Adolfo_Suárez_Madrid–Barajas_Airport | operatingOrganisation | ENAIRE)
(Adolfo_Suárez_Madrid–Barajas_Airport | location | Alcobendas)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayLength | 4349.0)
(ENAIRE | city | Madrid)
(Adolfo_Suárez_Madrid–Barajas_Airport | elevationAboveTheSeaLevel | 610.0)
(Adolfo_Suárez_Madrid–Barajas_Airport | runwayName | ""18L/36R"")","(""Adolfo Suárez Madrid–Barajas Airport"" | ""location"" | ""Alcobendas"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""altitude"" | ""610 meters"")
(""Adolfo Suárez Madrid–Barajas Airport"" | ""operated by"" | ""ENAIRE"")
(""ENAIRE"" | ""location"" | ""Madrid"")
(""runway 18L/36R"" | ""part of"" | ""Adolfo Suárez Madrid–Barajas Airport"")
(""runway 18L/36R"" | ""length"" | ""4,349 meters"")"
2136,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",MotorSport Vision is the operating organisation for Bedford Aerodrome served by Bedford Autodrome.,"(Bedford_Aerodrome | operatingOrganisation | MotorSport_Vision)
(Bedford_Aerodrome | cityServed | Bedford_Autodrome)","(""MotorSport Vision"" | ""is the operating organisation for"" | ""Bedford Aerodrome""),
(""Bedford Aerodrome"" | ""served by"" | ""Bedford Autodrome"")"
2137,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Olga Bondareva a student at Leningrad State University is known for Bondareva-Shapley theorem. She died on December 9, 1991 in Saint Petersburg.","(Olga_Bondareva | knownFor | Bondareva–Shapley_theorem)
(Olga_Bondareva | deathDate | 1991-12-09)
(Olga_Bondareva | deathPlace | Saint_Petersburg)
(Olga_Bondareva | almaMater | Leningrad_State_University)","(""Olga Bondareva"" | ""type"" | ""Person""),
(""Olga Bondareva"" | ""occupation"" | ""Student""),
(""Olga Bondareva"" | ""memberOf"" | ""Leningrad State University""),
(""Olga Bondareva"" | ""knownFor"" | ""Bondareva-Shapley theorem""),
(""Olga Bondareva"" | ""deathDate"" | ""December 9, 1991""),
(""Olga Bondareva"" | ""deathPlace"" | ""Saint Petersburg""),
(""Bondareva-Shapley theorem"" | ""contributor"" | ""Olga Bondareva""),
(""Leningrad State University"" | ""type"" | ""University""),
(""Leningrad State University"" | ""student"" | ""Olga Bondareva""),
(""Saint Petersburg"" | ""deathPlaceOf"" | ""Olga Bondareva"")"
2138,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","John Mills had a main role in the 1956 movie, It's Great to Be Young, which was 94 minutes in length.","(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0"")","(John Mills | hadRoleIn | It's Great to Be Young)
(It's Great to Be Young | year | 1956)
(It's Great to Be Young | hasActor | John Mills)
(It's Great to Be Young | lengthInMinutes | ""94"")"
2139,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The authors of 1634: The Bavarian Crisis, which consists of 448 pages, are Virginia DeMarce and Eric Flint.","(1634:_The_Bavarian_Crisis | numberOfPages | ""448"")
(1634:_The_Bavarian_Crisis | author | ""Virginia DeMarce and Eric Flint"")","(""1634: The Bavarian Crisis"" | ""hasAuthor"" | ""Virginia DeMarce"")
(""1634: The Bavarian Crisis"" | ""hasAuthor"" | ""Eric Flint"")
(""1634: The Bavarian Crisis"" | ""numberOfPages"" | ""448"")"
2140,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","It’s Great to Be Young is a 1956 film that is 94 minutes. John Mills was the main actor while the director was Cyril Frankel. The editors and score composers were Max Benedict and Louis Levy. Gilbert Taylor was the cinematographer and the movie made 282,838 pounds at theaters.","(""It's_Great_to_Be_Young_(1956_film) | starring | John_Mills)
(""It's_Great_to_Be_Young_(1956_film) | cinematography | Gilbert_Taylor)
(""It's_Great_to_Be_Young_(1956_film) | runtime | 94.0)
(""It's_Great_to_Be_Young_(1956_film) | gross | 282838.0)
(""It's_Great_to_Be_Young_(1956_film) | director | Cyril_Frankel)
(""It's_Great_to_Be_Young_(1956_film) | musicComposer | Louis_Levy)
(""It's_Great_to_Be_Young_(1956_film) | editing | Max_Benedict"")","(""It’s Great to Be Young"" | ""type"" | ""Film"")
(""It’s Great to Be Young"" | ""releaseYear"" | ""1956"")
(""It’s Great to Be Young"" | ""duration"" | ""94 minutes"")
(""John Mills"" | ""type"" | ""Actor"")
(""John Mills"" | ""actedIn"" | ""It’s Great to Be Young"")
(""Cyril Frankel"" | ""type"" | ""Director"")
(""Cyril Frankel"" | ""directed"" | ""It’s Great to Be Young"")
(""Max Benedict"" | ""type"" | ""Editor"")
(""Max Benedict"" | ""edited"" | ""It’s Great to Be Young"")
(""Louis Levy"" | ""type"" | ""Composer"")
(""Louis Levy"" | ""composedFor"" | ""It’s Great to Be Young"")
(""Gilbert Taylor"" | ""type"" | ""Cinematographer"")
(""Gilbert Taylor"" | ""cinematographed"" | ""It’s Great to Be Young"")
(""It’s Great to Be Young"" | ""grossed"" | ""282,838 pounds"")"
2141,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Hypermarcas, located in São Paulo, produces healthcare products and has a subsidiary called Mantecorp. Hypermarcas makes $1,800,000,000 a year.","(Hypermarcas | subsidiary | Mantecorp)
(Hypermarcas | product | Healthcare)
(Hypermarcas | location | São_Paulo)
(Hypermarcas | revenue | 1800000000)","(""Hypermarcas"" | ""location"" | ""São Paulo"")
(""Hypermarcas"" | ""industry"" | ""healthcare products"")
(""Hypermarcas"" | ""hasSubsidiary"" | ""Mantecorp"")
(""Hypermarcas"" | ""annualRevenue"" | ""$1,800,000,000"")"
2142,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Darinka Dentcheva, an American citizen, has her current residence in the United States. New York City is the largest city in the United States.","(Darinka_Dentcheva | residence | United_States)
(United_States | largestCity | New_York_City)
(Darinka_Dentcheva | citizenship | United_States)
(United_States | demonym | American)","(Darinka Dentcheva | citizenship | ""American"")
(Darinka Dentcheva | residence | ""United States"")
(New York City | country | ""United States"")
(New York City | isLargestCityOf | ""United States"")"
2143,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Harold French, an actor since 1920, directed the film ""English Without Tears"". Alan Jaggs did the editing for the 89 minute film, and Anatole de Grunwald was in charge of production.","(English_Without_Tears | editing | Alan_Jaggs)
(Harold_French | activeYearsStartYear | 1920-01-01)
(English_Without_Tears | director | Harold_French)
(English_Without_Tears | producer | Anatole_de_Grunwald)
(English_Without_Tears | runtime | 89.0)","(""Harold French"" | ""type"" | ""Actor"")
(""Harold French"" | ""occupation"" | ""Actor"")
(""Harold French"" | ""activityStartYear"" | 1920)
(""Harold French"" | ""directed"" | ""English Without Tears"")
(""English Without Tears"" | ""director"" | ""Harold French"")
(""English Without Tears"" | ""type"" | ""Film"")
(""Alan Jaggs"" | ""type"" | ""Editor"")
(""Alan Jaggs"" | ""edited"" | ""English Without Tears"")
(""English Without Tears"" | ""editor"" | ""Alan Jaggs"")
(""English Without Tears"" | ""durationInMinutes"" | 89)
(""Anatole de Grunwald"" | ""type"" | ""Producer"")
(""Anatole de Grunwald"" | ""producerFor"" | ""English Without Tears"")
(""English Without Tears"" | ""producer"" | ""Anatole de Grunwald"")"
2144,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",Bionico is a dessert course found in Mexico where the currency is the Mexican peso. Cake is also served for dessert.,"(Mexico | currency | Mexican_peso)
(Bionico | course | Dessert)
(Dessert | dishVariation | Cake)
(Bionico | country | Mexico)","(""Bionico"" | ""isA"" | ""dessert course"")
(""Bionico"" | ""foundIn"" | ""Mexico"")
(""Cake"" | ""isA"" | ""dessert"")
(""Mexico"" | ""currency"" | ""Mexican peso"")"
2145,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Actor Harry Carey, born in 1878, and Cyril Bruce directed McVeagh of the South Seas which was registered in IMDb with the ID 0004319. Harry Carey also wrote and acted in the movie which was produced by the Progressive Motion Picture Company.","(McVeagh_of_the_South_Seas | imdbId | 0004319)
(McVeagh_of_the_South_Seas | director | Cyril_Bruce)
(McVeagh_of_the_South_Seas | director | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | starring | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | writer | Harry_Carey_(actor_born_1878))
(McVeagh_of_the_South_Seas | producer | The_Progressive_Motion_Picture_Company)","(""Harry Carey"" | ""type"" | ""Actor"")
(""Harry Carey"" | ""birthYear"" | ""1878"")
(""Harry Carey"" | ""directed"" | ""McVeagh of the South Seas"")
(""Cyril Bruce"" | ""type"" | ""Actor"")
(""Cyril Bruce"" | ""directed"" | ""McVeagh of the South Seas"")
(""McVeagh of the South Seas"" | ""registeredIn"" | ""IMDb"")
(""McVeagh of the South Seas"" | ""IMDbID"" | ""0004319"")
(""Harry Carey"" | ""wrote"" | ""McVeagh of the South Seas"")
(""Harry Carey"" | ""actedIn"" | ""McVeagh of the South Seas"")
(""McVeagh of the South Seas"" | ""producedBy"" | ""Progressive Motion Picture Company"")"
2146,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Train song Mermaid is a 3.16 minute song in the reggae genre which is on Columbia Records. It had been released under the Sony Music Entertainment label and was preceded by ""This'll Be my Year.""","(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | recordLabel | Sony_Music_Entertainment)
(""Mermaid_(Train_song) | precededBy | This'll_Be_My_Year)
(Mermaid_(Train_song) | runtime | 3.16)
(Mermaid_(Train_song) | genre | Reggae)","(""Mermaid"" | ""type"" | ""song"")
(""Mermaid"" | ""by"" | ""Train"")
(""Mermaid""| ""duration"" | ""3.16 minutes"")
(""Mermaid"" | ""genre"" | ""reggae"")
(""Mermaid"" | ""record"" | ""Columbia Records"")
(""Mermaid"" | ""releasedBy"" | ""Sony Music Entertainment"")
(""Mermaid"" | ""precededBy"" | ""This'll Be my Year"")"
2147,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The Pontiac Rageous, which was last produced in 1997, was assembled in Michigan.","(Pontiac_Rageous | assembly | Michigan)
(Pontiac_Rageous | productionEndYear | 1997)","(""Pontiac Rageous"" | ""lastProducedIn"" | ""1997"")
(""Pontiac Rageous"" | ""assembledIn"" | ""Michigan"")"
2148,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Artur Rasizade is a leader in Azerbaijan, the home of the Baku Turkish Martyrs' Memorial.","(Azerbaijan | leader | Artur_Rasizade)
(""Baku_Turkish_Martyrs'_Memorial | location | Azerbaijan"")","(Artur Rasizade | nationality | Azerbaijan)
(Artur Rasizade | role | leader)
(Azerbaijan | contains | Baku Turkish Martyrs' Memorial)"
2149,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","""English Without Tears"" was produced by Anatole de Grunwald, directed by Harold French, with cinematography done by Bernard Knowles.","(English_Without_Tears | director | Harold_French)
(English_Without_Tears | cinematography | Bernard_Knowles)
(English_Without_Tears | producer | Anatole_de_Grunwald)","(""English Without Tears"" | produced by | ""Anatole de Grunwald"")
(""English Without Tears"" | directed by | ""Harold French"")
(""English Without Tears"" | cinematography by | ""Bernard Knowles"")"
2150,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Trane is a subsidiary company that was founded in La Crosse, Wisconsin on 1913-01-01 but later moved to Ireland. Their 29,000 employees produce building materials, prominent among which are HVAC products.","(Trane | type | Subsidiary)
(Trane | foundingDate | 1913-01-01)
(Trane | location | Ireland)
(Trane | foundationPlace | La_Crosse,_Wisconsin)
(Trane | numberOfEmployees | 29000)
(Trane | product | HVAC)
(Trane | industry | Building_materials)","(""Trane"" | ""type"" | ""Subsidiary company"")
(""Trane"" | ""foundingLocation"" | ""La Crosse, Wisconsin"")
(""Trane"" | ""foundingDate"" | ""1913-01-01"")
(""Trane"" | ""location"" | ""Ireland"")
(""Trane"" | ""numberOfEmployees"" | ""29000"")
(""Trane"" | ""product"" | ""building materials"")
(""Trane"" | ""product"" | ""HVAC products"")"
2151,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)",The long name of the Philippines is the Republic of the Philippines.,"(Philippines | longName | ""Republic of the Philippines"")","(""Philippines"" | ""longName"" | ""Republic of the Philippines"")"
2152,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","Discovered by Grigory Neujmin, the asteroid 1147 Stavropolis has an apoapsis of 418476000000.0 AU and an orbital period of 1147 Stavropolis is 1249.6. Its magnitude is 11.5.","(1147_Stavropolis | orbitalPeriod | 1249.6)
(1147_Stavropolis | discoverer | Grigory_Neujmin)
(1147_Stavropolis | apoapsis | 418476000000.0)
(1147_Stavropolis | absoluteMagnitude | 11.5)","(1147 Stavropolis | discoveredBy | Grigory Neujmin)
(1147 Stavropolis | hasApoapsis | 418476000000.0 AU)
(1147 Stavropolis | hasOrbitalPeriod | 1249.6)
(1147 Stavropolis | hasMagnitude | 11.5)"
2153,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","The song Mermaid, which was written by Espen Lind and produced by Stargate, is performed by the band Train on Columbia Records.","(Mermaid_(Train_song) | recordLabel | Columbia_Records)
(Mermaid_(Train_song) | writer | Espen_Lind)
(Mermaid_(Train_song) | writer | Stargate_(production_team))","(""Mermaid"" | ""writtenBy"" | ""Espen Lind""),
(""Mermaid"" | ""producedBy"" | ""Stargate""),
(""Mermaid"" | ""performedBy"" | ""Train""),
(""Mermaid"" | ""recordLabel"" | ""Columbia Records""),
(""Espen Lind"" | ""writes"" | ""Mermaid""),
(""Stargate"" | ""produces"" | ""Mermaid""),
(""Train"" | ""performs"" | ""Mermaid""),
(""Columbia Records"" | ""recordLabelFor"" | ""Mermaid"")"
2154,"Pretend that you are great at parsing text and can effectively extract all entities and their relationships from a text. I will give you some text and you will extract all the possible triples. Please extract all the triples using the style of DBpedia vocabulary where possible, although prefixes should not be added. Use literal values where appropriate. Ensure that every possible relation is extracted. The output format is: (subject | relationship | object)","African Americans are an ethnic group in the USA, where Abraham A. Ribicoff was born and was married to Ruth Ribicoff.","(Abraham_A._Ribicoff | spouse | ""Ruth Ribicoff"")
(Abraham_A._Ribicoff | birthPlace | United_States)
(United_States | ethnicGroup | African_Americans)
(Abraham_A._Ribicoff | nationality | United_States)","(""African Americans"" | ethnicGroupIn | ""USA""),
(""Abraham A. Ribicoff"" | birthPlace | ""USA""),
(""Abraham A. Ribicoff"" | maritalStatus | ""Ruth Ribicoff"")."
